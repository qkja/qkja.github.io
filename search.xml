<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(2)/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>今天这个是一个大工程，主要说的就是函数指针相关的知识，以及我们自己写一写qsort函数</p></blockquote><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><blockquote><p>在写这个之前，我们先做一下铺垫</p></blockquote><h2 id="函数有地址吗"><a href="#函数有地址吗" class="headerlink" title="函数有地址吗"></a>函数有地址吗</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/3ddca949d7dc410193a4671553c790b9.png" alt="在这里插入图片描述"></p><blockquote><p>看来函数是有地址的，而且和数组类似，&amp;函数名 和函数名的地址一样</p></blockquote><h2 id="如何定义函数地址"><a href="#如何定义函数地址" class="headerlink" title="如何定义函数地址"></a>如何定义函数地址</h2><blockquote><p>这个很难用文字只管描述出来，我们是例子来辅助</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> Add<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Add<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">pf1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6ff04cc6ee52429bb20ff7084b226cbe.png" alt="在这里插入图片描述"></p><blockquote><p>这里我们得出一些个结论</p></blockquote><ul><li>*pf1 和 pf1是一样的</li><li>&amp;函数名和函数名类型是一样的</li></ul><blockquote><p>我来解释一下<br>int(*pf1)(int, int) &#x3D; Add;</p></blockquote><ol><li>pf1先和*结合，表明pf1是一个指针</li><li>其次和后面的（int，int）中的（）结合，表明pf1指向的是一个函数</li><li>（int，int）表名函数的参数有两个，都是int型</li><li>最前面的int表示返回值是int型</li></ol><h1 id="函数指针的数组"><a href="#函数指针的数组" class="headerlink" title="函数指针的数组"></a>函数指针的数组</h1><blockquote><p>我们都知道数组是相同类型元素的集合，既然函数指针也是一种指针类型，那么它也可以构成数组，不过要求他们参数和返回类型一摸一样</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Add<span class="token punctuation">,</span>Sub<span class="token punctuation">,</span>Mul<span class="token punctuation">,</span>Div <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里我也解释一下，int(*pf[4])(int, int) &#x3D; { Add,Sub,Mul,Div };</p></blockquote><ol><li>pf先和[4]结合，表明是一个数组，数组里面有4 的元素</li><li>去掉pf[4]，得到int(* )(int, int) ，这是一个函数指针，所以说4个元素每个都是是一个函数指针</li></ol><h1 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h1><blockquote><p>首先说一下，我也不想套娃，不过知识点在这，我也没办法，这是最后一个了，</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Add<span class="token punctuation">,</span>Sub<span class="token punctuation">,</span>Mul<span class="token punctuation">,</span>Div <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>ppf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>pf<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>解释吧 int(*(*ppf)[4])(int, int) &#x3D; &amp;pf;</p></blockquote><ol><li>ppf和*结合，标明是指针</li><li>去掉*ppf,得到的 int(*[4])(int, int)表示是一个数组</li></ol><h1 id="自己定义实现qsort"><a href="#自己定义实现qsort" class="headerlink" title="自己定义实现qsort"></a>自己定义实现qsort</h1><blockquote><p>我们先看看qsort的参数</p></blockquote><p><img src="https://img-blog.csdnimg.cn/cb30207941b746948bda03707aac79fa.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h1><p>程序的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203191350918.png" alt="image-20220319135019707"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203191351469.png" alt="image-20220319135102358"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(1)/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>指针这个模块我一直都在疑惑，不知道究竟该如何写，自己写不好倒是小事，要是这篇误导了各位就是大罪了，我尽最大的努力让各位满意。</p></blockquote><h2 id="指针是什么"><a href="#指针是什么" class="headerlink" title="指针是什么"></a>指针是什么</h2><p>在这里，我确实没有找到指针的准确定义，找到的好像都是一些总结性的语言，我这里就依次来解释一下究竟什么是指针。<br>我们都知道，内存的的最小单元是字节，我们给每一个字节都编上序号，就像是房间的门牌号一样，我们得知门牌号就可以找到那个空间。<br><img src="https://s2.51cto.com/images/20211204/1638629562158653.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><blockquote><p>，这里的门牌号就是我们说的地址，也就是指针，我们仔细验证一下</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211204/1638629877615036.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="指针和指针变量"><a href="#指针和指针变量" class="headerlink" title="指针和指针变量"></a>指针和指针变量</h2><blockquote><p>这个话题可能很少有人谈到，我们在看一些编程语言的书籍时会发现一会儿说指针，一会儿说指针变量，那么他们究竟有什么区别</p></blockquote><ul><li>地址就是指针，指针就是地址</li><li>指针变量是一个变量，里面存储的是地址。</li><li>二者有区别，不过我们一般将指针变量说成指针</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//&amp;a就是指针   p就是指针变量</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><blockquote><p>这里面我就简略的说一下，左值就是常量，右值就是变量</p></blockquote><p><img src="https://s2.51cto.com/images/20220118/1642474349109640.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="为什么定义指针"><a href="#为什么定义指针" class="headerlink" title="为什么定义指针"></a>为什么定义指针</h2><blockquote><p>这个问题非常好，指针这么难理解，我们为什么还要定义这个东西呢，不是自找麻烦吗？这里我给出两个原因，我这里就解释第二个。</p></blockquote><ul><li>简化代码</li><li>参数传递</li></ul><blockquote><p>参数传递确保我们可以找到需要改变的变量的空间</p></blockquote><p><strong>问题：写一个函数交换两个变量的值</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pa<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pb<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>    <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>    <span class="token operator">*</span>pb <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前：a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//swap2(&amp;a, &amp;b);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后：a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638682022497781.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><img src="https://s2.51cto.com/images/20211205/1638682054613103.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><blockquote><p>概念： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p></blockquote><blockquote><p>原因：</p></blockquote><ul><li>未初始化</li><li>未释放</li><li>访问越界</li></ul><blockquote><p>这里说一下，我们在应用层面是检测不出野指针的，只有在运行时编译器有可能给我们报错，所以对于我们不在用的指针我们让他变成NULL。这样就可以减少野指针的出现概率。</p></blockquote><h2 id="指针类型和大小"><a href="#指针类型和大小" class="headerlink" title="指针类型和大小"></a>指针类型和大小</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><blockquote><p>指针既然是变量，那么他也有一些类型，其他的我会单独出一个博客</p></blockquote><ul><li>char  *pc &#x3D; NULL;</li><li>int   *pi &#x3D; NULL;</li><li>short *ps &#x3D; NULL;</li><li>long  *pl &#x3D; NULL;</li><li>float *pf &#x3D; NULL;</li><li>double *pd &#x3D; NULL;</li></ul><h3 id="指针的大小"><a href="#指针的大小" class="headerlink" title="指针的大小"></a>指针的大小</h3><blockquote><p>这里我想大家应该都知道</p></blockquote><ul><li>32位平台   4 个字节</li><li>64位平台   8个字节</li></ul><h2 id="指针类型的作用"><a href="#指针类型的作用" class="headerlink" title="指针类型的作用"></a>指针类型的作用</h2><blockquote><p>我们都知道了无论是char* 还是 int*在32平台下都是4个字节，那么指针的类型又有什么意义</p></blockquote><ul><li>指针类型决定 +1 可以走几步</li><li>指针类型决定解引用可以访问几个字节</li></ul><h3 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 = %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 = %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638682974167874.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 = %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 = %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638683053309852.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>指针类型 +1 跳过他解引用的数据类型所占的字节数</li></ul><h3 id="指针的解引用"><a href="#指针的解引用" class="headerlink" title="指针的解引用"></a>指针的解引用</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#x"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638683499250851.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><img src="https://s2.51cto.com/images/20211205/1638683535108129.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><ul><li>指针的类型决定了，对指针解引用的时候有多大的权限（能操作几个字节）<br>比如： char* 的指针解引用就只能访问一个字节，而 int* 的指针的解引用就能访问四个字节。</li></ul><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><h3 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针 - 指针"></a>指针 - 指针</h3><blockquote><p>指针-指针得到的是两个指针之间元素的个数</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p2 <span class="token operator">-</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638683980776240.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><img src="https://s2.51cto.com/images/20211205/1638684123253036.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="指针比较"><a href="#指针比较" class="headerlink" title="指针比较"></a>指针比较</h3><blockquote><p>指针比较这个知识点我就说一下，我们一般谈的是高地址、<br>低地址，也可以说成大地址、小地址。这就可以比较打大小了。这个知识点主要用在双指针的题目中</p></blockquote><h4 id="逆置字符串"><a href="#逆置字符串" class="headerlink" title="逆置字符串"></a>逆置字符串</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">resreval</span><span class="token punctuation">(</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> left <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> right <span class="token operator">=</span> arr <span class="token operator">+</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>        <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>        <span class="token operator">*</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL中数据库的的增删改查 进阶</title>
      <link href="/2022/06/21/MySQL/08%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%20%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/06/21/MySQL/08%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%20%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这篇博客主要是数据库增删查改的的进阶，我们在这里要学习聚合查询和联合查询，其中联合查询是我们经常使用的，并且有一定的难度，我们需要经常练习。</p><h1 id="查找到的数据插入到另一张表中"><a href="#查找到的数据插入到另一张表中" class="headerlink" title="查找到的数据插入到另一张表中"></a>查找到的数据插入到另一张表中</h1><p>我们以前使用过select查询一张表中的数据，那么我们是否可以把查到的数据保存到另一张表里面呢，事实上，我们可以做到</p><h2 id="创建一张-原始表"><a href="#创建一张-原始表" class="headerlink" title="创建一张 原始表"></a>创建一张 原始表</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建一张 原始表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>decription <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入一些数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'曹操'</span><span class="token punctuation">,</span><span class="token string">'乱世枭雄'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token string">'仁德之主'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'孙权'</span><span class="token punctuation">,</span><span class="token string">'年轻有为'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121837217.png" alt="image-20220312183736081"></p><h2 id="创建保存表"><a href="#创建保存表" class="headerlink" title="创建保存表"></a>创建保存表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> user2<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>decription <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="开始查找并保存"><a href="#开始查找并保存" class="headerlink" title="开始查找并保存"></a>开始查找并保存</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> user2 <span class="token keyword">select</span> name<span class="token punctuation">,</span>decription <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121840361.png" alt="image-20220312184058293"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>子查询得到的 <strong>列顺序</strong> 和 **类型 **要相同</p></li><li><p>列名一不一样没有挂巴西</p></li><li><p>我们查询得到的数据保存时一定要相匹配</p></li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121843168.png" alt="image-20220312184347126"></p><hr><h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><p>聚合查询很简单，就是借助我们SQL的内置的函数就可以了，我们不关心他们是如何实现的，熟练掌握就可以了。下面我们来看看都有哪些函数。我们就一些例子来说，由于他们使用的方法都是一样的，我们就说一部分就可以了</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>下面是内置函数的分类和说明，我们看一看看就可以了，用着用着就会了。这些内置函数的得到的都是一张<strong>临时表</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">count()</td><td align="center">返回查询到的数据的 数量</td></tr><tr><td align="center">max()</td><td align="center">返回查询到的数据的 最大值，不是数字没有意义</td></tr><tr><td align="center">min()</td><td align="center">返回查询到的数据的 最小值，不是数字没有意义</td></tr><tr><td align="center">avg()</td><td align="center">返回查询到的数据的 平均值，不是数字没有意义</td></tr><tr><td align="center">sum()</td><td align="center">返回查询到的数据的 总和，不是数字没有意义</td></tr></tbody></table><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>count 这个函数很奇怪，我们在使用的的时候一定要小心，下面让我们来看看它的用法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 计算 id  的行数</span></code></pre><blockquote><p>这个是是计算 字段 <strong>id</strong> 所占据的函数，<strong>但是要是 id 的值位 NULL ，这一行就不计算</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- 计算 所有列  的行数 去最大值</span></code></pre><blockquote><p>一般情况下，得到的值和任意列的行数相同，但是有 NULL 的话就不一定了</p></blockquote><blockquote><p>只要默认值不是NULL 都计算</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">types</span><span class="token punctuation">(</span>type_id <span class="token keyword">int</span><span class="token punctuation">,</span>type_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'unknow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">types</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">types</span> <span class="token punctuation">(</span>type_id<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121919193.png" alt="image-20220312191905128"></p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>count  不计算NULL的值   可以计算其他默认值</li><li>count后不能有空格</li></ul><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>sum 是计算指定列的和，我们也可以使用where语句进行一部分的求和</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>score <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'曹操'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'孙权'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121932941.png" alt="image-20220312193235821"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--  允许指定别名  </span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121934154.png" alt="image-20220312193418066"></p><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121935037.png" alt="image-20220312193554005"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> score <span class="token operator">&lt;</span> <span class="token number">85</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- 计算 分数 小于85 的同学的平均数</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121938501.png" alt="image-20220312193802467"></p><h2 id="group-by-子句"><a href="#group-by-子句" class="headerlink" title="group by 子句"></a>group by 子句</h2><p>group by 子句主要是为了分组,我们指定字段,将字段内容相同的分为一组,这和去重不一样,后面用到是的时候你就会发现</p><blockquote><p>使用 group by 进行分组查询时，select 指定的字段必须是“分组依据字段”，其他字段若想出现在select  中则必须包含在聚合函数中  </p></blockquote><p>我先创建一个环境</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>role <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span> role<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'马云'</span><span class="token punctuation">,</span><span class="token string">'服务员'</span><span class="token punctuation">,</span> <span class="token number">1000.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'马化腾'</span><span class="token punctuation">,</span><span class="token string">'游戏陪玩'</span><span class="token punctuation">,</span> <span class="token number">2000.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'游戏角色'</span><span class="token punctuation">,</span> <span class="token number">999.11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'猪无能'</span><span class="token punctuation">,</span><span class="token string">'游戏角色'</span><span class="token punctuation">,</span> <span class="token number">333.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'沙和尚'</span><span class="token punctuation">,</span><span class="token string">'游戏角色'</span><span class="token punctuation">,</span> <span class="token number">700.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'隔壁老王'</span><span class="token punctuation">,</span><span class="token string">'董事长'</span><span class="token punctuation">,</span> <span class="token number">12000.66</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查询每个角色的最高-最低-平局工资"><a href="#查询每个角色的最高-最低-平局工资" class="headerlink" title="查询每个角色的最高 最低 平局工资"></a>查询每个角色的最高 最低 平局工资</h3><p>这就要使用分组,分组后还可以使用内置函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> role <span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> role<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161256390.png" alt="image-20220316125638348"></p><h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><p>having 和 where语句作用是一样的,只不过它使用与group by 语句中</p><h3 id="查询平均工资大于1000的角色"><a href="#查询平均工资大于1000的角色" class="headerlink" title="查询平均工资大于1000的角色"></a>查询平均工资大于1000的角色</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> role<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> role <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161300350.png" alt="image-20220316130025311"></p><hr><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><blockquote><p>联合查询才是我们今天的正菜，这就要求高了，联合查询是<strong>多张表</strong>之间的查询，我们会经常使用</p></blockquote><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><p>很抱歉，即使在计算机学习中我们也要听到这个“恶魔”的名字，不错他就是那个笛卡尔坐标系的笛卡尔，很庆幸我们不会学那么难的，就一个很简单的知识点，下面我画图表示</p><p>笛卡尔积的计算很简单，只需要表的函数相乘就可以了，不过这是我们学习联合查询的基础</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161214557.png" alt="image-20220316121442492"></p><h3 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建班级表</span><span class="token keyword">create</span> <span class="token keyword">table</span> classes<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建课程表</span><span class="token keyword">create</span> <span class="token keyword">table</span> course <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建分数表</span><span class="token keyword">create</span> <span class="token keyword">table</span> score<span class="token punctuation">(</span>score <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>student_id <span class="token keyword">int</span><span class="token punctuation">,</span>course_id <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建学生表</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>sn <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qq_mail <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>classes_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161104848.png" alt="image-20220316110427684"></p><p>插入一些数据  班级</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> classes<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'计算机系2019级1班'</span><span class="token punctuation">,</span> <span class="token string">'学习了计算机原理、C和Java语言、数据结构和算法'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'中文系2019级3班'</span><span class="token punctuation">,</span><span class="token string">'学习了中国传统文学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'自动化2019级5班'</span><span class="token punctuation">,</span><span class="token string">'学习了机械自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'Java'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'中国传统文化'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'计算机原理'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'高阶数学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'英文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>sn<span class="token punctuation">,</span> name<span class="token punctuation">,</span> qq_mail<span class="token punctuation">,</span> classes_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'09982'</span><span class="token punctuation">,</span><span class="token string">'黑旋风李逵'</span><span class="token punctuation">,</span><span class="token string">'xuanfeng@qq.com'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00835'</span><span class="token punctuation">,</span><span class="token string">'菩提老祖'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00391'</span><span class="token punctuation">,</span><span class="token string">'白素贞'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00031'</span><span class="token punctuation">,</span><span class="token string">'许仙'</span><span class="token punctuation">,</span><span class="token string">'xuxian@qq.com'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00054'</span><span class="token punctuation">,</span><span class="token string">'不想毕业'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'51234'</span><span class="token punctuation">,</span><span class="token string">'好好说话'</span><span class="token punctuation">,</span><span class="token string">'say@qq.com'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'83223'</span><span class="token punctuation">,</span><span class="token string">'tellme'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'09527'</span><span class="token punctuation">,</span><span class="token string">'老外学中文'</span><span class="token punctuation">,</span><span class="token string">'foreigner@qq.com'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score<span class="token punctuation">(</span>score<span class="token punctuation">,</span> student_id<span class="token punctuation">,</span> course_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token comment" spellcheck="true">-- 黑旋风李逵</span><span class="token punctuation">(</span><span class="token number">70.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">98.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 菩提老祖</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">59.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 白素贞</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 许仙</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 不想毕业</span><span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 好好说话</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- tellme</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161106449.png" alt="image-20220316110615316"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161109768.png" alt="image-20220316110905700"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161111150.png" alt="image-20220316111138020"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161112011.png" alt="image-20220316111217877"></p><h2 id="查询每一个学生的每一门成绩"><a href="#查询每一个学生的每一门成绩" class="headerlink" title="查询每一个学生的每一门成绩"></a>查询每一个学生的每一门成绩</h2><p>分析我们这个要求</p><ol><li>学生在 student表中  </li><li>课程在 course表中</li><li>成绩在score表中</li></ol><p>下面我们就可以写出下面代码,</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161230465.png" alt="image-20220316123017422"></p><p>我们发现结果有 960行,这肯定是不对的,我们得到了一些无效的数据.后面要加判断语句</p><blockquote><p>我们发现要取的有效数据,学生的id一定要和成绩表的学生的id一定要相等</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161237121.png" alt="image-20220316123723086"></p><p>只有120行了,还要加判断条件,课程id和成绩表的课程id也要相等</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id <span class="token operator">and</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161240000.png" alt="image-20220316123959946"></p><p>这样就完成了,我们呢也可以简单一下表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token keyword">as</span> course_name<span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id <span class="token operator">and</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161241162.png" alt="image-20220316124139107"></p><h2 id="计算每一名同学的总成绩"><a href="#计算每一名同学的总成绩" class="headerlink" title="计算每一名同学的总成绩"></a>计算每一名同学的总成绩</h2><p>配合使用聚合函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token keyword">as</span> course_name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score <span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id <span class="token operator">and</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> student<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161246309.png" alt="image-20220316124623265"></p><p>我们会了基本的联合查询后,就要开始下面几个比较难的的知识点了</p><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>这个知识点我们了解就可以了,不过要记住 join on 的查询方法</p><p>我们看一下语法,只需要看看就可以,重点结合例子</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名<span class="token number">2</span> <span class="token keyword">on</span> 连接条件 <span class="token operator">and</span> 其他条件<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- inner 可以省略</span><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span> 别名<span class="token number">2</span> <span class="token keyword">where</span> 连接条件 <span class="token operator">and</span> 其他条件<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sco<span class="token punctuation">.</span>score <span class="token keyword">from</span> student stu <span class="token keyword">inner</span> <span class="token keyword">join</span> score sco <span class="token keyword">on</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>student_id<span class="token operator">and</span> stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'许仙'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">select</span> sco<span class="token punctuation">.</span>score <span class="token keyword">from</span> student stu<span class="token punctuation">,</span> score sco <span class="token keyword">where</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>student_id <span class="token operator">and</span>stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'许仙'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161306699.png" alt="image-20220316130630653"></p><p>观察下面的结果,我们有8个学生,但是结果只有7个,原因就是 score 中没有<strong>老外学中文的id</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student stu <span class="token keyword">join</span> score sco <span class="token keyword">on</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161318648.png" alt="image-20220316131823578"></p><blockquote><p>我们可以这样理解,当我们对笛卡尔积的结果进行筛选,筛选的结果一定在两张表中都存咋,这就是内链接,可以立即为交集</p></blockquote><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>谈完内连接,一定会有外连接,实际工作中,主要以内连接为主,不过我们也要了解我找了一篇文章,很不错,大家可以看看<a href="https://mp.weixin.qq.com/s?src=11&timestamp=1647408609&ver=3679&signature=zQpoxVv5U1fYDFX2wzgMBLlbb2OpRj7YdeoHyvQk1WPzhxF2I3S9MoIb5AEl4BsvbmSNoa1ZtG2y8VmOMhdWd55wx0TH9ri6mu7t*3yq1xZ8cZD27SwFkj7yNLaOCtXU&new=1">理解内连接外连接</a></p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>我们不谈外连接，这里就要说说什么是自连接。<strong>自连接是指在同一张表连接自身进行查询</strong>。我们可以把一张表看作是两张一摸一样的表来进行多表查询，这里我们仍然通过例子来演示.</p><p>&#x3D;&#x3D;问题 : 显示所有“计算机原理”成绩比“Java”成绩差的成绩信息&#x3D;&#x3D;</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 先查询“计算机原理”和“Java”课程的id</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> course <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Java'</span> <span class="token operator">or</span> name<span class="token operator">=</span><span class="token string">'计算机原理'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171503032.png" alt="image-20220317150301990"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 再查询成绩表中，“计算机原理”成绩比“Java”成绩 差的信息</span><span class="token keyword">select</span> s1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> score s1 <span class="token punctuation">,</span>score s2 <span class="token keyword">where</span> s1<span class="token punctuation">.</span>student_id <span class="token operator">=</span> s2<span class="token punctuation">.</span>student_id <span class="token operator">and</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>course_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> s2<span class="token punctuation">.</span>course_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> s1<span class="token punctuation">.</span>score <span class="token operator">></span> s2<span class="token punctuation">.</span>score<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171506016.png" alt="image-20220317150614972"></p><p>当然我们也可以使用 join on 语句</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询倒是很简单，我们可以把几个select在同一条语句中使用，下面是定义</p><blockquote><p>子查询是指嵌入在其他sql语句中的select语句，也叫嵌套查询  </p></blockquote><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><p>我们用例子来演示</p><p>&#x3D;&#x3D;问题 : 查询与“不想毕业” 同学的同班同学&#x3D;&#x3D;</p><h3 id="我们可以先使用普通的查询方法"><a href="#我们可以先使用普通的查询方法" class="headerlink" title="我们可以先使用普通的查询方法"></a>我们可以先使用普通的查询方法</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找 “不想毕业” 同学的 班级id</span><span class="token keyword">select</span> classes_id <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'不想毕业'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找所有学生班级id 与 “不想毕业” 同学 班级id 相同的学生</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> classes_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171438600.png" alt="image-20220317143800489"></p><h3 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h3><p>我们只需要一步就可以了</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> classes_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> classes_id <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'不想毕业'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171440700.png" alt="image-20220317144002644"></p><h2 id="多行查询"><a href="#多行查询" class="headerlink" title="多行查询"></a>多行查询</h2><p>有时侯，单行查询的结果是远远不够的，你看看下面的问题</p><p>&#x3D;&#x3D;问题：查询“语文”或“英文”课程的成绩信息&#x3D;&#x3D;</p><p>我们无法使用上面的的语句，这就需要多行行查询的结果，下面有两种方式可以解决</p><h3 id="使用-in"><a href="#使用-in" class="headerlink" title="使用 in"></a>使用 in</h3><p>我们直接使用，解释在下面</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> course_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> course <span class="token keyword">where</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'语文'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'英文'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171448005.png" alt="image-20220317144805958"></p><h3 id="使用-exists"><a href="#使用-exists" class="headerlink" title="使用 exists"></a>使用 exists</h3><p>这个方法我们有点难理解，记住就。一般情况下我们都是使用第一种方法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> score sco <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sco<span class="token punctuation">.</span>course_id <span class="token keyword">from</span> course cou<span class="token keyword">where</span> <span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'语文'</span> <span class="token operator">or</span> name<span class="token operator">=</span><span class="token string">'英文'</span><span class="token punctuation">)</span> <span class="token operator">and</span> cou<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>course_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171449309.png" alt="image-20220317144946262"></p><blockquote><p>现在让我们来解释一下这些原理</p></blockquote><ul><li>对于 <strong>in</strong> ： SQL是先执行where语句后面的得到语文和英文课程的id 然后就是我们可以理解的查询语句了</li><li>对于 <strong>exists</strong> ： SQL先执行where前面的，得到的每一条数据看看是否符合后面的判断语句。</li></ul><h1 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h1><p>这是最后一个查询。很简单的</p><blockquote><p>在实际应用中，为了合并多个select的执行结果，可以使用集合操作符 union，union all。使用union<br>和union all时，前后查询的结果集中，字段需要一致  </p></blockquote><p>&#x3D;&#x3D;问题:查询id小于3，或者名字为“英文”的课程&#x3D;&#x3D;</p><p>我们使用平常的方法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'英文'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171512838.png" alt="image-20220317151242792"></p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>我们也可以通过使用union来解决</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'英文'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171514094.png" alt="image-20220317151446048"></p><h3 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h3><p>我们可能会疑惑union all这个是什么玩意，看看下面的现象你就会明白了</p><p>&#x3D;&#x3D;问题: 查询id小于3，或者名字为“Java”的课程&#x3D;&#x3D;</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用 union</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'java'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171518732.png" alt="image-20220317151834686"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用 union all</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'java'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171519319.png" alt="image-20220317151957271"></p><p>这里你就会发现，当我们使用union all的时候，即使得到重复的数据也不会省略</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
