<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
      <url>/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>顺序表是数据结构里面最简单的一点知识，不过它能够充分体现出数据结构的思想，今天让我们正式进入拉开数据结构的帷幕.让我们一起来学习吧</p></blockquote><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>在谈正式内容之前,我们先来看看什么是线性表</p><blockquote><p>线性表（linear list）是n个具有相同特性的数据元素的有限<strong>序列</strong>。 线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串…</p></blockquote><p>这里我想重点谈谈线性表，首先线性表是一个<font color = red>序列</font>，不是那个升序降序的序列，就是一组数。对于存在多个数据，第一个元素找不到前驱，最后一个元素找不到后驱，其余的都有一个前驱和一个后驱。再说一下，里面的元素是<strong>相同数据类型</strong>的。不能存在不同的数据类型。</p><p><img src="https://s2.51cto.com/images/20211214/1639478650688992.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk="></p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>顺序表是用一段<em><strong>物理地址连续</strong></em>的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。它的<strong>本质就是一个数组</strong>.我们会疑惑我们既然有数组,为何还会出现顺序表呢?实际上在C99之前,我们的编译器不支持变常数组,在对数据的存储方面有一定的不好.这就出现了顺序表</p><p>今天顺序表的博客是很简单的,就是关于数组元素的增删查改.没有很么可以值德思考的地方,细心一点就可以了</p><p>顺序表又分为：</p><ul><li>静态顺序表：使用定长数组存储</li><li>动态顺序表：使用动态开辟的数组存储。</li></ul><h2 id="顺序表的创建"><a href="#顺序表的创建" class="headerlink" title="顺序表的创建"></a>顺序表的创建</h2><blockquote><p>今天我是以动态的顺序表为例，如果知道了这个，那么静态的就不再话下了</p></blockquote><p>我们先定义两个类（存放在两个文件中）</p><blockquote><p>顺序表的创建与一些方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArraylist</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elem<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//定义一个数组</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> usedSize<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//数组使用的长度</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> intCapacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始容量</span>    <span class="token comment" spellcheck="true">//构造方法</span>    <span class="token keyword">public</span> <span class="token function">MyArraylist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>intCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印顺序表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在 pos 位置新增元素</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判定是否包含某个元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> toFind<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查找某个元素对应的位置</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> toFind<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 pos 位置的元素</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给 pos 位置的元素设为 value</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除第一次出现的关键字key</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> toRemove<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取顺序表长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清空顺序表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>测试文件</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>下面我就开始方法的实现，要是多次写 MyArraylist类的全部内容可能会使大家大家阅读不太方便，我每次就写一个方法</p></blockquote><h2 id="打印顺序表"><a href="#打印顺序表" class="headerlink" title="打印顺序表"></a>打印顺序表</h2><blockquote><p>这和数组的打印是一样的，不过我们的边界是有效的长度</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211214/1639482870200537.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="在-pos-位置新增元素"><a href="#在-pos-位置新增元素" class="headerlink" title="在 pos 位置新增元素"></a>在 pos 位置新增元素</h2><blockquote><p>要实现这个方法，考虑的条件就要多了，我们一点一点的分析</p></blockquote><ul><li><p>判断pos的值是否合法</p><p>pos合法性的判断主要有两点</p><ol><li>不能小于 0</li><li>不能和数组最后一个元素产生间隔</li></ol><p><img src="https://s2.51cto.com/images/20211214/1639480218114881.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>原本的数组满了，增容后添加</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//二倍扩容</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里ifFull方法我们单独写出来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">ifFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>usedSize <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//满了</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这些问题解决后，我们就可以放心的添加数据了</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> pos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token operator">++</span><span class="token punctuation">;</span></code></pre><blockquote><p>所以该方法所有的内容有</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//二倍扩容</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> pos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token operator">++</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211214/1639483121712366.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="判定是否包含某个元素"><a href="#判定是否包含某个元素" class="headerlink" title="判定是否包含某个元素"></a>判定是否包含某个元素</h2><p>这个挺简单的,遍历一下顺序表就行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> toFind<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> toFind<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="查找某个元素对应的位置"><a href="#查找某个元素对应的位置" class="headerlink" title="查找某个元素对应的位置"></a>查找某个元素对应的位置</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> toFind<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> toFind<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//找不到该元素</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="获取-pos-位置的元素"><a href="#获取-pos-位置的元素" class="headerlink" title="获取 pos 位置的元素"></a>获取 pos 位置的元素</h2><blockquote><p>这个也是有条件的</p></blockquote><ul><li>空顺序表</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">ifEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>pos的值不合法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">ifLeg</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>pos<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>完整代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"顺序表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抛出一个异常</span>        <span class="token comment" spellcheck="true">// return -1;  //如果那个元素就是  -1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifLeg</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="给-pos-位置的元素设为-value"><a href="#给-pos-位置的元素设为-value" class="headerlink" title="给 pos 位置的元素设为 value"></a>给 pos 位置的元素设为 value</h2><blockquote><p>这个和上面的一样</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"顺序表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifLeg</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211214/1639483036105186.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="删除第一次出现的关键字key"><a href="#删除第一次出现的关键字key" class="headerlink" title="删除第一次出现的关键字key"></a>删除第一次出现的关键字key</h2><blockquote><p>需要判定一下是否存在 key</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> toRemove<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>toRemove<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//查一查key对应的位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不存在这个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//一定要写</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="获取顺序表长度"><a href="#获取顺序表长度" class="headerlink" title="获取顺序表长度"></a>获取顺序表长度</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//return 0;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="清空顺序表"><a href="#清空顺序表" class="headerlink" title="清空顺序表"></a>清空顺序表</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如何清空</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>usedSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"clear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>在我们看这个博客之前，要是对于 接口、重写等不太了解的，可以想先去看看这篇:point_right:</p><p>我们今天说的就是下面这两个 <strong>Stack</strong> 和 <strong>Queue</strong>，前面要是学过链表的,学习栈与队列就十分简单了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041533210.png" alt="image-20220304153348111"></p><h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈   Stack"></a>栈   Stack</h1><p>栈是一中 <strong>先进后出</strong> 的数据结构，它的底层是<em><strong>数组</strong></em>，在Java中已经被封装好了，我们可以直接调用，当然我们也可以自己来实现。</p><blockquote><p>一种特殊的线性表，其只允许在固定的一端进行插入和删除元素操作。进行数据插入和删除操作的一端称为栈<br>顶，另一端称为栈底。栈中的数据元素遵守后进先出LIFO（Last In First Out）的原则  </p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041546124.png" alt="image-20220304154619920"></p><h2 id="出栈例题"><a href="#出栈例题" class="headerlink" title="出栈例题"></a>出栈例题</h2><blockquote><p>我们先看一道题目，牢牢掌握如何出栈的</p></blockquote><p>一般这样的是选择题，我们一个一个选项试试就可以了</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041549787.png"></p><ol><li>A选项　ＡＢＣＤ一次性全部压入栈中，后面一个一个出来就可以了</li><li>B选项　先压入　A　进入后直接出来A 再压B，直接出来B　依次类推</li><li>C选项    压入A B C，出来C，再出B，再出A，最后压入D，直接出来D</li><li>D选项　 压入A B C，出来C　后面要出的话只能出来的是B，所以错误</li></ol><h2 id="Java中封装的栈方法"><a href="#Java中封装的栈方法" class="headerlink" title="Java中封装的栈方法"></a>Java中封装的栈方法</h2><blockquote><p>我们先使用看看效果，后面自己来实现</p></blockquote><p>不过我们要是使用封装的栈，要导入  import java.util.Stack; 的包</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041559007.png" alt="image-20220304155905918"></p><h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h3><blockquote><p>判断栈是不是空栈</p></blockquote><ul><li>空      返回  true</li><li>不空  返回 false</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;Integer>  表示 栈中元素是 int 型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041624444.png" alt="image-20220304162446327"></p><h3 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h3><blockquote><p>返回栈顶的元素，但是<strong>不弹出</strong>这个元素，如果栈是空栈会抛出一个运行时异常</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main1</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041616227.png" alt="image-20220304161615116"></p><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><blockquote><p>返回栈顶的元素，并且<strong>弹出</strong>这个元素，如果栈是空栈会抛出一个运行时异常</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041619620.png" alt="image-20220304161928568"></p><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><blockquote><p>将数据压入栈顶</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041624392.png" alt="image-20220304162414267"></p><h2 id="自己实现栈中的方法"><a href="#自己实现栈中的方法" class="headerlink" title="自己实现栈中的方法"></a>自己实现栈中的方法</h2><blockquote><p>栈的底层是一个数组，我们可以选择使用链表或者数组来实现，这里就通过数组的方式，为了简单起见，这里就不进行扩容了</p></blockquote><h3 id="初始工作"><a href="#初始工作" class="headerlink" title="初始工作"></a>初始工作</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> tail<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记尾</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elem<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开辟 10 个整型 的空间</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现-push"><a href="#实现-push" class="headerlink" title="实现 push()"></a>实现 push()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断是不是满了</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//我们就不扩容了</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现empty"><a href="#实现empty" class="headerlink" title="实现empty()"></a>实现empty()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现-peek"><a href="#实现-peek" class="headerlink" title="实现 peek"></a>实现 peek</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"空栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现pop"><a href="#实现pop" class="headerlink" title="实现pop()"></a>实现pop()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"空栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyStack myStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空栈</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041700208.png" alt="image-20220304170024103"></p><p>到这里栈的基础知识就说完了，后面就是做题了</p><h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 Queue"></a>队列 Queue</h1><p>队列和栈是是很相似的数据结构，不过他是 <strong>先进先出</strong>的模式</p><blockquote><p>队列：只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表，队列具有先进先出FIFO(First<br>In First Out) 入队列：进行插入操作的一端称为<strong>队尾（<strong><strong>Tail&#x2F;Rear</strong></strong>）</strong> 出队列：进行删除操作的一端称为<strong>队头</strong>  </p></blockquote><p>java当中的队列也分为几种，下面我就大概shuoyixai</p><ol><li>双端队列（deque）：  是指允许两端都可以进行入队和出队操作的队列，deque 是 “double ended queue” 的简称。<br> 那就说明元素可以从队头出队和入队，也可以从队尾出队和入队  </li><li>循环队列    ：操作系统课程讲解生产者消费者模型时可以就会使用循环队列，环形队列通常使用数组实现</li></ol><h2 id="Java中封装的队列的方法"><a href="#Java中封装的队列的方法" class="headerlink" title="Java中封装的队列的方法"></a>Java中封装的队列的方法</h2><blockquote><p>这里我们就看一下，后面直接通过链表来实现哎，当然数组也可以</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041713496.png" alt="image-20220304171356294"></p><h2 id="自己实现队列的方法"><a href="#自己实现队列的方法" class="headerlink" title="自己实现队列的方法"></a>自己实现队列的方法</h2><p>我们通过 <strong>链表</strong> 实现</p><h3 id="初始工作-1"><a href="#初始工作-1" class="headerlink" title="初始工作"></a>初始工作</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">QueueNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> QueueNode next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QueueNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QueueNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> QueueNode head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头节点</span>    <span class="token keyword">private</span> QueueNode tail<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 尾节点</span>    <span class="token keyword">public</span> <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041719700.png" alt="image-20220304171924654"></p><h3 id="实现add"><a href="#实现add" class="headerlink" title="实现add()"></a>实现add()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                QueueNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现peek"><a href="#实现peek" class="headerlink" title="实现peek()"></a>实现peek()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="实现poll"><a href="#实现poll" class="headerlink" title="实现poll()"></a>实现poll()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        QueueNode cur <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyQueue myQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203041733903.png" alt="image-20220304173309733"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Linux/03%20Linux%E4%B8%8B%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/06/24/Linux/03%20Linux%E4%B8%8B%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>我们在window系统下学习C语言，一般会使用VSCode、VS这些软件，它们有一个统称叫做<strong>集成开发环境</strong> ,在Vs2013中我们很容易写出几个 <em><strong>.c</strong></em> 文件，只需要编译一下就可以运行起来，那么在Linux环境下该怎么做？</p></blockquote><h1 id="make和Makefile"><a href="#make和Makefile" class="headerlink" title="make和Makefile"></a>make和Makefile</h1><blockquote><p>我这里就先说一下，不做详细的解释</p></blockquote><ul><li>make       是一条命令</li><li>Makefile 是一个文件</li></ul><h1 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h1><h2 id="创建多个文件"><a href="#创建多个文件" class="headerlink" title="创建多个文件"></a>创建多个文件</h2><blockquote><p>先创建几个文件</p></blockquote><pre class=" language-powershell"><code class="language-powershell">touch main<span class="token punctuation">.</span>c mytest<span class="token punctuation">.</span>c mytest<span class="token punctuation">.</span>h</code></pre><p><img src="https://img-blog.csdnimg.cn/6f7a51341c5f421aa3d6bbdb641a831d.png" alt="在这里插入图片描述"></p><h3 id="编写mytest-h"><a href="#编写mytest-h" class="headerlink" title="编写mytest.h"></a>编写mytest.h</h3><pre class=" language-c"><code class="language-c">   <span class="token macro property">#<span class="token directive keyword">ifndef</span> __MYTEST_H__          </span><span class="token comment" spellcheck="true">//#ifndef __MYTEST_H__这个先把=不用管</span>   <span class="token macro property">#<span class="token directive keyword">define</span> __MYTEST_H__  </span>   <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>      <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                   <span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="编写mytest-c"><a href="#编写mytest-c" class="headerlink" title="编写mytest.c"></a>编写mytest.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mytest.h"</span></span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="编写main-c"><a href="#编写main-c" class="headerlink" title="编写main.c"></a>编写main.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mytest.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Makefile-x2F-makefile文件"><a href="#Makefile-x2F-makefile文件" class="headerlink" title="Makefile&#x2F;makefile文件"></a>Makefile&#x2F;makefile文件</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><blockquote><p>我们在本目录下创建一个Makefile（或者makefile）文件</p></blockquote><pre class=" language-powershell"><code class="language-powershell">touch Makefile</code></pre><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="编写一"><a href="#编写一" class="headerlink" title="编写一"></a>编写一</h4><pre class=" language-python"><code class="language-python">mybin<span class="token punctuation">:</span> main<span class="token punctuation">.</span>c mytest<span class="token punctuation">.</span>c    gcc main<span class="token punctuation">.</span>c mytest<span class="token punctuation">.</span>c <span class="token operator">-</span>o mybin  </code></pre><p><img src="https://img-blog.csdnimg.cn/6690460929f0409cada555f42abddda7.png" alt="在这里插入图片描述"></p><blockquote><p>这里是我们今天的重点，我会好好的解释的</p></blockquote><p>我们首先要知道一点：一个Makefile文件存在下面的东西，缺一不可</p><ul><li>依赖关系</li><li>依赖方法</li></ul><p><img src="https://img-blog.csdnimg.cn/2fd0ccf824a34c92900970dcb5ef150e.png" alt="在这里插入图片描述"></p><h4 id="成果一"><a href="#成果一" class="headerlink" title="成果一"></a>成果一</h4><p><img src="https://img-blog.csdnimg.cn/f0ddfd0880af4e01bf0c2d2a655fc018.png" alt="在这里插入图片描述"></p><blockquote><p>我们只需要用一下make命令</p></blockquote><p><img src="https://img-blog.csdnimg.cn/1ad73ce60e75427492fa12cfdef07453.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4ae3d149d7bc4145b45539d53c3e2cba.png" alt="在这里插入图片描述"></p><blockquote><p>那我们是不是也可以将删除mybin的命令加入到Makefile文件中呢？</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3609a59ae13a44c8a7192552cfd7c907.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/da56fbf48a8f4a2592ccdc5fa807a9b6.png" alt="在这里插入图片描述"></p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><blockquote><p>一般我们学到基础那里就可以了，要是还要深入的学习，这里可以稍微了解一下</p></blockquote><h4 id="进阶一"><a href="#进阶一" class="headerlink" title="进阶一"></a>进阶一</h4><blockquote><p>要是我们想要简省依赖方法就可以写下面的命令</p></blockquote><pre class=" language-powershell"><code class="language-powershell">gcc $^ <span class="token operator">-</span>o $@</code></pre><p><img src="https://img-blog.csdnimg.cn/a3771cc6574b400fa479fa62813f1228.png" alt="在这里插入图片描述"></p><blockquote><p>我们可能疑惑$^这些字符是啥，这里要知道一些知识</p></blockquote><p>我们在这里看到了 <strong><strong>：</strong></strong>  冒号，这是一个很关键的东西</p><pre><code>                目标文件 ：依赖文件</code></pre><ul><li>冒号左边 目标文件  也就是   $@</li><li>冒号左边 依赖文件  也就是   $^</li></ul><p><img src="https://img-blog.csdnimg.cn/094d552fc69946e995840aa7f85a99e0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/96f26e4d53b84eab85809dee980f302b.png" alt="在这里插入图片描述"></p><h4 id="进阶二"><a href="#进阶二" class="headerlink" title="进阶二"></a>进阶二</h4><blockquote><p>要是我们还想省略，就要写下面的命令</p></blockquote><p><img src="https://img-blog.csdnimg.cn/049abeeec67b4c11a6ec11456098aa8d.png" alt="在这里插入图片描述"></p><blockquote><p>解释一下</p></blockquote><ul><li>%.o    对应.c文件生成的.o文件</li><li>%.c    本目录下所有的.c文件</li><li>$&lt;     所有的.c文件一一展开在gcc下生成对应的.o文件</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>一般情况下，我们会了基础的那部分就可以了，熟练的可以使用进阶部分</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Linux/03%20Linux%20%E6%9D%83%E9%99%90/"/>
      <url>/2022/06/24/Linux/03%20Linux%20%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>求K层节点的个数</p><p>层序遍历  队列</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Linux/04%20gdb%E8%B0%83%E8%AF%95/"/>
      <url>/2022/06/24/Linux/04%20gdb%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>sudo install -y gdb</p><p>gdb –version</p><p>gcc 的程序不可调试     release   交付给用户使用</p><p>debug  里面包含了调试信息    体积上一定大于  </p><p>如何修改</p><p>gcc $^ -o $@ -g     </p><p>我们会发现debug模式下的可执行程序就是比   release大</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061341263.png" alt="image-20220306134126231"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061340306.png" alt="image-20220306134013271"></p><p>readelf -h mybin_g  读取一个可执行程序</p><p>调试究竟是在干什么</p><p>发现问题   定位问题   分析问题   解决问题</p><p>人  发现</p><p>定位  gbd</p><p>分析  </p><p>打断点   b  行号</p><p>Breakpoint 1 at 0x400570: file test.c, line 16.</p><p>use: debuginfo-install glibc-2.17-325.el7_9</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061356687.png" alt="image-20220306135646661"></p><p>n  下一行 next</p><p>r  运行 到断电</p><p>d  </p><p>info  b  查看断电</p><p>step  s 进入函数</p><p>display 长显示</p><p>undisplay</p><p>until  10 跳到指定行</p><p>finish   跳出函数</p><p>quit  退出gdb</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061421802.png" alt="image-20220306142134754"></p><p>c 下一个断点处</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Linux/02%20Linux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2022/06/24/Linux/02%20Linux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天我们首要的目的就是把我们常用的指令和大家分享完，我们添加一些管道和压缩的命令，指令这个部分到这里就基本结束了，当然，这些都是最基本的，后面我们用到其他指令的话，也会和大家解释的，我们先对Linux上手.</p><h1 id="man-指令"><a href="#man-指令" class="headerlink" title="man 指令"></a>man 指令</h1><p>man指令首先我们要知道的是它可以查询指令,也就是说我们如果不知道一个指令作用是什么的时候,我们可以通过man 指令名来查.这我们需要和大家分享三种用法,大家先记住就可以了.</p><h2 id="下载man指令"><a href="#下载man指令" class="headerlink" title="下载man指令"></a>下载man指令</h2><p>由于我们用的是云服务器,我们可能没有man指令,这里我们需要下载一下.我们需要在root用户下下载.</p><blockquote><p>如何进入root用户,这里有两种方法.</p></blockquote><ul><li>进入XShell,直接用root登录</li><li>在普通用户下执行   su-   命令,回车后输入root密码</li></ul><blockquote><p>在root用户下下载man    执行下面指令</p></blockquote><pre class=" language-shell"><code class="language-shell">yum install -y man-pages</code></pre><h2 id="查询指令"><a href="#查询指令" class="headerlink" title="查询指令"></a>查询指令</h2><p>下面就是查找的就是ls指令的作用.</p><blockquote><p>man ls</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206232128089.png" alt="image-20220623212845913"></p></blockquote><h3 id="man-man"><a href="#man-man" class="headerlink" title="man man"></a>man man</h3><p>既然man可以查询指令,那么man可以查询man指令吗?man也是一个指令,自然是可以查询的.</p><blockquote><p>man man</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206232156006.png" alt="image-20220623215650882"></p></blockquote><h2 id="查询标准库"><a href="#查询标准库" class="headerlink" title="查询标准库"></a>查询标准库</h2><p>是的,你没有看错,man指令可以查询标准库里面的函数,包括C++&#x2F;Java等语言,这些语言是我们需要下载的,但是由于Linux是由C语言写的,所以自带标准库,我们可以直接查询.</p><blockquote><p>man printf</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206232143259.png" alt="image-20220623214308155"></p></blockquote><p>你会发现,我们不是要查printf函数吗,怎么出来的是指令,是的,在Linux中,printf变成了指令,我们要查函数的话需要加上个东西.</p><blockquote><p>man 3 printf</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206232147117.png" alt="image-20220623214702960"></p></blockquote><h2 id="查询系统调用"><a href="#查询系统调用" class="headerlink" title="查询系统调用"></a>查询系统调用</h2><p>这里大家先不用知道,我们先给出用法,在后面的几篇博客都会和大家分享的.</p><blockquote><p>man -2 fork   </p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206232154589.png" alt="image-20220623215436480"></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>man 指令是我们以后经常用到的指令,主要的作用就是查询<font color = blue>指令的用法.</font>man指令面带不同的数字,代表不同的用法.</p></blockquote><ul><li>man 1 指令名    也就是  man 指令名,我们把1给自动省略了</li><li>man 3 其他         查询系统调用,大家先不用知道,记住就可以了.</li><li>man 3 函数名    查询标准库里面的函数</li></ul><h1 id="cp-指令"><a href="#cp-指令" class="headerlink" title="cp 指令"></a>cp 指令</h1><p>cp指令是拷贝的指令,它可以拷贝文件或者是目录.</p><h2 id="拷贝普通文件"><a href="#拷贝普通文件" class="headerlink" title="拷贝普通文件"></a>拷贝普通文件</h2><p>下面是我们最基本的用法.</p><blockquote><pre class=" language-shell"><code class="language-shell">cp 源文件 目的文件</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206242015987.png" alt="image-20220624201531936"></p></blockquote><blockquote><p>假设我们把一个文件里面的内容拷贝导另一个文件中,这个文件里面的所有内容都会覆盖掉.</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206242021003.png" alt="image-20220624202101956"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Linux/01%20Linux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2022/06/24/Linux/01%20Linux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>好久没有写博客了，学校快要期末考试了，这个是在零碎的时间的拼凑出来了的。闲言少序，在了解了Linux的历史背景后，我们需要开始初步开始学习如何使用Linux系统.</p><hr><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>我们需要花上一点时间，看看操作系统是什么东西.</p><p>由于我们操作硬件效率太过低下,难度也特别高,所以我们发明的操作系统.我们都知道C语言存在printf函数,我们可以通过这个函数在显示器上打印东西,而显示器是硬件,也就是说<font color = red>软件可以修改硬件</font>,我们来看看计算的组成.</p><ul><li>最底层  : 硬件     包括键盘 显示器 网卡  显卡</li><li>驱动软件层  向下有各种硬件的驱动软件,调度硬件 ,向上提供各种接口</li><li>狭义上这一层是操作系统  包含  进程管理 ,文件管理 ,内存管理 ,驱动管理</li><li>用户层 包含图形化界面,各种库,应用程序</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206221732727.png" alt="image-20220622173245455"></p><p>上面的是很官方的东西,我们用一个例子来举例.我们需要用银行的例子来举例,这也是蛋哥举得.</p><p>首先存在一个银行,里面有桌椅板凳和存钱的设备,这些就是硬件,另外存在不同的工作人员来使用这些硬件,他们就是驱动层,银行肯定是有业务的,所以存在业务管理人员负责调度这些驱动人员完成相应的工作.;我们作为用户就是使用手机电脑或者现场办理这些业务,那么手机和电脑就是相应的用户层,其中可能会存在黄牛,他们属于第三方的库,这就是一套银行系统.其中业务管理人员就是我们学的操作系统.</p><blockquote><p>操作系统的作用</p></blockquote><ul><li>对下 管理底下的软硬件资源</li><li>对上 给用户提供一个良好的,稳定的,高效的用户环境</li></ul><h2 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><p>既然现实生活中也存在很多种银行,操作系统也是如此,Linux就是其中一款操作系统.</p><h1 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h1><blockquote><p>什么是指令？指令是我们与Linux交互的手段，我们在Windows环境下，使用的是图形化界面，我们可以使用鼠标来进行点点点，但是在Linux环境下，我们不建议使用鼠标，更喜欢通过指令来和计算机进行交互，通过指令来让计算机完成自己想要的工作.在Linux系统下,可以使用的指令有很多,大概有1000多个,我们常用的大概是100左右.有人可能会对这感到恐惧,这么多?不要害怕,我们是渐进式学习的,用着用着这些指令就会明白了,对于那些不了解的指令,我们还可以上网去查,都有的.</p></blockquote><h2 id="为什么要学习指令"><a href="#为什么要学习指令" class="headerlink" title="为什么要学习指令"></a>为什么要学习指令</h2><p>我们到底要不要学习指令呢?对于非专业人员不需要掌握,对于我们而言,学习操作系统我们一定需要了解指令.这是肯定的.指令先于鼠标出现,早期的计算机就是为了数据计算,需要键盘输入数据.人们从打字机那里来演变出了键盘,出现了键盘后,所有的操作系统都支持指令操作,知道乔布斯发现了图形化界面的操作系统.指令离OS最近，指令学习可以让我们掌握OS．</p><h2 id="指令的选项"><a href="#指令的选项" class="headerlink" title="指令的选项"></a>指令的选项</h2><p>几乎所有的指令都会带选选项的,所谓的选项是对这个指令进一步的补充,就比如指令是一个导航搜索的地址,选项就是把这个地址进一步精确的多少米的范围.选项与选项之间是可以共同使用的,这个后面我们用到的时候在谈.</p><h1 id="ls-指令"><a href="#ls-指令" class="headerlink" title="ls 指令"></a>ls 指令</h1><blockquote><p>ls 指令  是查找当前目录下的东西包含该目录下的所有子目录与文件.</p></blockquote><p>也就是说 在2022_06_03文件夹中包含一个code文件夹和一个file.txt文本文件,ls就可以把它们显出出来.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206031655648.png" alt="image-20220603165459485">  </p><h2 id="常用的选项"><a href="#常用的选项" class="headerlink" title="常用的选项"></a>常用的选项</h2><p>我们的选项有很多,这里我们先列出一些常用的选项.</p><ul><li>-l  列出文件的详细信息  </li><li>-a 列出目录下的所有文件，包括以 . 开头的&#x3D;&#x3D;隐含文件&#x3D;&#x3D;</li></ul><blockquote><p>-l 选项 </p></blockquote><p>通过这个选项我们可以看出该文件是文件夹,还是一个普通文件.</p><ul><li>文件夹  也就是子目录       用drwxrwxr-x 表示</li><li>普通文件                             用-rw-rw-r–    表示</li></ul><p>还可以看到该文件的大小,以及创建时间,可以说是很详细了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206031716479.png" alt="image-20220603171635363"></p><blockquote><p>-a 选项</p></blockquote><p>-a可以看到该目录下所有的文件,包含隐藏文件,所谓的隐藏文件,就是不想让别人看到的文件,文件名前面带一个&#x3D;&#x3D;.&#x3D;&#x3D;</p><p>在Windows环境下,也存在隐藏文件.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206031745265.gif" alt="隐藏文件1"></p><p>我们来看看该选项的用法</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206031754005.gif" alt="集合"></p><blockquote><p>-a和-l选项可以相互配合使用,不用在乎它们的相互顺序</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206031755855.gif" alt="集合_1"></p><p>一般情况下,我们知道这两个选项已经就够用了,下面还有一些不常用的选项.</p><ul><li>-d 将目录像文件一样显示，而不是显示其下的文件。 如： ls –d 指定目录(绝对地址) </li><li>-i 输出文件的 i 节点的索引信息 </li><li>-k 以 k 字节的形式表示文件的大小 ,配合 -l使用 </li><li>-n 用数字的 UID,GID 代替名称  (UID,GID先不用了解)</li><li>-F 在每个文件名后附上一个字符以说明该文件的类型， “*”表示可执行的普通文件； “&#x2F;”表示目录； “@”表示符号链接； “|”表示FIFOs； “&#x3D;”表示套接字(sockets)。（目录类型识别）</li></ul><blockquote><p>-d</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206032304031.png" alt="image-20220603230444896"></p></blockquote><blockquote><p>-i</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206032310131.png" alt="image-20220603231002075"></p></blockquote><blockquote><p>-k</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206032314562.png" alt="image-20220603231436508"></p></blockquote><blockquote><p>-n</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206032316102.png" alt="image-20220603231618040"></p></blockquote><blockquote><p>-F</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206032322175.png" alt="image-20220603232242070"></p></blockquote><h2 id="和"><a href="#和" class="headerlink" title=". 和 .."></a>. 和 ..</h2><blockquote><p>在我们使用-a选项中都看到了<font color = blue>. 和 ..</font>,那么这两个东西代表的都是什么意思呢?,我们这里先来简单的了解一下,具体如何使用会在下面的cd指令说的.</p></blockquote><ul><li>.      表示 是当前目录</li><li>..     表示是上级目录</li></ul><h1 id="touch-amp-mkdir-指令"><a href="#touch-amp-mkdir-指令" class="headerlink" title="touch &amp; mkdir 指令"></a>touch &amp; mkdir 指令</h1><p>这是两个指令,作用都是为了创建东西,它们相应的选项也是存在的,但是这里我先不和大家分享,只看它们最基本的功能.</p><p>我们看看它们的区别</p><ul><li>touch     创建文本文件,例如.txt文件</li><li>mkdir     创建一个文件夹,类似Windows下的新建文件夹</li></ul><p>我们先来看看它们的现象.</p><h2 id="touch指令"><a href="#touch指令" class="headerlink" title="touch指令"></a>touch指令</h2><p>可以创建文本文件,可以一个,可以多个,创建多个的时候,文件之间隔一个空格就可以了.</p><blockquote><p>touch 文件名+后缀</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206221835847.png" alt="image-20220622183502808"></p></blockquote><blockquote><p>touch 文件名1+后缀 文件名2+后缀</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206221950642.png" alt="image-20220622195007607"></p></blockquote><h3 id="空文件占据硬盘的资源吗"><a href="#空文件占据硬盘的资源吗" class="headerlink" title="空文件占据硬盘的资源吗"></a>空文件占据硬盘的资源吗</h3><p>这是一个常识问题,是占据硬盘资源的,我们在C语言中学过文件指针,它是文件属性之一,这些信息是保存在硬盘当中的,也就是说文件 &#x3D; 文件内容 + 文件属性.</p><h2 id="mkdir-指令"><a href="#mkdir-指令" class="headerlink" title="mkdir 指令"></a>mkdir 指令</h2><p>mkdir是创建文件夹的,我们一看就可以明白了.这个指令和touch一样,也可以一次创建多个文件夹,这种我们先不谈,我们要说说另外一种,创建一段路径</p><blockquote><p>mkdir 文件夹名</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206221955386.png" alt="image-20220622195547354"></p></blockquote><blockquote><p>创建一段路径   带了选项 -p</p><p>mkdir -p le1&#x2F;le2&#x2F;le3    </p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222104450.png" alt="image-20220622210407363"></p></blockquote><hr><h1 id="rmdir-amp-rm-指令"><a href="#rmdir-amp-rm-指令" class="headerlink" title="rmdir &amp; rm  指令"></a>rmdir &amp; rm  指令</h1><p>既然我们已经学了创建指令了,那么删除指令这里我们先提前说了吧.</p><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>rmdir删除的是文件夹我们先来看看效果.</p><blockquote><p>rmdir 文件夹名</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222109219.png" alt="image-20220622210927103"></p></blockquote><p>但是我们有时会遇到这种情况,文件夹里面存在文件,单纯的使用rmdir就不能删除了,所以这个指令我们不常用,下面的rm会解决这个问题的,这才是我们的最爱.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222110585.png" alt="image-20220622211039530"></p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>rm是删除普通文件的,我们这里先来看看它的作用.</p><blockquote><p>rm  文件名+后缀<img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222116895.png" alt="image-20220622211652759"></p></blockquote><h3 id="rm-r"><a href="#rm-r" class="headerlink" title="rm -r"></a>rm -r</h3><p>我们可以通过rm -r来删除存在文件的目录,-r是递归的意思.</p><blockquote><p>rm -r   目录名</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222122683.png" alt="image-20220622212251550"></p></blockquote><h3 id="rm-f"><a href="#rm-f" class="headerlink" title="rm -f"></a>rm -f</h3><p>这个指令大家可能还用不到,这里提前说说,有的文件需要很高的权限,我们删除的时候计算机会问”你确定删除这个文件吗?”,我们这个选项使用后,他就不会出现了,-f 中f是force的意思.我么就不演示了.</p><hr><h1 id="pwd-指令"><a href="#pwd-指令" class="headerlink" title="pwd  指令"></a>pwd  指令</h1><p>pwd  这个指令就只有一个作用,查看当前所在的目录,这个很简单.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206032333674.png" alt="image-20220603233321644"></p><blockquote><p>大家可能发现了,在linux中,路径分割符时&#x3D;&#x3D;&#x2F;&#x3D;&#x3D;,而在Windows中,是&#x3D;&#x3D;\&#x3D;&#x3D;,大家不要记混了.</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222004065.png" alt="image-20220622200454031"></p><h2 id="相对路径-amp-绝对路径"><a href="#相对路径-amp-绝对路径" class="headerlink" title="相对路径&amp;绝对路径"></a>相对路径&amp;绝对路径</h2><p>大家都知道什么是绝对路径,就是我们可以通过他给的线索一定可以找到目标.所谓的相对路径是需要一个参考物的,相对路径也是如此,我们是以当前文件所处的地址为参考对象.</p><p>我们需要谈谈目录,目录是具有唯一性的,在Linux下,它们是由树形结构组成的.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222054573.png" alt="image-20220622205450481"></p><ul><li>相对路径  以当前文件为参考对象</li><li>绝对路经  从根目录出发,pwd查出的就是绝对路径</li></ul><hr><h1 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a>cd指令</h1><p>我们在Windows环境下如何进入文件夹中,又是如何回到上级目录呢?我们可以通过点击鼠标来进行.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206221918259.png" alt="image-20220622191832215"></p><p>但是在Linux中,我们通过cd指令来操作,来看看把.</p><h2 id="使用相对路径"><a href="#使用相对路径" class="headerlink" title="使用相对路径"></a>使用相对路径</h2><p>我们可以cd时用相对路径,这样进入的就是该目录下的文件夹.</p><blockquote><p>cd 文件夹名</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206221958899.png" alt="image-20220622195820852"></p></blockquote><h2 id="使用绝对路径"><a href="#使用绝对路径" class="headerlink" title="使用绝对路径"></a>使用绝对路径</h2><p>我们已经学过了pwd指令了,如果我们想要一次性跳到我们想要的目录下,可以使用绝对路径.我们看看</p><blockquote><p>cd 绝对路径</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222035543.png" alt="image-20220622200912960"></p></blockquote><h2 id="cd-回到上级目录"><a href="#cd-回到上级目录" class="headerlink" title="cd 回到上级目录"></a>cd 回到上级目录</h2><p>我们如何在Linux中回到上级目录呢?前面我们谈到了&#x3D;&#x3D;..&#x3D;&#x3D;表示是上级目录的意思,这样我们可以通过通过下面的指令来进行</p><blockquote><p>cd ..</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222035158.png" alt="image-20220622201206882"></p></blockquote><p>这里有一个问题,如果我们一直回到上级目录,会发生什么情况?我们会看到下面的情况.</p><p>我们会一直停留在一个目录下面,这也是可以理解的,我们在windows中也会出现这种情况,是我们已经到最开始的,目录了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222034030.png" alt="image-20220622203427985"></p><h2 id="cd常见的快捷方式"><a href="#cd常见的快捷方式" class="headerlink" title="cd常见的快捷方式"></a>cd常见的快捷方式</h2><p>我们这里只和大家分享两种快捷方式,一个是直接到家目录,另外一个是回到上次所在的目录.</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd ~"></a>cd ~</h3><blockquote><p>cd ~ 可以让我们直接回到家目录</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222040089.png" alt="image-20220622204019052"></p></blockquote><h3 id="cd-1"><a href="#cd-1" class="headerlink" title="cd -"></a>cd -</h3><blockquote><p>可以回到上次所在的目录</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222043014.png" alt="image-20220622204259970"></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C++/07/"/>
      <url>/2022/06/24/C++/07/</url>
      
        <content type="html"><![CDATA[<p>我们先来看一种请况.</p><p>为啥会报错,我就想让他们比较一下,我有什么错?可编译器却不允许,今天我必须让它给我允许了,这就是赋值运算符重载  为何会出现的原因</p><h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><p>多的不说,我们现在就来看看如何使它变得合理.</p><p>我们来看看这个函数,现在出现了一个问题,我们得不到类的属性,它被封装了,我们先把属性改成public,后面在解决这个问题.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Date d1<span class="token punctuation">,</span> Date d2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在这里 年月日都相等  才是 相等</span>    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>_year <span class="token operator">==</span> d2<span class="token punctuation">.</span>_year        <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_month <span class="token operator">==</span> d2<span class="token punctuation">.</span>_month        <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_day <span class="token operator">==</span> d2<span class="token punctuation">.</span>_day<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里就可以了,我们调用一下这个函数</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date <span class="token function">d2</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们可能会疑惑,我随便取一个函数名就可以把这个函数的功能给写出来,还用弄得这样花里胡哨,但是你写的函数可以被这样调用吗?但是我的就可以.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个就是运算符重载的魅力,现在我需要把这个函数给完善下,传引用,没必要在开辟空间了,用const修饰,避免被不小心修改</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在这里 年月日都相等  才是 相等</span>    <span class="token keyword">return</span> d1<span class="token punctuation">.</span>_year <span class="token operator">==</span> d2<span class="token punctuation">.</span>_year        <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_month <span class="token operator">==</span> d2<span class="token punctuation">.</span>_month        <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_day <span class="token operator">==</span> d2<span class="token punctuation">.</span>_day<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="解决不能得到属性的问题"><a href="#解决不能得到属性的问题" class="headerlink" title="解决不能得到属性的问题"></a>解决不能得到属性的问题</h3><p>这个我给两个解决方法,一个是在类里面写一写get函数,得到属性的值,另一个是…,但是这种方法破坏了封装,不太建议.</p><h2 id="在类里面写运算符重载"><a href="#在类里面写运算符重载" class="headerlink" title="在类里面写运算符重载"></a>在类里面写运算符重载</h2><p>我们还不如直接在类里面写这个函数呢,简单快捷,这样就可以避免破坏封装.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">1900</span><span class="token punctuation">,</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _year <span class="token operator">=</span> year<span class="token punctuation">;</span>        _month <span class="token operator">=</span> month<span class="token punctuation">;</span>        _day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d1<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在这里 年月日都相等  才是 相等</span>        <span class="token keyword">return</span> d1<span class="token punctuation">.</span>_year <span class="token operator">==</span> d2<span class="token punctuation">.</span>_year            <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_month <span class="token operator">==</span> d2<span class="token punctuation">.</span>_month            <span class="token operator">&amp;&amp;</span> d1<span class="token punctuation">.</span>_day <span class="token operator">==</span> d2<span class="token punctuation">.</span>_day<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> _year<span class="token punctuation">;</span>    <span class="token keyword">int</span> _month<span class="token punctuation">;</span>    <span class="token keyword">int</span> _day<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>请问为什么会报这个错误?参数不是很对吗?我们在前面都说过,编译器会默认添加一个this指针类型的参数,而&#x3D;&#x3D;就是两个操作数,所以报参数过多.我们减少一个参数就可以了.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//默认添加一个  this  指针</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在这里 年月日都相等  才是 相等</span>    <span class="token keyword">return</span> _year <span class="token operator">==</span> d<span class="token punctuation">.</span>_year        <span class="token operator">&amp;&amp;</span> _month <span class="token operator">==</span> d<span class="token punctuation">.</span>_month        <span class="token operator">&amp;&amp;</span> _day <span class="token operator">==</span> d<span class="token punctuation">.</span>_day<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这样函数的调用就不变成这样</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Date <span class="token function">d1</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date <span class="token function">d2</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//   d1 == d2 默认  变成   d1.operator==(d2) </span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/09%20Map%E5%92%8Cset/"/>
      <url>/2022/06/24/Java/JavaSE/09%20Map%E5%92%8Cset/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/10%20%E5%8F%8D%E5%B0%84%E6%9E%9A%E4%B8%BE%E5%8F%8ALambda%E7%9A%84%E4%BD%BF%E7%94%A8%20/"/>
      <url>/2022/06/24/Java/JavaSE/10%20%E5%8F%8D%E5%B0%84%E6%9E%9A%E4%B8%BE%E5%8F%8ALambda%E7%9A%84%E4%BD%BF%E7%94%A8%20/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>这个应该就是我们初级数据结构最后的内容了，我学习这个模块经历了大概一百多天，零零散散的学习，主要我同时还学习其他的知识，导致这个模块学的很慢，而且学的还不精，不过没有关系，幸好我有记笔记的习惯，到时候看着笔记多复习几遍，多写代码，我想数据结构的内容并不难，思想是最重要的.</p></blockquote><p>今天我们分享的内容很简单,它和数据结构的关系并不大,在这个模块学习主要是为了我们后面的JavaWed模块做铺垫,我们一起来看看吧.</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C++/C++STL%E4%B9%8Bstring/"/>
      <url>/2022/06/24/C++/C++STL%E4%B9%8Bstring/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C++/12%20%E5%88%9D%E8%AF%86C++%20%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E4%BB%A5%E5%8F%8A%E8%83%8C%E5%90%8E%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2022/06/24/C++/12%20%E5%88%9D%E8%AF%86C++%20%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E4%BB%A5%E5%8F%8A%E8%83%8C%E5%90%8E%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>先说说我的状态吧，五一假期五天假，这些天都在玩，很少学习，我不是后悔，也没必要，本来假期就是为了让自己放松.我唯一要反思看到别人在学,我心里也想学但是却做不到,这是我的缺点,后面我会克服的.尽量快点和大家分享知识.今天和大家分享的是C++关于函数重载的关系,我们不仅仅需要学会重载的使用,更要了解C++为什么支持函数重载.</p><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>我们可能对函数很是熟悉,但是重载又是什么意思呢?我们先来用一个具体的场景来分享.</p><p>一天，张三的老板要你<font color = red>写一个两位数相加的函数</font>,张三心想这不很简单吗?手指一动,结果就出来了,挺简单的嘛.</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p>现在老板看张三的代码立马火了,你是怎么想的,要是我想12,10.9相加呢?你这个就只能两个整型相加,回去修改!!!张三听到老板的话不由得反驳道:这怎么改,总不能再写一个add1,add2…吧.老板听到了张三的嘟囔,生气道,你没有学过函数重载吗?看看下面的代码,回去好好学习学习,基础都不扎实.</p><p>张三看到代码,不由大吃一惊,C++还可以这么写？好神奇啊，我要好好看看书．</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p>我们可不希望张三这种事发生在我们身上，先来看看函数重载的定义</p><blockquote><p>函数重载:是函数的一种特殊情况，C++允许在同一作用域中声明几个功能类似的<font color = red>同名函数</font>，这些同名函数的<br>形参列表(参数个数 或 类型 或 顺序)必须不同，常用来处理实现功能类似数据类型不同的问题 .</p></blockquote><p>可能大家不喜欢看定义,我这里给一个总结.</p><p>函数重载要满足下面的要求.</p><ul><li>函数名相同</li><li>参数的类型,个数,顺序有一个不同就可以了</li><li>返回类型不做要求</li></ul><h1 id="函数重载的原理"><a href="#函数重载的原理" class="headerlink" title="函数重载的原理"></a>函数重载的原理</h1><p>一般情况下,我们知道了函数重载到会应用就可以了,但是对于我们来说需要我们看看他们的原理,为什么C语言不支持重载，C++支持重载?这些都是问题.</p><h1 id="为何C-可以支持重载"><a href="#为何C-可以支持重载" class="headerlink" title="为何C++可以支持重载"></a>为何C++可以支持重载</h1><p>我们先用C++的编译器简单的看看如何执行程序,下面是我在Linux环境下使用g++来完成的,大家要是不太懂,可以先不管,直接理解C++的原理．</p><p>我们先来看看现象,发现C++可以精准的找到需要匹配的函数，这是我们所疑惑的．</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// test.h</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">using</span> std<span class="token operator">::</span>cout<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//test.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token comment" spellcheck="true">//写两个函数   函数形成重载</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lf"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Mian.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205051521291.png" alt="image-20220505152053177"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205051521004.png" alt="image-20220505152115035"> </p><h2 id="程序的编译链接"><a href="#程序的编译链接" class="headerlink" title="程序的编译链接"></a>程序的编译链接</h2><p>关于这一点,我们先简单的说说,之前我们详细的谈过.一个文件变成一个可执行程序需要经过下面4个步骤.</p><ol><li>预处理     宏替换  头文件展开    注释替换   main.cpp -&gt; main.i  test.cpp  -&gt; test.i</li><li>编译         检查语法 ,代码变换成汇编语言   main.i -&gt; main.s  test.i -&gt; test.s</li><li>汇编         汇编语言变成二进制语言,各个文件变成目标文件  main.s -&gt; main.o  test.s -&gt; test.o</li><li>链接         多个目标文件+链接库发生链接</li></ol><blockquote><p>这里我们需要重点谈谈链接,这是我们今天最重要的一部分</p></blockquote><p>链接就仅仅只是目标文件的合并吗?不是的,它要完成的任务很多,其中最重要的就是<font color  = red>找到函数的地址,链接对应上,合并到一起</font></p><p>当我们进行过头文件的展开后,Main.cpp中有func函数的声明和调用.在编译和汇编的过程中存在一个符号表,这个符号表记录了函数的定义以及相应的映射.这是很重要的.符号表里面包含了函数名和函数的地址.</p><p>每一个目标文件(.o)都包含一个符号表和一系列指令,我们看看入和完成函数链接.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205051615427.png" alt="image-20220505161543359"></p><p>现在到mian.o的指令这里了,前面的一些列指令都正常经行,直到它遇到了func这个点,要是看过C语言的汇编语言的朋友们可能对下面的比较熟悉.</p><blockquote><p>到了func这里,编译器开始call (func: ?),编译器不知道func的地址,但是前面头文件的的展开中func函数已经声明了,所以编译器知道了func是一个函数.就先给它一个无效的地址.当程序进行链接时,编译器一看它是一个无效地址,会拿函数名和其他的.o文件里面的符号表去碰,碰到了就填上,找不到就会报连接错误.</p></blockquote><h2 id="C语言为何不支持重载"><a href="#C语言为何不支持重载" class="headerlink" title="C语言为何不支持重载"></a>C语言为何不支持重载</h2><p>到这里就可以明白了,当我们拿函数名去碰的时候,符号表里面存在多个相同的函数名,编译器就不会识别该用哪个.更何况存在相同函数名的.c文件有时都不可能编译过.</p><p>gcc对函数名都不会做任何处理,这也是C语言不支持函数重载的原因.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205051917746.png" alt="image-20220505191719639"></p><h2 id="C-为何可以支持函数重载"><a href="#C-为何可以支持函数重载" class="headerlink" title="C++为何可以支持函数重载"></a>C++为何可以支持函数重载</h2><p>到这里我们就可以得到了结果,既然在链接的时候无效的函数会拿函数名去其他的符号表里面去碰,那么只要我们看看重载的函数名像不像同就可以了,大家可能会有些疑惑,重载的函数名不是相同的吗?是的,但是C++编译器会做一定的处理.这里每个编译器都有自己的函数名修饰规则  这就是C++ 支持重载的原理.</p><p>这就是C++可以支持重载的原因,g++的函数修饰后变成【_Z+函数名长度+函数名+类型首字母1+类型首字母2…】,也是我们只对参数列表做了要求,对返回值不做要求的原因.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205051906819.png" alt="image-20220505190609679"></p><h1 id="C-和C语言相互调用"><a href="#C-和C语言相互调用" class="headerlink" title="C++和C语言相互调用"></a>C++和C语言相互调用</h1><p>我们都知道C++支持C语言的大部分语法,C++和C语言可以相互调用吗?实际上是可以的,在一个大型程序中,有的部门可能使用的是C写的的函数,有的部门可能用的C++,要是他们不能相互使用那就打脸了.</p><h2 id="创建静态库"><a href="#创建静态库" class="headerlink" title="创建静态库"></a>创建静态库</h2><p>我们可以把自己写的代码编译成一个静态库或者动态库,这里我以静态库举例,看看如何在VS中中创建一个静态库.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205051943345.png" alt="image-20220505194336190"></p><h2 id="C-调用C"><a href="#C-调用C" class="headerlink" title="C++调用C"></a>C++调用C</h2><p>我们已经有了一个C语言的静态库,现在有一个C++的项目需要使用这个静态库,我们该如何使用呢?需要分为下面几个步骤</p><p>下面这两张图片都是修改环境的设置,我使用的是VS2013,其他的大概应该差不多,大家依次来修改就可以了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052017609.png" alt="image-20220505201703491"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052018631.png" alt="image-20220505201829485"></p><p>到这里我们就可以调用C语言的静态库了,让我们来看看结果吧.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"../../Heap/Heap/heap.h"</span>  </span><span class="token comment" spellcheck="true">//相对路径</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MyHeap myHeap<span class="token punctuation">;</span>    <span class="token function">InitMyHeap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052021817.png" alt="image-20220505202112711"></p><blockquote><p>这为什么报错?我们不是已经设置好了静态库了吗?实际上这种错误是很容易分析出来的,当C++去调用C语言的函数时,C++会自动修改函数名,当时C语言不会啊,所以他们就不会碰到一起,链接就会出错.</p></blockquote><h3 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h3><p>既然编译器不能自动识别C语言的函数名,我们告诉编译器一下不就可以了吗.extern “C”   就是这种作用.</p><p>有时候在C++工程中可能需要<strong>将某些函数按照</strong> <strong>C</strong> <strong>的风格来编译</strong>，<strong>在函数前加</strong> <strong>extern “C”</strong> <strong>，意思是告诉编译器，<br>将该函数按照</strong> <strong>C</strong> <strong>语言规则来编译</strong>。比如：tcmalloc是google用C++实现的一个项目，他提供tcmallc()和tcfree<br>两个接口来使用，但如果是C项目就没办法使用，那么他就使用extern “C”来解决  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token string">"C"</span>   <span class="token comment" spellcheck="true">// 告知这是C语言的函数声明</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"../../Heap/Heap/heap.h"</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MyHeap myHeap<span class="token punctuation">;</span>    <span class="token function">InitMyHeap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052028185.png" alt="image-20220505202831963"></p><h4 id="extern-“C”-原理"><a href="#extern-“C”-原理" class="headerlink" title="extern “C”   原理"></a>extern “C”   原理</h4><p>我们需要来看看extern “C”   的原理,使用了extern “C” 后,在C++在进行编译的时候函数名字就依据C语言的方法来修改了,不在变成C++ 的规则.extern “C”可以单独修饰函数,也可以修饰一系列函数,使用代码块.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// test.h</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//test.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token comment" spellcheck="true">//写两个函数   函数形成重载</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lf"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Mian.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052113932.png" alt="image-20220505211314864"></p><h2 id="C语言调用C"><a href="#C语言调用C" class="headerlink" title="C语言调用C++"></a>C语言调用C++</h2><p>那么C语言可以调用C++ 的吗?可以了,不过也需要一些段来完成.如何让C语言去识别C++的规则呢?这是我们需要考虑的.</p><p>我们已经把库改成的了C++的静态库了．</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"../../Heap/Heap/heap.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MyHeap myHeap<span class="token punctuation">;</span>    <span class="token function">InitMyHeap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapPush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052044313.png" alt="image-20220505204409151"></p><p>我们无法让C语言的编译器去识别C++ 的函数的命名,那么我们是不是可以在函数一编译的时候就完成函数名依照C语言来说.这就很简单了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052053047.png" alt="image-20220505205316985"></p><p>但是即使是这样,C语言仍旧会报错,原因在于在头文件展开的时候,C语言根本不识别extern “C”,所以我们就需要条件编译了.</p><p>使用条件编译来修改的静态库的方法如下,需要再次编译.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//方法一</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus    </span><span class="token comment" spellcheck="true">// C++独有的</span>    <span class="token macro property">#<span class="token directive keyword">define</span> EXTERNC extern "C"</span><span class="token macro property">#<span class="token directive keyword">else</span> </span>    <span class="token macro property">#<span class="token directive keyword">define</span> EXTERNC</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">InitMyHeap</span><span class="token punctuation">(</span>MyHeap <span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">HeapPush</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">,</span> HPDataType x<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">HeapSize</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">adjustDown</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">adjustUp</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> HPDataType <span class="token function">HeapTop</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>EXTERNC <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">HeapPop</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法 二</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">InitMyHeap</span><span class="token punctuation">(</span>MyHeap <span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">HeapPush</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">,</span> HPDataType x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">bool</span> <span class="token function">IsFull</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">HeapSize</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">adjustDown</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">adjustUp</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> HPDataType <span class="token function">HeapTop</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">HeapPop</span><span class="token punctuation">(</span>MyHeap<span class="token operator">*</span> pHeap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>这样就解决了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052104048.png" alt="image-20220505210448002"></p><blockquote><p>注意,这里有一点需要注意的,当我们C语言调用C++静态库的时候,最起码我们实际需要的的那部分代码在extern “C”修饰的函数中不能发生重载.</p></blockquote><h1 id="C-注意事项"><a href="#C-注意事项" class="headerlink" title="C++ 注意事项"></a>C++ 注意事项</h1><p>这个注意事项主要是依据extern “C”来谈的,有些比较偏僻的内容需要关注下.</p><h2 id="extern-“C”修饰的函数和一个函数完全一样"><a href="#extern-“C”修饰的函数和一个函数完全一样" class="headerlink" title="extern “C”修饰的函数和一个函数完全一样"></a>extern “C”修饰的函数和一个函数完全一样</h2><p>在extern “C”修饰的函数模块外面存在了一个完全一摸一样的的函数,这个编译器不会给通过的.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C : %d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//完全一样</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C : %d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052138935.png" alt="image-20220505213801895"></p><h2 id="extern-“C”修饰的函数和一个函数构成重载"><a href="#extern-“C”修饰的函数和一个函数构成重载" class="headerlink" title="extern “C”修饰的函数和一个函数构成重载"></a>extern “C”修饰的函数和一个函数构成重载</h2><p>在extern “C”修饰的函数模块外面一个函数构成重载这种编译器可以通过的,但是extern “C”修饰的命名方法仍旧还是按照C语言的方式,构成重载的是C++的方式.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C : %d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C++: %lf %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1.11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052140122.png" alt="image-20220505214015081"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205052140552.png" alt="image-20220505214033515"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C++/111%20%E5%88%9D%E8%AF%86C++%20%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2022/06/24/C++/111%20%E5%88%9D%E8%AF%86C++%20%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这是我第一次接触到C++,之前对它的大名可谓是如雷贯耳.这两天有人问我学习C++的感觉怎么样?对此我想说,很难.C++的细节很多,要求我们比学习C语言更加细心,我不是没有学习过OOP语言,但是刚开始接触到还是感觉有点吃力,不过这是一种很令人高兴的情况,这代表你在进步,要是我们在一直学习已经站掌握的知识,又怎么会提高我们呢?我学习C++的方法是通过看网上一些大佬讲解的视频，然后通过一些经典的书籍来补充，后面和大家分享一下博客,做些OJ题.这种方法对我来说还是挺不错的，大家要是没有方法，可以先试试这个,后面可以选择更加适合自己的方法.</p><hr><h1 id="什么是C＋＋"><a href="#什么是C＋＋" class="headerlink" title="什么是Ｃ＋＋"></a>什么是Ｃ＋＋</h1><p>这里我就不和大家分享了，一般我们看每一本书都会谈到C++的历史,我想先和大家来一起学习这门语言,后面到最后专门写一篇博客来专门谈谈历史的一些趣闻趣事,这在我们面试的时候可以和面试官聊聊.</p><p>这里我先提一点,C++可以认为是对C语言一些缺陷的补充，C++编译器支持C语言语言的90%以上,类似函数的命名,scanf,printf都是支持的.</p><h1 id="如何创建一个C-文件"><a href="#如何创建一个C-文件" class="headerlink" title="如何创建一个C++文件"></a>如何创建一个C++文件</h1><p>前面我和大家分享C语言时用的环境大部分都是VS2019,这里用来做C++集成开发环境还是可以的，创建文件的步骤和之前是一样的，就是在最后一步，我们的文件的后缀名是.cpp,这样VS就会调用C++的编译器.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204260952349.png" alt="image-20220426095213165"></p><h1 id="Hello-word"><a href="#Hello-word" class="headerlink" title="Hello word"></a>Hello word</h1><p>我们精通各种语言的Hello word,谈个玩笑.Hello word在我心中有不一样的意义，它敲开了很多人对计算机的大门，在这里我们仍旧打印出这句话，标志着我们正式进入C++，大家对代码要是有什么不理解的话，先不要着急，后面我们会一一解剖。</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main()&#123;    cout << "hello world" << endl;    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261021483.png" alt="image-20220426102141445"></p><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>我们总是看到有人一写代码就把<font color=blue>using namespace std;</font>,这是什么?这是必须的吗?一般的人可能就会谈到记住就可以了,不用管原理,但是对于我们这些要进大厂的人来说,这是很重要的.</p><p>我们先来看一个例子,下面的代码可以跑过吗,为什么不能跑过?</p><blockquote><pre class=" language-c++"><code class="language-c++">void f()&#123;&#125;int f = 0;int main()&#123;    printf("%d", f);    return 0;&#125;</code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261033333.png" alt="image-20220426103328288"></p><blockquote><p>我们可以看出,第一个f表示的是函数名,第二个是一个全部变量,这就给编译器一种误导,这在语法上就是一种错误.在C语言这种错误只能有一种解决方法,函数改名或者是变量改名,这就会造成这样一种情况:</p></blockquote><blockquote><p>函数说:你改名字吧,变量,我这都被调用几百次了.变量反驳到,我这都用了上千次了,你说谁改?这种情况我们该怎么办,在C语言中我们我们只能一个一个修改.但是在C++中我们可以通过一种命名空间的凡是来解决.有人可能会感到纠结,我会这么大意,让它们重名?开玩笑!是的,我们自己当然可以确定自己的的命名不重复,可是大家不要忘了,一个很大的程序是多人协作共同完成的,你可以确定你们几个人甚至几十个人命名不重复,谁都不能保证.</p></blockquote><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>C++解决命名重复就是使用namespace关键字，这是C++新增的一个，通过这个关键字我们可以把自己定义的变量隔离出来，就是想箱子一样,每一个人拥有一个属于自己箱子,用到的时候,自己打开自己的箱子就可以了.我们后面具体在谈，下面先看一个例子.</p><blockquote><p>我们都知道下面的代码会打印出什么结果,局部优先,结果就是0,但是这里我先要得到全局变量a的结果,也就是10,怎么弄?</p></blockquote><pre class=" language-c++"><code class="language-c++">int a = 10;int main()&#123;    int a = 0;    printf("a = %d\n", a);    return 0;&#125;</code></pre><h3 id="域作用限定符"><a href="#域作用限定符" class="headerlink" title="域作用限定符 ::"></a>域作用限定符 ::</h3><p>我们可以通过一个::来解决这个问题,我们可以命名空间就是一个箱子,::可以把箱子打开拿到里面的内容.<font color=blue>箱子:: 箱子里面的东西</font>,当箱子省略时,它回去全局变量区那寻找.这就是我们可以得到10的原因.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261122397.png" alt="image-20220426112249327"></p><h3 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h3><p> 现在我们就可以放开手和大家分享了,前面的铺垫一已经够我们现在继续说下去了,每一个人都可以创建自己的命名空间,这样的话我们几个人之间就可以不担心命名重复了,使用namespace就可以创建了.</p><p>张三和李四都独自创建了自己的命名空间,这样即使后面它的命名出现错误也不会报错</p><pre class=" language-c++"><code class="language-c++">//张三的命名空间namespace N1&#123;    int a;&#125;//李四的命名空间namespace N2&#123;    int a;&#125;int main()&#123;    N1::a = 10;    N2::a = 20;    printf("%d\n", N1::a);    printf("%d\n", N2::a);    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261442709.png" alt="image-20220426144210662"></p><blockquote><p>这里我想谈谈下面几点,这些有助于我们理解命名空间</p></blockquote><p>上面的变命名的变量是全局变量,在我们定义这两个变量后,会在内存中开辟不同的空间.</p><pre class=" language-c++"><code class="language-c++">int main()&#123;    printf("%p\n", &(N1::a));    printf("%p\n", &(N2::a));    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261447236.png" alt="image-20220426144729196"></p><h3 id="命名空间里面可以有什么"><a href="#命名空间里面可以有什么" class="headerlink" title="命名空间里面可以有什么"></a>命名空间里面可以有什么</h3><p>这个问题很好,命名空间里面可以包含三类事物.</p><ol><li>全局变量</li><li>函数</li><li>结构体</li></ol><blockquote><p>前面的全局变量已经和大家分享过了,这里从函数这个比较简单的说起.</p></blockquote><p>和全局变量一样,我们为了防止函数命名重复,也可以把函数放到命名空间里面.</p><pre class=" language-c++"><code class="language-c++">namespace byte&#123;    void func()    &#123;        printf("这是 byte 空间里面呢的函数\n");    &#125;&#125;int main()&#123;    byte::func();    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261515474.png" alt="image-20220426151559393"></p><p>在来谈谈结构体,关于结构,要是很上面说的一样就有点落于俗套了,这个我在命名空间重复嵌套这里谈,会好好说说.</p><h2 id="命名空间的嵌套"><a href="#命名空间的嵌套" class="headerlink" title="命名空间的嵌套"></a>命名空间的嵌套</h2><p>一个大型工程,里面可能还要分为很多组别,例如有数据组的,有测试组的,这样的话,我们希望可以对命名空间进行嵌套,这样就可以避免重复</p><p>下面就是重复嵌套的命名空间</p><pre class=" language-c++"><code class="language-c++">namespace byte&#123;    namespace data    &#123;        int a;    &#125;    namespace test    &#123;        int a;    &#125;&#125;</code></pre><p>这里谈一谈,但我们使用命名空间存储结构体会发什么什么?注意这里的结构体里面存储的是类型,不是变量.当然它可以存储结构体变量.</p><p>下面的的命名空间我们我们可以嵌套几个,里面就可以定义我们的结构体了.</p><pre class=" language-c++"><code class="language-c++">namespace byte&#123;    //数据组    namespace data    &#123;        struct ListNode        &#123;            int val;            struct ListNode* next;        &#125;;    &#125;    //缓存组    namespace cache    &#123;        struct ListNode        &#123;            int val;            struct ListNode* next;        &#125;;    &#125;&#125;</code></pre><h2 id="命名空间名字重复"><a href="#命名空间名字重复" class="headerlink" title="命名空间名字重复"></a>命名空间名字重复</h2><p>当我们定义的命名空间名字重复后,编译器会自动把他整合在一起,也是说名字一样的命名空间可以看作同一个空间.</p><pre class=" language-c++"><code class="language-c++">namespace N1&#123;    int a;    int b;&#125;namespace N1&#123;    int a;    int b;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261614662.png" alt="image-20220426161429560"></p><h2 id="如何使用命名空间里面的元素"><a href="#如何使用命名空间里面的元素" class="headerlink" title="如何使用命名空间里面的元素"></a>如何使用命名空间里面的元素</h2><p>我想使用命名空间里面的元素,有没有办法内?</p><h3 id="使用域作用限定符"><a href="#使用域作用限定符" class="headerlink" title="使用域作用限定符::"></a>使用域作用限定符::</h3><p>前面我们已经谈过域作用限定符::了,刚才的众多例子中也多次使用了这个域作用限定符,这个域作用限定符的作用就像是可以打开箱子一样,拿出里面的元素.这里具体谈谈.</p><pre class=" language-c++"><code class="language-c++">namespace N1&#123;    int a;    int b;&#125;int main()&#123;    N1::a = 1;    N1::b = 2;    printf("%d %d", N1::a, N1::a);    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261538170.png" alt="image-20220426153818056"></p><p>使用域作用限定符<font color=red>::</font>,,我们使用哪个就可以拿出来哪个,这种方法比较谨慎,安全性也比较高,不过有一个缺点就是,有一点麻烦.</p><h3 id="打开全部的元素"><a href="#打开全部的元素" class="headerlink" title="打开全部的元素"></a>打开全部的元素</h3><p>前面谈了有一点麻烦,这里有一个简单的方法,我们可以直接打开命名空间里面的全不元素,大家一看就知道了.</p><blockquote><p>打开命名空间里面的所有元素,直接使用这些就可以了.这样相当于没有定义命名空间.</p></blockquote><pre class=" language-c"><code class="language-c">namespace N1<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>using namespace N1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开 N1 的命名空间</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//直接使用</span>    b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//直接使用</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>一些缺陷在下面谈.</p><h3 id="打开部分元素"><a href="#打开部分元素" class="headerlink" title="打开部分元素"></a>打开部分元素</h3><p>打开全部的元素这种也会带来一部分问题,当我们打开多个命名空间的时候,既有可能会出现命名一样的情况,这里编译器就会报错,这里也有一个折中的方法,用哪个就把它从名宁空间里面拿出来.</p><p>我们打开了变量 a,就可以把他放开了.</p><pre class=" language-c++"><code class="language-c++">namespace N1&#123;    int a;    int b;&#125;using N1::a;    //不用带namespaceint main()&#123;    a = 20;       //直接使用    N1::b = 10;   //不能直接使用    printf("%d %d", a, N1::b);    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261608192.png" alt="image-20220426160840036"></p><p>我们这里来个测试,大家应该可以看懂了.</p><pre class=" language-c++"><code class="language-c++">namespace byte&#123;    int a;    //数据组    namespace data    &#123;        struct ListNode        &#123;            int val;            struct ListNode* next;        &#125;;    &#125;    //缓存组    namespace cache    &#123;        int b;        struct ListNode        &#123;            int val;            struct ListNode* next;        &#125;;    &#125;&#125;using namespace byte;using namespace byte::data;using byte::cache::b;int main()&#123;    //用域作用限定符    byte::a = 10;    struct byte::cache::ListNode n1; //有没有struct都可以    //打开  byte命名空间    a = 10;    struct data::ListNode n2;  //有没有struct都可以    //打开  byte命名空间 和  data    struct ListNode n3;        //使用 cache的的部分元素    b = 20;    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261645515.png" alt="image-20220426164551445"></p><hr><h1 id="解释using-namespace-std"><a href="#解释using-namespace-std" class="headerlink" title="解释using namespace std;"></a>解释using namespace std;</h1><p>现在我们就可以知道了他就是打开名为<font color = red>std</font>命名空间,这句话不是必须的,我们也是这样用.</p><pre class=" language-c++"><code class="language-c++">int main()&#123;    std::cout << "hello word" << std::endl;    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261654671.png" alt="image-20220426165451551"></p><h1 id="C-输入和输出"><a href="#C-输入和输出" class="headerlink" title="C++输入和输出"></a>C++输入和输出</h1><p>我们都知道,C++ 支持C语言的很多语法,这里输入输出可以使用scanf和printf,但是C++也给出了一些其他的方法,而且更加方便,我们先来看看具体如何做.</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main()&#123;    int a = 0;    double d = 0.0f;    cin >> a;    cin >> d;    cout << a;    cout << d;    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261709949.png" alt="image-20220426170956780"></p><blockquote><p>注意：早期标准库将所有功能在全局域中实现，声明在.h后缀的头文件中，使用时只需包含对应头文件<br>即可，后来将其实现在std命名空间下，为了和C头文件区分，也为了正确使用命名空间，规定C++头文<br>件不带.h；旧编译器(vc 6.0)中还支持&lt;iostream.h&gt;格式，后续编译器已不支持，因此<strong>推荐</strong>使用<br><strong><iostream>+std</strong>的方式。  </p></blockquote><blockquote><p>这里我要谈一些东西</p></blockquote><ul><li>在使用pritnf时,我们需要指定数据的格式,但是上面这种方法不需要,编译器会自动识别并匹配.</li><li>cin是标准输入流,从键盘中中输入,cout是输出流,输出到屏幕上</li><li>&gt;&gt;和&lt;&lt;可以理解为方向哎u你,例如 cin&gt;&gt;a,就是数据从键盘上输入到a中.cout&lt;&lt;a就是a输出到屏幕上</li><li>大家疑惑插入操作符&lt;&lt;和左移操作符一样，这实际上是操作符的重载。我们现在不需要了解这么多.</li></ul><blockquote><p>如何进行换行?,上面的结果我很不适应,可以换一个行吗? 可以的</p></blockquote><pre class=" language-c"><code class="language-c">using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> d<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d = "</span> <span class="token operator">&lt;&lt;</span>d <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261718339.png" alt="image-20220426171827283"></p><h1 id="缺省函数"><a href="#缺省函数" class="headerlink" title="缺省函数"></a>缺省函数</h1><p>我们开始疑惑,函数就是函数,什么叫<font color = red>缺省函数</font>.不知道大家知不知道<strong>备胎</strong>,就是有事的时候找你来帮忙,没事的时候就吊着你.缺省函数也是如此,我们先来看看.</p><blockquote><p>这里的func就是一个缺省函数,如果我们不传入参数,a就会赋值10,就是那个备胎,传入了,就可以把备胎给扔掉了.</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a == %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261742641.png" alt="image-20220426174251594"></p><h2 id="缺省函数的应用"><a href="#缺省函数的应用" class="headerlink" title="缺省函数的应用"></a>缺省函数的应用</h2><p>这里我给出一个应用,我们在之前分享数据结构的时候,经常会出现初始化的情况,这里我先义队列为例子</p><blockquote><p>这样我们初始化时就不需要给函数传入多少个空间,一当完成初始化就会有4个数据的空间,第一次插入的时候就不需要扩容了.</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Queue<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> elem<span class="token punctuation">;</span>    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> Queue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QueueInit</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>cap <span class="token operator">=</span> cap<span class="token punctuation">;</span>    ps<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Queue qu<span class="token punctuation">;</span>    <span class="token function">QueueInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="多参数的缺省函数"><a href="#多参数的缺省函数" class="headerlink" title="多参数的缺省函数"></a>多参数的缺省函数</h2><p>只有一个函数的缺省函数可能体现不出来特性,下面我们使用三个参数的.</p><h3 id="全部缺省"><a href="#全部缺省" class="headerlink" title="全部缺省"></a>全部缺省</h3><pre class=" language-c++"><code class="language-c++">using namespace std;void func(int a = 1, int b = 2, int c = 3)&#123;    cout << "a = " << a << endl;    cout << "b = " << b << endl;    cout << "c = " << c << endl;&#125;int main()&#123;    func();    cout << endl;    func(111);    cout << endl;    func(111,222);    cout << endl;    func(111,222,333);    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261758996.png" alt="image-20220426175856935"></p><h3 id="部分缺省"><a href="#部分缺省" class="headerlink" title="部分缺省"></a>部分缺省</h3><p>对于多参数的函数而言,我们可以缺省一部分的参数,不过参数缺省还需要一定的要求.</p><blockquote><p>半缺省参数必须<strong>从右往左依次</strong>来给出，不能间隔着给  </p></blockquote><pre class=" language-c++"><code class="language-c++">void func(int a,int b = 2, int c = 3)&#123;    cout << "a = " << a << endl;    cout << "b = " << b << endl;    cout << "c = " << c << endl;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261802636.png" alt="image-20220426180234587"></p><h2 id="缺省函数的注意事项"><a href="#缺省函数的注意事项" class="headerlink" title="缺省函数的注意事项"></a>缺省函数的注意事项</h2><p>我们来看看这些注意事项</p><ul><li>半缺省参数必须<strong>从右往左依次</strong>来给出，不能间隔着给  </li><li>缺省参数不能在函数声明和定义中同时出现  </li><li>缺省值必须是常量或者全局变量</li></ul><p>第一个我们已经谈过了,这里主要谈第二条,我么缺省函数在声明的时候如何声明</p><pre class=" language-c++"><code class="language-c++">void func(int a = 30);void func(int a = 30) &#123;    cout << a << endl;&#125;int main()&#123;    func();    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261817201.png" alt="image-20220426181709140"></p><p>当函数声明遇到函数声明和函数实现的时候,编译器不到使用哪个缺省值,即使有时他们是相同的.这样就会报错.这里我来谈谈</p><h3 id="声明给-定义不给"><a href="#声明给-定义不给" class="headerlink" title="声明给,定义不给"></a>声明给,定义不给</h3><p>我是使用的三个文件来演示的,</p><pre class=" language-c++"><code class="language-c++">//Test.h文件中#include <iostream>using namespace std;void func(int a = 20);//test.cpp中void func(int a)&#123;    cout << a << endl;&#125;//mian.cpp中#include "Test.h"int main()&#123;    func();    func(11);    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261844515.png" alt="image-20220426184451441"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261846448.png" alt="image-20220426184644402"></p><h3 id="声明不给-定义给"><a href="#声明不给-定义给" class="headerlink" title="声明不给,定义给"></a>声明不给,定义给</h3><p>这种请情况会报错.</p><pre class=" language-c++"><code class="language-c++">//Test.h文件中#include <iostream>using namespace std;void func(int a);//test.cpp中void func(int a = 20)&#123;    cout << a << endl;&#125;//mian.cpp中#include "Test.h"int main()&#123;    func();    func(11);    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261839893.png" alt="image-20220426183959825"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204261843672.png" alt="image-20220426184328625"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/05%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%886%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/05%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>今天主要说的是关于结构体、枚举和联合体的知识点，可能有些枯燥，不过很重要，我尽量说的详细一点</p></blockquote><h1 id="结构体关键字-struct"><a href="#结构体关键字-struct" class="headerlink" title="结构体关键字 struct"></a>结构体关键字 struct</h1><blockquote><p>struct 是声明结构体类型的的关键字，我们在学链表是要经常用到的，所以我分为两个层次来说</p></blockquote><h2 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h2><blockquote><p>这里我们就需要知道怎么定义结构体以及结构体如何格式化输入输出就行</p></blockquote><h3 id="定义一个结构体"><a href="#定义一个结构体" class="headerlink" title="定义一个结构体"></a>定义一个结构体</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Peo<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Peo peo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"zhansan"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>其中peo是一个局部变量，其类型是struct Peo， 这个struct Peo类型就像是我们的之前的int、char一样。<br>{ “zhansan”,18 }是对peo的初始化，</p></blockquote><blockquote><p>当然，我们也可以这么写</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Peo<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> s<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//s是一个权据变量</span></code></pre><h3 id="格式化输出结构体"><a href="#格式化输出结构体" class="headerlink" title="格式化输出结构体"></a>格式化输出结构体</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> Peo<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Peo peo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"zhansan"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> peo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/53fb3ec35515470292e04d76065c27e6.png" alt="在这里插入图片描述"></p><h3 id="格式化输入结构体"><a href="#格式化输入结构体" class="headerlink" title="格式化输入结构体"></a>格式化输入结构体</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> Peo<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Peo peo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"zhansan"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> peo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d"</span><span class="token punctuation">,</span> peo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> peo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/c9c738fbf4d248138f7c28918e203d44.png" alt="在这里插入图片描述"></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> Peo<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> s<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Peo<span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ps<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Peo peo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"zhansan"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>peo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>对于结构体指针来说，要是要访问结构体里面的内容，我们使用’ <strong>-&gt;</strong> ‘来代替’ <strong>.</strong> ‘</p></blockquote><h3 id="结构体的大小"><a href="#结构体的大小" class="headerlink" title="结构体的大小"></a>结构体的大小</h3><blockquote><p>我们都知道，int是4个字节的大小，那么结构体呢？是不是里面字节大小的的和？，这里我就先简略的说一下，详细的可以看下</p></blockquote><h4 id="默认对齐数"><a href="#默认对齐数" class="headerlink" title="默认对齐数"></a>默认对齐数</h4><blockquote><p>这里就提一下，它是一个数值，至于作用后面用到的时候说，VS2019的默认对齐数是8</p></blockquote><h4 id="计算规则"><a href="#计算规则" class="headerlink" title="计算规则"></a>计算规则</h4><blockquote><p>我先说一下，后面一一解释</p></blockquote><ol><li>第一个成员在与结构体变量偏移量为0的地址处。</li><li>其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。<br>对齐数 &#x3D; 编译器默认的一个对齐数 与 该成员大小的较小值。</li><li>结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍。</li><li>如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</li></ol><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p>计算下面结构体的大小</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> S1<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/9bc775eacc4b48088c098a63a3649b8d.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e5551799e50646b98fb1b046db2b8412.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4508b79a050f404a9a36a781febadfcf.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0b031aa4f7a478d826872bc6b7292b2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d8cd7b7f0bcf466783e04cd2e5ca7736.png" alt="在这里插入图片描述"></p><blockquote><p>验证一下</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d8560896728c4c3fa37ea0b0d4b5739a.png" alt="在这里插入图片描述"></p><h4 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h4><p>结构体里面嵌套另一个结构体</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> S1<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> S2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">struct</span> S1 s<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/9e739d3bb3454a7a8e6f505b96d8484a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9d1617cf36dc4d1080944751c74a4505.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f06f99a5b5b8475a997b175f8bace4f6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/12a93bd19a424a32869616c62c508f81.png" alt="在这里插入图片描述"></p><blockquote><p>验证一下</p></blockquote><p><img src="https://img-blog.csdnimg.cn/0f46e9d358614f1c9da668ed118bbdec.png" alt="在这里插入图片描述"></p><h1 id="枚举关键字-eunm"><a href="#枚举关键字-eunm" class="headerlink" title="枚举关键字 eunm"></a>枚举关键字 eunm</h1><blockquote><p>枚举就是一一列举的意思  </p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> Color<span class="token comment" spellcheck="true">//颜色</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RED<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//0</span>    GREEN<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//1</span>    BLUE        <span class="token comment" spellcheck="true">//2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><blockquote><p>enum Color是一种数据类型  ，编译器会自动成员从0开始从上到下依次+1</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> Color<span class="token comment" spellcheck="true">//颜色</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RED<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//0</span>    GREEN<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//1</span>    BLUE        <span class="token comment" spellcheck="true">//2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> Color red <span class="token operator">=</span> RED<span class="token punctuation">;</span>    <span class="token keyword">enum</span> Color green <span class="token operator">=</span> GREEN<span class="token punctuation">;</span>    <span class="token keyword">enum</span> Color blue <span class="token operator">=</span> BLUE<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/30a7e9dc0cb34ad894cd3a113fc2a637.png" alt="在这里插入图片描述"></p><h2 id="枚举的大小"><a href="#枚举的大小" class="headerlink" title="枚举的大小"></a>枚举的大小</h2><blockquote><p>大小是4个字节</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> Color<span class="token comment" spellcheck="true">//颜色</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RED <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>            GREEN <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>          BLUE        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">enum</span> Color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/e6d8bb740fb749679b1ef69dc2e9ff8c.png" alt="在这里插入图片描述"></p><h2 id="枚举的作用"><a href="#枚举的作用" class="headerlink" title="枚举的作用"></a>枚举的作用</h2><blockquote><p>很难说清楚，可以放在switch语句中</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> Calc<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    EXIT<span class="token punctuation">,</span>    ADD<span class="token punctuation">,</span>    DEL<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"****  1.ADD   2 DEL   ****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"****     0.EXIT       ****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择:>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加法函数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DEL<span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"减法函数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> EXIT<span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/f613997ec33f4da0b56a289d9cda511e.png" alt="在这里插入图片描述"></p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><blockquote><p>下面的代码会打印出啥</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> Color<span class="token comment" spellcheck="true">//颜色</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RED <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>            GREEN <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>          BLUE        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> Color red <span class="token operator">=</span> RED<span class="token punctuation">;</span>    <span class="token keyword">enum</span> Color green <span class="token operator">=</span> GREEN<span class="token punctuation">;</span>    <span class="token keyword">enum</span> Color blue <span class="token operator">=</span> BLUE<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/053a6d7de2364b488293984d39a726a7.png" alt="在这里插入图片描述"></p><h1 id="联合体（共生体）关键字-union"><a href="#联合体（共生体）关键字-union" class="headerlink" title="联合体（共生体）关键字 union"></a>联合体（共生体）关键字 union</h1><blockquote><p>联合体就是几个成员共用最大的的那个成员的空间，大小自然是最大成员的大小</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> U<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> u<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/8c28adfe4f6540e7b6aef279d5cfce21.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9bc816b1325e415a9d07f47d0617a7f3.png" alt="在这里插入图片描述"></p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>联合体的成员同一时间只能使用一个</li><li>改变其中一个成员的值都会改变其他的</li></ul><h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> U<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> u<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    u<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#x"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/3fa2ea5d76fd48168ddec44c55d50ed4.png" alt="在这里插入图片描述"></p><h1 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h1><blockquote><p>在C语言中，位段的声明和结构（struct）类似，但它的成员是一个或多个位的字段，这些不同长度的字段实际储存在一个或多个整型变量中。在声明时，位段成员必须是整形或枚举类型（通常是无符号类型），且在成员名的后面是一个冒号和一个整数，整数规定了成员所占用的位数。位域不能是静态类型。不能使用&amp;对位域做取地址运算，因此不存在位域的指针，编译器通常不支持位域的引用（reference）。 —来源“维基百科”</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> A<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1 代表_a占据一个bit位</span>    <span class="token keyword">int</span> _b <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _c <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="位段的优点"><a href="#位段的优点" class="headerlink" title="位段的优点"></a>位段的优点</h2><ul><li>可以使数据单元节省储存空间</li><li>位段可以很方便的访问一个整数值的部分内容从而可以简化程序源代码</li></ul><blockquote><p>可以想一下，一个人的年龄不可能超过100岁，我们将它存储再int或者short类型时都会有空间的浪费，位段的出现就很好的缓解这一问题，记住是 缓解 而不是一定完全不浪费</p></blockquote><h2 id="位段的缺点"><a href="#位段的缺点" class="headerlink" title="位段的缺点"></a>位段的缺点</h2><ul><li>其内存分配与内存对齐的实现方式依赖于具体的机器和系统，在不同的平台可能有不同的结果，这导致了位段在本质上是不可移植的</li><li>位段成员必须是整形或枚举类型（通常是无符号类型），且在成员名的后面是一个冒号和一个整数</li><li>位段中int不能确定是否是有符号还是无符号的</li></ul><h2 id="位段的大小"><a href="#位段的大小" class="headerlink" title="位段的大小"></a>位段的大小</h2><blockquote><p>我们位段开辟的空间一次是4个字节或者是1个字节，下面的两个方式都是对的，不同的编译器选择的方式不同</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> S<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h3 id="方式一-–-浪费"><a href="#方式一-–-浪费" class="headerlink" title="方式一 – 浪费"></a>方式一 – 浪费</h3><blockquote><p>总共3个字节</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718183.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718191.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718196.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718189.png" alt="img"></p><h3 id="方式二-–-不浪费"><a href="#方式二-–-不浪费" class="headerlink" title="方式二 – 不浪费"></a>方式二 – 不浪费</h3><blockquote><p>总共2字节</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718174.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718202.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718768.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718770.png" alt="img"></p><blockquote><p>这里VS2019 选择的是方式一</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> S<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718763.png" alt="img"></p><h2 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h2><blockquote><p>首先数据存储的方式也是不确定的，基于VS2019，我就说一种方式</p></blockquote><pre><code>#include&lt;stdio.h&gt;struct S&#123;    char a: 3;    char b: 4;    char c: 5;    char d: 4;    &#125;;int main()&#123;    struct S s = &#123; 0 &#125;;    s.a = 10;    s.b = 12;    s.c = 3;    s.d = 4;    return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718782.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718806.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718792.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718346.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718358.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718351.png" alt="img"></p><blockquote><p>验证一下</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281718374.png" alt="img"></p><h2 id="位段的应用"><a href="#位段的应用" class="headerlink" title="位段的应用"></a>位段的应用</h2><blockquote><p>假如我们在网上发了一个“呵呵”，但在“呵呵”之前有很多限定 ，这些限定可能有些要求几个bit位，例如4bit，即使我们使用char也会浪费，这就有位段的用武之地了</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7%E8%AF%A6%E8%A7%A3%EF%BC%881%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7%E8%AF%A6%E8%A7%A3%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>  这个模块临近C语言的边界，学起来需要一定的时间，不过当我们知道这些知识，在C语言函数这块我们看到的不仅仅是表象了，可以真正了解函数是怎么调用的。不过我的能力有限，下面的的知识若是不当，还请各位斧正。</p><h2 id="知识点储备"><a href="#知识点储备" class="headerlink" title="知识点储备"></a>知识点储备</h2><ul><li>初步了解函数（ 这里的所说的函数我们默认为自定义函数）</li><li>了解C程序地址空间</li><li>基本的寄存器</li><li>知道一些汇编语言</li></ul><h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><p> 函数大家应该都很熟悉了，这里就不细说了。<br> 我们看看就行</p><pre class=" language-c"><code class="language-c">ret_type <span class="token function">fun_name</span><span class="token punctuation">(</span>para1<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    statement<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//语句项</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ret_type  返回类型fun_name  函数名para1     函数参数  </code></pre><h2 id="C程序地址空间（重点记忆）"><a href="#C程序地址空间（重点记忆）" class="headerlink" title="C程序地址空间（重点记忆）"></a>C程序地址空间（重点记忆）</h2><p> 我们一直说 ：“全局变量的生命周期是所在的整个程序”、“static修饰的变量的生命周期变长了”、以及“最重要的临时变量出函数就要被销毁”。不过我们要知道这是因为什么。<br>在C语言中我们所创建的每一个变量都会有自己空间的的存储类别，就比如汽车一般不会停在高楼那样，每一个事物都会有自己的集合。</p><p><img src="https://img-blog.csdnimg.cn/f18657f31d4249e0ac7e884421b7e5b7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>看一下代码，来验证一下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>                                                                             </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> g_val1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_val2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_val3<span class="token punctuation">;</span><span class="token keyword">int</span> g_val4<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"code: %p\n"</span><span class="token punctuation">,</span> main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read only : %p\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"init g_val1 : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_val1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"init g_val2 : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uninit g_val2 : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_val3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uninit g_val2 : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_val4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap addr : %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap addr : %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack addr : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/5a109ab128da401db4900f72ba437d1d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>可以看出局部变量存储在栈上且栈空间是沿着向低地址方向开辟的</strong></p><h2 id="相关的-寄存器"><a href="#相关的-寄存器" class="headerlink" title="相关的 寄存器"></a>相关的 寄存器</h2><p>函数的调用与CPU中的寄存器有很大关系，下面有一些基本知识</p><ul><li>eax：通用寄存器，保留临时数据，常用于返回值</li><li>ebx：通用寄存器，保留临时数据</li><li>ebp：栈底寄存器</li><li>esp：栈顶寄存器</li><li>eip：指令寄存器，保存当前指令的下一条指令的地址，衡量走到了那一步</li></ul><h2 id="相关的-汇编语言"><a href="#相关的-汇编语言" class="headerlink" title="相关的 汇编语言"></a>相关的 汇编语言</h2><ul><li>mov：数据转移指令</li><li>push：数据入栈，同时esp栈顶寄存器也要发生改变</li><li>pop：数据弹出至指定位置，同时esp栈顶寄存器也要发生改变</li><li>sub：减法命令</li><li>add：加法命令</li><li>call：函数调用，1. 压入返回地址 2. 转入目标函数</li><li>jump：通过修改eip，转入目标函数，进行调用</li><li>ret：恢复返回地址，压入eip，类似pop eip命令</li></ul><p>看了这么多知识，我们一定会感到很是枯燥，觉得这和函数栈帧一点关系都没有，不要着急，下面就开始我们正式的内容。</p><h2 id="函数栈帧"><a href="#函数栈帧" class="headerlink" title="函数栈帧"></a>函数栈帧</h2><p>这里为了便于理解，我们这么看栈的空间，我们就多画些图片<br><img src="https://img-blog.csdnimg.cn/ac680009e16a4ebcaae066beacdbe1bc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们知道 main函数也是一个函数，它也是能够被调用，所以main函数也会形成栈帧。<br><img src="https://img-blog.csdnimg.cn/e1b94eebab8e4917b825923817b02029.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>样例代码</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0xB</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        z <span class="token operator">=</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = %d\n"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>转到反汇编，打开寄存器<br><img src="https://img-blog.csdnimg.cn/a75359ceaded4409b10a21f02f88b964.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我将汇编代码复制下来，我们一步一步分析这些东西</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">00821E40</span>  push        ebp  <span class="token number">00821E41</span>  mov         ebp<span class="token punctuation">,</span>esp  <span class="token number">00821E43</span>  sub         esp<span class="token punctuation">,</span>0E4h  <span class="token number">00821E49</span>  push        ebx  00821E4A  push        esi  00821E4B  push        edi  00821E4C  lea         edi<span class="token punctuation">,</span><span class="token punctuation">[</span>ebp<span class="token operator">-</span>24h<span class="token punctuation">]</span>  <span class="token number">00821E4F</span>  mov         ecx<span class="token punctuation">,</span><span class="token number">9</span>  <span class="token number">00821E54</span>  mov         eax<span class="token punctuation">,</span>0CCCCCCCCh  <span class="token number">00821E59</span>  rep stos    dword ptr es<span class="token punctuation">:</span><span class="token punctuation">[</span>edi<span class="token punctuation">]</span>  00821E5B  mov         ecx<span class="token punctuation">,</span>82C003h  <span class="token number">00821E60</span>  call        0082130C      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span><span class="token number">00821E65</span>  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>0Ah      <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0xB</span><span class="token punctuation">;</span>00821E6C  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>14h<span class="token punctuation">]</span><span class="token punctuation">,</span>0Bh      <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">00821E73</span>  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>20h<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>      z <span class="token operator">=</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>00821E7A  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>14h<span class="token punctuation">]</span>  00821E7D  push        eax  00821E7E  mov         ecx<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span>  <span class="token number">00821E81</span>  push        ecx  <span class="token number">00821E82</span>  call        <span class="token number">008211E5</span>  <span class="token number">00821E87</span>  add         esp<span class="token punctuation">,</span><span class="token number">8</span>  00821E8A  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>20h<span class="token punctuation">]</span><span class="token punctuation">,</span>eax      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = %d\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>00821E8D  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>20h<span class="token punctuation">]</span>  <span class="token number">00821E90</span>  push        eax  <span class="token number">00821E91</span>  push        827BCCh  <span class="token number">00821E96</span>  call        008213A2  00821E9B  add         esp<span class="token punctuation">,</span><span class="token number">8</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>00821E9E  xor         eax<span class="token punctuation">,</span>eax  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>00821EA0  pop         edi  00821EA1  pop         esi  00821EA2  pop         ebx  00821EA3  add         esp<span class="token punctuation">,</span>0E4h  00821EA9  cmp         ebp<span class="token punctuation">,</span>esp  00821EAB  call        <span class="token number">00821235</span>  00821EB0  mov         esp<span class="token punctuation">,</span>ebp  00821EB2  pop         ebp  00821EB3  ret  </code></pre><ul><li>ebp指向栈底</li><li>esp指向栈顶</li><li>eip指向下一个即将执行的地址   还未执行</li></ul><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span><span class="token number">01011E65</span>  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>0Ah                       <span class="token comment" spellcheck="true">//在ebp-8处在开辟一个空间，将x的值放进去</span></code></pre><p><img src="https://img-blog.csdnimg.cn/e579954871a348bfb9c7243ecc3b7d9a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0xB</span><span class="token punctuation">;</span>    01011E6C  mov      dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>14h<span class="token punctuation">]</span><span class="token punctuation">,</span>0Bh                         <span class="token comment" spellcheck="true">//在ebp-14处在开辟一个空间，将y的值放进去</span></code></pre><p><img src="https://img-blog.csdnimg.cn/ca98205254874588ac9c706e8f29bba4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c">        <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">00821E73</span>  mov   dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>20h<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>                         <span class="token comment" spellcheck="true">//在ebp-20处在开辟一个空间，将z的值放进去 </span></code></pre><p> <img src="https://img-blog.csdnimg.cn/2c82bc7ef2004c998cab802a73075c35.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>可以看出，x、y、z 的空间是不连续的 ，这是VS保护机制， 防止一些程序员猜测对应的地址。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><pre class=" language-c"><code class="language-c">00821E7A  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>14h<span class="token punctuation">]</span>  </code></pre><p>把ebp-14（也就是y） 赋值给eax </p><p>eax是一个临时的寄存器，保留临时数据，常用于返回值<br><img src="https://img-blog.csdnimg.cn/52464f34d3b44e2ebdacd39d4218aab5.png" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c">00821E7D  push        eax  </code></pre><p>push命令将eax的值放入栈中，同时栈顶的位置发生变化，变化的大小是4个字节，因为y是int型<br><img src="https://img-blog.csdnimg.cn/7945b1fcebb24e069b50cf0c0cbd7621.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>push之后的栈顶<br><img src="https://img-blog.csdnimg.cn/541e3a41984f4641aacec933bdd4161c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4a04b69634e842a7a6851ca567e71b8b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c">00821E7E  mov         ecx<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span>  </code></pre><p>把ebp-8（也就是x） 赋值给ecx<br><img src="https://img-blog.csdnimg.cn/7dbeed93d6344f5c97db9d5ac4f547c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c"><span class="token number">00821E81</span>  push        ecx  </code></pre><p>和上面的一样，将ecx的值压入栈内，栈顶的位置发生变化<br><img src="https://img-blog.csdnimg.cn/14a0acdbb6234c6fae53e03deba65e9a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li>临时变量的形成（实参的临时拷贝）在函数调前就完成了</li><li>形参实例化的顺序是从右向左依次形成的</li><li>形参的空间是紧邻的</li></ul><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>这里先说一下call命令的作用</p><ul><li>压入返回地址   （最重要的）</li><li>转入目标函数<br> 压入返回地址  ，压入谁？为什么要压入？<br>  <strong>压入谁？</strong>            压入的是下一条命令的地址<br>  <strong>为什么要压入</strong>？根本原因是函数调用完毕，可能就需要返回</li></ul><pre class=" language-c"><code class="language-c"><span class="token number">00821E82</span>  call        <span class="token number">008211E5</span></code></pre><p><img src="https://img-blog.csdnimg.cn/f61e1e7cc454405db9cbc909c19eb359.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fc6b784f1dce4c319bde122233990815.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>jump命令 通过修改eip，转入目标函数，进行调用</p><p><strong>jmp前</strong></p><p><img src="https://img-blog.csdnimg.cn/f32e0a10421e439ea9eb2859dfb5197d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="jmp前"><br><strong>jmp后</strong><br><img src="https://img-blog.csdnimg.cn/ece438d548a7426c82e0428be1a7cd3a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>现在我们总算进入了MyAdd（）函数了，<br>画一下我们的栈帧图<br><img src="https://img-blog.csdnimg.cn/c2cc418155d14facb85fb7100921d0c2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> 由于篇幅有限，我们先说到这里，下一篇接着说MyAdd（）函数内部的事情。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7%E8%AF%A6%E8%A7%A3%EF%BC%882%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7%E8%AF%A6%E8%A7%A3%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>今天说的承接<a href="https://blog.csdn.net/m0_61334618/article/details/121162110?utm_source=app&app_version=4.14.0&code=app_1562916241&uLinkId=usr1mkqgl919blen">函数栈帧详解（1）</a>，具体谈谈MyAdd（）函数内部的事情。</p><h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0xB</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    z <span class="token operator">=</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = %d\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>今天的汇编语言</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MyAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>001E2EC0  push        ebp  001E2EC1  mov         ebp<span class="token punctuation">,</span>esp  001E2EC3  sub         esp<span class="token punctuation">,</span>0CCh  001E2EC9  push        ebx  001E2ECA  push        esi  001E2ECB  push        edi  001E2ECC  lea         edi<span class="token punctuation">,</span><span class="token punctuation">[</span>ebp<span class="token operator">-</span>0Ch<span class="token punctuation">]</span>  001E2ECF  mov         ecx<span class="token punctuation">,</span><span class="token number">3</span>  001E2ED4  mov         eax<span class="token punctuation">,</span>0CCCCCCCCh  001E2ED9  rep stos    dword ptr es<span class="token punctuation">:</span><span class="token punctuation">[</span>edi<span class="token punctuation">]</span>  001E2EDB  mov         ecx<span class="token punctuation">,</span>1EC003h  001E2EE0  call        001E130C      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>001E2EE5  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>      c <span class="token operator">=</span>a <span class="token operator">+</span> b<span class="token punctuation">;</span>001E2EEC  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>  001E2EEF  add         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">+</span>0Ch<span class="token punctuation">]</span>  001E2EF2  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax      <span class="token keyword">return</span> c<span class="token punctuation">;</span>001E2EF5  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>001E2EF8  pop         edi  001E2EF9  pop         esi  001E2EFA  pop         ebx  001E2EFB  add         esp<span class="token punctuation">,</span>0CCh  001E2F01  cmp         ebp<span class="token punctuation">,</span>esp  001E2F03  call        <span class="token number">001E1235</span>  001E2F08  mov         esp<span class="token punctuation">,</span>ebp  001E2F0A  pop         ebp  001E2F0B  ret </code></pre><p><strong>我们的栈帧图</strong><br><img src="https://img-blog.csdnimg.cn/2f668887ca7a452f90c7af12aa3f1605.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="MyAdd函数栈帧的形成"><a href="#MyAdd函数栈帧的形成" class="headerlink" title="MyAdd函数栈帧的形成"></a>MyAdd函数栈帧的形成</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><pre class=" language-c"><code class="language-c"><span class="token number">00821740</span>  push        ebp  </code></pre><p>这条命令是将ebp（也就是栈底）的内容压入栈中，同时栈顶也发生变化<br><img src="https://img-blog.csdnimg.cn/835daf8dc7484bc08abbbec59ede860e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3b6ee930bfdb498e9ae028ec701a8813.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>mov：数据转移指令</p><pre class=" language-c"><code class="language-c"><span class="token number">00821741</span>  mov         ebp<span class="token punctuation">,</span>esp </code></pre><p>该命令的意思是将esp的内容覆盖到ebp中</p><ul><li>esp的内容直接将ebp的内容给覆盖</li><li>该过程没有通过内存，直接通过CPU</li><li><img src="https://img-blog.csdnimg.cn/d9a7b32c4a044d68b99ebe4094b293dd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul><p><img src="https://img-blog.csdnimg.cn/e004ba8d622b4ae8b53bd172dfcb22cb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> 那么我们可能会发出疑惑，那栈底怎么办，是不是找不回来了？实际上不是的，上一步我们不是把栈底的内容给保存了吗！！！</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>sub：减法命令</p><pre class=" language-c"><code class="language-c"><span class="token number">00821743</span>  sub         esp<span class="token punctuation">,</span>0CCh                      <span class="token comment" spellcheck="true">//0CCh 的大小和你定义的函数的规模有关</span></code></pre><p>该命令的意思是esp减去一定的值，结果放在esp中<br><img src="https://img-blog.csdnimg.cn/5b7a6f9ee30d40c3b877adcf55c6ef45.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>到这里我们已近形成了MyAdd（）的栈帧了</strong></p><p><img src="https://img-blog.csdnimg.cn/e92ad3a3ab7649408439ad50072c0195.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>001E2EE5  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>                        <span class="token comment" spellcheck="true">//在ebp-8处在开辟一个空间，将c的值放进去</span></code></pre><p>这和main的变量开辟一样<br><img src="https://img-blog.csdnimg.cn/adadb40bc44f4abf82227fd9cfb6fe18.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><pre class=" language-c"><code class="language-c">c <span class="token operator">=</span>a <span class="token operator">+</span> b<span class="token punctuation">;</span>001E2EEC  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>  001E2EEF  add         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">+</span>0Ch<span class="token punctuation">]</span>  001E2EF2  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax </code></pre><p><strong>一条一条分析</strong></p><pre class=" language-c"><code class="language-c">001E2EEC  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>  </code></pre><p>把ebp+8放在eax中<br>那么ebp+8是多少呢？答案就是我们的x值的拷贝<br><img src="https://img-blog.csdnimg.cn/bf6488def7134c64830743c6e9d430ac.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/60ae58587c0445f0981dd907dec3ed23.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>同理</p><pre class=" language-c"><code class="language-c">001E2EEF  add         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">+</span>0Ch<span class="token punctuation">]</span> </code></pre><p>这个命令是将ebp+0Ch的内容和eax加起来放到 eax中<br>ebp+0Ch就是y值的拷贝<br><img src="https://img-blog.csdnimg.cn/26542167251348f48a87d6d652d59dcc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/b68403fcbf2f411fb0e7273fcb98f4a0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c">001E2EF2  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax </code></pre><p>这条命令是将eax写入到ebp-8，也就是c中<br><img src="https://img-blog.csdnimg.cn/4f113e57f4604358b8049241d5b8774e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/96ed11528e064ebd844e06c4b0a82cd0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="准备返回"><a href="#准备返回" class="headerlink" title="准备返回"></a>准备返回</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><pre class=" language-c"><code class="language-c">001E2EF5  mov         eax<span class="token punctuation">,</span>dword ptr <span class="token punctuation">[</span>ebp<span class="token number">-8</span><span class="token punctuation">]</span>  </code></pre><p>保存返回值<br><img src="https://img-blog.csdnimg.cn/49c8c300a11b452eb878b0a77fcd6481.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><pre class=" language-c"><code class="language-c">001E2F08  mov         esp<span class="token punctuation">,</span>ebp  </code></pre><p>把ebp  覆盖到 esp<br>这一步也可以称为“释放栈帧”<br><img src="https://img-blog.csdnimg.cn/06155dbe555f49b3ad6724325af4a16a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8e769547411048ccbcba988308137558.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><p>pop：数据弹出至指定位置，同时esp栈顶寄存器也要发生改变</p><pre class=" language-c"><code class="language-c">001E2F0A  pop         ebp</code></pre><p>“弹栈”<br>将main函数的栈底放在ebp中，esp内容改变<br><img src="https://img-blog.csdnimg.cn/a568685882564d0a9bee12873e74a940.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h3><p>ret：恢复返回地址，压入eip，类似pop eip命令</p><pre class=" language-c"><code class="language-c">001E2F0B  ret </code></pre><p>将之前call的下一个地址放在eip，esp内容改变<br><img src="https://img-blog.csdnimg.cn/8a33d6f488034f2ba48c76a69143fc88.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="第五步-1"><a href="#第五步-1" class="headerlink" title="第五步"></a>第五步</h3><p>释放临时拷贝的变量</p><pre class=" language-c"><code class="language-c">001E1E87  add         esp<span class="token punctuation">,</span><span class="token number">8</span></code></pre><p>意思是esp+8放在esp中<br><img src="https://img-blog.csdnimg.cn/ab77281065514605ba211996b1a979ec.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>现在我们已经返回到MyAdd执行之前了</p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><pre class=" language-c"><code class="language-c">001E1E8A  mov         dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>20h<span class="token punctuation">]</span><span class="token punctuation">,</span>eax </code></pre><p>接收返回值<br>将eax的值放到ebp-20（也就是z）</p><p><strong>返回的本质</strong></p><ul><li>返回到main的栈帧</li><li>返回到对应的代码处</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>函数的的栈帧是由编译器决定的</li><li>push进去的变量的空间是连续的</li><li>0CCh 的大小和你定义的函数的规模有关</li></ul><p> 为什么函数的的栈帧是由编译器决定的？<br> 我们C语言中很多数据类型，这就是的编译器有能力知道所有类型变量的大小。</p><p> 有关栈帧的知识大概都说的差不多了，后面我会看看是否还要补充一些知识。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这个模块是C语言的的基础部分，放在现在说是害怕之前听不太懂，今天我们就仔细的看看一个文件是如何变成一个可执行程序的。这个过程一直是我们想要了解的。</p><h1 id="程序的执行"><a href="#程序的执行" class="headerlink" title="程序的执行"></a>程序的执行</h1><p>大家有没有感觉到很神奇，我们定义的是一个.c的文件，到最后是如何编程的了一个.exe的可执行程序呢？我们使用过VS编译器，我们可能不太了解他们的具体原理，但是有一点可以确定任何一个编译器存在两种环境，<strong>翻译环境</strong>和<strong>执行环境</strong></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204271440546.png" alt="image-20220427144000502"></p><h2 id="翻译环境"><a href="#翻译环境" class="headerlink" title="翻译环境"></a>翻译环境</h2><p>翻译环境就是把源代码翻译成二进制文件，翻译环境又可以分为两者过程。</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204271448456.png" alt="image-20220427144859407"></p><h1 id="程序编译"><a href="#程序编译" class="headerlink" title="程序编译"></a>程序编译</h1><blockquote><p>一个代码要变成可执行程序要经过以下若干步骤，我先列出来，在Linux的环境下给大家演示，有些命令看不太懂没有关系，就看文件的变化就可以了</p></blockquote><ol><li><p>预处理</p></li><li><p>编译</p></li><li><p>汇编</p></li><li><p>链接</p></li></ol><h2 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h2><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031922819.png" alt="image-20220303192233788"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>    </span>    <span class="token macro property">#<span class="token directive keyword">define</span> M 10    </span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031926140.png" alt="image-20220303192654091"></p><h2 id="预处理（预编译）"><a href="#预处理（预编译）" class="headerlink" title="预处理（预编译）"></a>预处理（预编译）</h2><pre class=" language-powershell"><code class="language-powershell">gcc <span class="token operator">-</span>E test<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>i     </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031927308.png" alt="image-20220303192744271"></p><blockquote><p>这里是将#include&lt;stdio.h&gt;等库展开，将宏定义替换好</p></blockquote><p>作用</p><ul><li>展开库</li><li>替换宏</li></ul><blockquote><p>我们打开test.i看看</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031928150.png" alt="image-20220303192817098"></p><p>看看，代码一下子变成了800多行，这是库函数的展开，并且我们看到宏M已经被替换成了10，此时仍旧是C语言代码</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-powershell"><code class="language-powershell">gcc <span class="token operator">-</span>S test<span class="token punctuation">.</span>i <span class="token operator">-</span>o test<span class="token punctuation">.</span>s</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031928908.png" alt="image-20220303192844879"></p><blockquote><p>作用</p></blockquote><ul><li>将C语言编译成汇编代码</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031929965.png" alt="image-20220303192935928"></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><pre class=" language-powershell"><code class="language-powershell">gcc <span class="token operator">-</span>c test<span class="token punctuation">.</span>s <span class="token operator">-</span>o test<span class="token punctuation">.</span>o</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031929985.png" alt="image-20220303192959944"></p><blockquote><p>作用</p></blockquote><ul><li>将汇编语言变成二进制</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031932889.png" alt="image-20220303193258808"></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><blockquote><p>这里我没办法具体演示，就说一下吧，我们在代码中使用了printf函数，这里链接的便是printf函数，存在printf.o中</p></blockquote><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><blockquote><p>要是有兴趣学习Linux中多文件编译，可以看看这个博客</p></blockquote><p><a href="https://blog.csdn.net/m0_61334618/article/details/123095155">Linux下多文件编译运行</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/01%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%881%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/01%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="最隐蔽的关键字-auto"><a href="#最隐蔽的关键字-auto" class="headerlink" title="最隐蔽的关键字 - auto"></a>最隐蔽的关键字 - auto</h2><p> C语言中我们几乎每个程序都会使用的局部变量，局部变量默认都是auto修饰的，不过一般省略。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">auto</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//  a --- 局部变量</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281722748.png" alt="img" style="zoom:300%;" /><h3 id="auto-相关"><a href="#auto-相关" class="headerlink" title="auto 相关:"></a>auto 相关:</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>              <span class="token keyword">auto</span> b <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>无论是局部变量 a 还是 b 都被默认为 int 型<img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281722768.png" alt="img"></p><h2 id="最快的关键字-register"><a href="#最快的关键字-register" class="headerlink" title="最快的关键字 - register"></a>最快的关键字 - register</h2><p> 我们需要了解一些计算机组成的知识，根据机械原理，较大的存储设备要比较小存储设备运行的慢，而快速设备的造价要高得多，所以系统设计者采用<strong>高速缓存存储器</strong>作为集结区域，用于处理器存放近期可能用到的信息，存储器结构层次已经深入人心。</p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281722761.png" alt="img" style="zoom:150%;" /> <p>距离CPU越近的存储硬件，运行速度越快，CPU内集成了一组存储硬件，这就是寄存器。</p><p> register修饰的变量，就是<strong>尽可能</strong>的将期放入CPU寄存区中，从而达到提高效率的目的</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>1.register修饰的变量最好是<strong>局部变量</strong></p><p>2.register修饰变量只是请求存放在寄存器中，当然也有放不进去情况，寄存器的数量是 有限的。</p><p>3.register修饰的变量，不能对该变量取地址</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">register</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a = %p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>VS2013 报错 ：1error C2103: 寄存器变量上的“&amp;”  </p><p>gcc    报错 ：错误：要求寄存器变量‘a’的地址。</p></blockquote><h2 id="最易混淆的关键字-sizeof"><a href="#最易混淆的关键字-sizeof" class="headerlink" title="最易混淆的关键字 - sizeof"></a>最易混淆的关键字 - sizeof</h2><p> 记住sizeof 是一个关键字，不是函数！不是函数！！！ sizeof的单位是字节 （Byte），一个字节有8个二进制位（bit）组成。 注意：sizeof计算数值类型时一定要带括号</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281722770.png" alt="img" style="zoom:150%;" /><h3 id="补充：-1"><a href="#补充：-1" class="headerlink" title="补充："></a>补充：</h3><p>1.sizeof可以也计算常量 表达式的大小</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//带括号</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//可以不带括号</span>  <span class="token comment" spellcheck="true">//注意 如果是下面这种情况，一定要带括号</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>2.sizeof计算的是开辟空间的大小，像 字符‘\0’ 也是会计算上去的</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> main<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281722765.png" alt="img" style="zoom:120%;" /> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/02%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%882%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/02%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天主要见识下面的三个关键字,我们抽丝剥茧来谈谈,这些边边角角有的是我们注意不到的.我们一起来看看吧.</p><h1 id="extern关键字"><a href="#extern关键字" class="headerlink" title="extern关键字"></a>extern关键字</h1><p>不知道大家对于extern的了解怎么样？知道什么是变量的声明吗？我们如何使用其他文件里面的全局变量？知道extern的作用了,它是申明一个变量或者是函数我们来看它的作用吧.</p><h2 id="声明全局变量"><a href="#声明全局变量" class="headerlink" title="声明全局变量"></a>声明全局变量</h2><p>我们在test.c中定义一个全局变量,如何在main.c中使用?</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//test.c</span><span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//main.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> g_val<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//会告诉编译器  g_val是一个全局变量.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204291906285.png" alt="image-20220429190630246"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204291852838.png" alt="image-20220429185250737"></p><p>这里我先有一个问题,要是我们再次在main.c里面定义一个全局变量g_val会怎么样?</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> g_val<span class="token punctuation">;</span><span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204291902112.png" alt="image-20220429190252067"></p><p>我们发现运行时过不了,编译器链接时寻找变量,他不能够区分这两g_val有什么不同.</p><blockquote><p>那么我们声明全局变量时给它赋值会怎么样?</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204291905242.png" alt="image-20220429190557202"></p><p>这个是不可能过的,extern的作用是声明变量,它不会开辟空间,我们初始化或者是赋值都是把数据放到开辟的内存当中,一定会报错.</p><p>可是我们有疑惑了,下面的代码为什么会跑过?</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204291911815.png" alt="image-20220429191129777"></p><h2 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/04%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%884%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/04%20C%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型</p><table><thead><tr><th>内置类型</th><th>自定义类型</th></tr></thead><tbody><tr><td>char short int long long         float double</td><td>结构体               枚举</td></tr></tbody></table><h3 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h3><p>问：为什么要定义类型？答：根据不同的类型在内存中开辟不同大小的一块空间。问：为什么要定义这么多类型？我们的应用场景是很复杂的，不同应用场景要求不同大小的空间，比如说，一个人的年龄、身高等变量可以定义成short型，定义成int型就浪费了空间。</p><h2 id="数据在内存中的存储（重点）"><a href="#数据在内存中的存储（重点）" class="headerlink" title="数据在内存中的存储（重点）"></a>数据在内存中的存储（重点）</h2><p> 我们都知道，数据在内存中是以二进制的形式存入的，如何将整型 浮点型存入内存呢？下面就是我们要研究的。</p><h3 id="数据转换成二进制"><a href="#数据转换成二进制" class="headerlink" title="数据转换成二进制"></a>数据转换成二进制</h3><h4 id="整型的存储"><a href="#整型的存储" class="headerlink" title="整型的存储"></a>整型的存储</h4><p>正整数的原反补相同，这里以-5举例-5 &#x3D; -4 -1 &#x3D; -22 - 20原码 ：10000000 00000000 00000000 00000101  反码 ：11111111 11111111  11111111  11111010     —- 原码取反补码 ：11111111 11111111  11111111  11111011     —- 反码 + 1 <code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;#include&lt;string.h&gt;int main()&#123;    int a = -5;    //预测在空间中的存储：0xff ff ff fb    system(&quot;pause&quot;);    return 0;&#125;</code>运行代码结果： fb ff ff ff不要觉得惊讶，这与大小端有关，下面就会看到。</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734852.png" alt="img"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="浮点型的存储"><a href="#浮点型的存储" class="headerlink" title="浮点型的存储"></a>浮点型的存储</h4><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p> 根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：NUM &#x3D; （-1）^S * M * 2 ^E</p><ul><li>S 的取值  正数  0   负数  1</li><li>M 表示有效数字，大于等于1，小于2</li><li>E 表示指数位</li></ul><h4 id="float型"><a href="#float型" class="headerlink" title="float型"></a>float型</h4><p>1个符号位 8个指数位 23个有效数字位</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739006.png" alt="img"></p><h4 id="double-型"><a href="#double-型" class="headerlink" title="double 型"></a>double 型</h4><p>1个符号位 11个指数位 52个有效字符位</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739013.png" alt="img"></p><h4 id="关于-M-的值"><a href="#关于-M-的值" class="headerlink" title="关于 M 的值"></a>关于 M 的值</h4><p> IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p><h4 id="关于E的值"><a href="#关于E的值" class="headerlink" title="关于E的值"></a>关于E的值</h4><p> 首先，E为一个无符号整数（unsigned int） 这意味着，如果E为8位，它的取值范围为0<del>255；如果E为11位，它的取值范围为0</del>2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127&#x3D;137，即10001001。</p><h5 id="存储样例-以float型为例"><a href="#存储样例-以float型为例" class="headerlink" title="存储样例 - 以float型为例"></a>存储样例 - 以float型为例</h5><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739002.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739001.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739983.png" alt="img"></p><p>所以我们就得到9.5 在内存的二进码</p><p>0100 0001 0001 1000 0000 0000 0000 0000</p><p>4    1   1    8    0   0    0    0</p><p>41 18 00 00  (小端存储）</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739010.png" alt="img"></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="取出"><a href="#取出" class="headerlink" title="取出"></a>取出</h3><p>下面是如何存储的规则</p><ul><li><p>E不全为0，也不全为1</p><p> E的真实值 E - 127   M 加上 1</p></li><li><p>E全为0</p><p> E的真实值-127 NUM 无限接近于 0</p></li><li><p>E全为1</p><p> E的真实值 128 NUM 无限接近于正无穷 或 负无穷</p></li></ul><h3 id="浮点数的精度损失"><a href="#浮点数的精度损失" class="headerlink" title="浮点数的精度损失"></a>浮点数的精度损失</h3><p> 虽然我们有了浮点数的存储规则，但是总会有不能够用有限的二进制来表示，就像我们有无限不循环小数一样，总会出现约等于，这就是浮点数的精度问题</p><h4 id="现象一"><a href="#现象一" class="headerlink" title="现象一"></a>现象一</h4><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;int main()&#123;  double d = 3.6;  printf(&quot;%.50lf&quot;, d);  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739455.png" alt="img"></p><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="现象二"><a href="#现象二" class="headerlink" title="现象二"></a>现象二</h4><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;int main()&#123;  double x = 1.0;  double y = 0.1;  printf(&quot;%.50f\n&quot;, x - 0.9);  printf(&quot;%.50f\n&quot;, y);  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739480.png" alt="img"></p><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="现象三"><a href="#现象三" class="headerlink" title="现象三"></a>现象三</h4><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;int main()&#123;  double x = 1.0;  double y = 0.1;  if ((x - 0.9) == 0.1)  &#123;    printf(&quot;You can see me!!!\n&quot;);  &#125;  else  &#123;    printf(&quot;oops!!!\n&quot;);  &#125;  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739484.png" alt="img"></p><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>浮点数绝对不能通过 &#x3D;&#x3D; 进行比较 计算机很严格</p><h3 id="浮点数如何比较"><a href="#浮点数如何比较" class="headerlink" title="浮点数如何比较"></a>浮点数如何比较</h3><p>两个浮点数的比较通过他们的相减的得到的值小于某个值大于某个值，这个值就是 精度  精度可以定义 编译器自带</p><p>说人话,就是下面的的一张图</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739492.png" alt="img"></p><pre><code>//我们认为下面的方法就可以了if ((x - y) &gt; - 精度 &amp;&amp; (x - y) &lt; 精度)  &#123;     //也可以使用fabs（x-y）    ----    fabs()函数求绝对值  &#125;</code></pre><p>也就是两个数相减的结果在这个范围内就认为两数相等</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;#include&lt;math.h&gt;#define EPSILON 0.000000001   //自己定义的精度int main()&#123;  double x = 1.0;  double y = 0.1;  /*if ((x - 0.9) == 0.1)*/  if (fabs((x - 0.9)-0.1) &lt;  EPSILON)  &#123;    printf(&quot;You can see me!!!\n&quot;);  &#125;  else  &#123;    printf(&quot;oops!!!\n&quot;);  &#125;  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739494.png" alt="img"></p><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4><h4 id="系统自带精度"><a href="#系统自带精度" class="headerlink" title="系统自带精度"></a>系统自带精度</h4><p>编译器会自带一些精度 VS中要引用&lt;float.h&gt;头文件</p><ul><li>DBL_EPSILON</li><li>FLT_EPSILON</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739538.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739951.png" alt="img"></p><pre><code>#include&lt;windows.h&gt;#include&lt;math.h&gt;#include&lt;float.h&gt;int main()&#123;  double x = 1.0;  double y = 0.1;  if (fabs((x - 0.9)-0.1) &lt; DBL_EPSILON)  &#123;    printf(&quot;You can see me!!!\n&quot;);  &#125;  else  &#123;    printf(&quot;oops!!!\n&quot;);  &#125;  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281739957.png" alt="img"></p><h4 id="浮点数和0的比较"><a href="#浮点数和0的比较" class="headerlink" title="浮点数和0的比较"></a>浮点数和0的比较</h4><pre><code>#include&lt;windows.h&gt;#include&lt;math.h&gt;#include&lt;float.h&gt;int main()&#123;  double x = 0.0;  if (fabs(x) &lt; DBL_EPSILON)  &#123;    printf(&quot;hehe\n&quot;);  &#125;  return 0;&#125;</code></pre><h4 id="0-0-X-x3D-x3D-0-0-这个X是多少-重点"><a href="#0-0-X-x3D-x3D-0-0-这个X是多少-重点" class="headerlink" title="0.0 + X &#x3D;&#x3D; 0.0  这个X是多少(重点)"></a>0.0 + X &#x3D;&#x3D; 0.0  这个X是多少(重点)</h4><p> 浮点数是有精度的,这个 X 是一个 绝对值小于 “精度” 的值 . 记住 X 等于是一定不满足的</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>浮点数的存储与读取</li><li>精度损失</li><li>浮点数比较</li></ul><h2 id="大小端问题"><a href="#大小端问题" class="headerlink" title="大小端问题"></a>大小端问题</h2><p>什么是大小端问题？先看现象：</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734852.png" alt="img"></p><p>我们预测的-5应该是以0xff ff ff fb形式存储，但事实怎们反过来了？这就是大小端问题。 int a &#x3D; 0x11223344; 该变量在内存中如何存的，取时就如何取，但是有顺序的存放会更简洁，所以就保留了前两种方式，也就是大端存储和小端存储。<img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734840.png" alt="img"></p><h3 id="本质："><a href="#本质：" class="headerlink" title="本质："></a>本质：</h3><p>两种存储方案本质上都是数据和空间按照字节为单位的一种映射关系。</p><h3 id="两者区别："><a href="#两者区别：" class="headerlink" title="两者区别："></a>两者区别：</h3><table><thead><tr><th><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734817.png" alt="img"></th><th>大端：低权值位放在高地址，高权值位放在低地址。 大端：低权值位放在地地址，高权值位放在高地址。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734909.png" alt="img"></p><h3 id="如何判断是大端存储还是小端存储"><a href="#如何判断是大端存储还是小端存储" class="headerlink" title="如何判断是大端存储还是小端存储"></a>如何判断是大端存储还是小端存储</h3><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;#include&lt;string.h&gt;int Is_sto(void)  &#123;      int a = 1;      //1   ---    00 00 00 01      //大端 返回 0      //小端 返回 1      return (char)a;&#125;int main()&#123;        if (0 == Is_sto())        printf(&quot;大端\n&quot;);      else        printf(&quot;小端\n&quot;);      system(&quot;pause&quot;);      return 0;&#125;</code></pre><h2 id="数据的存储与类型没有关系（重点）"><a href="#数据的存储与类型没有关系（重点）" class="headerlink" title="数据的存储与类型没有关系（重点）"></a>数据的存储与类型没有关系（重点）</h2><p> 我们先看下面一道例题，解释一下标题的的意思</p><pre><code>#include&lt;stdio.h&gt;#include&lt;Windows.h&gt;int main()&#123;  int a = 10;  unsigned int b = -20;  printf(&quot;%d\n&quot;, a + b);  printf(&quot;%u&quot;, a + b);  system(&quot;pause&quot;);  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734806.png" alt="img"></p><p>为什么会出现这种情况？</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734819.png" alt="img"></p><p>看看a+b在计算机中存储的数据当我们使用%d进行打印时，该数据解释为 int型使用%u打印时，解释为unsigned int 型这就是标题的意思</p><h2 id="数据类型的比较"><a href="#数据类型的比较" class="headerlink" title="数据类型的比较"></a>数据类型的比较</h2><h3 id="C语言有没有布尔类型"><a href="#C语言有没有布尔类型" class="headerlink" title="C语言有没有布尔类型"></a>C语言有没有布尔类型</h3><p>关于这个话题我们说详细一些，尽量把这个说的仔细</p><ul><li>C语言在C99标准之前没有buerleixing</li><li>C99标准下增加了布尔类型</li><li>大部分的编译器对C99的标准不太好</li></ul><h4 id="C99标准下有布尔类型-叫-Bool"><a href="#C99标准下有布尔类型-叫-Bool" class="headerlink" title="C99标准下有布尔类型  叫_Bool"></a>C99标准下有布尔类型  叫_Bool</h4><h5 id="为啥叫-Bool-这么难看"><a href="#为啥叫-Bool-这么难看" class="headerlink" title="为啥叫_Bool   这么难看"></a>为啥叫_Bool   这么难看</h5><p>是因为在布尔类型出来之前，我们部分程序员自己宏定义了一些名称，这里避免和之前的代码产生冲突，造成bug</p><h5 id="为啥叫-Bool没事，它就不会冲突吗"><a href="#为啥叫-Bool没事，它就不会冲突吗" class="headerlink" title="为啥叫_Bool没事，它就不会冲突吗"></a>为啥叫_Bool没事，它就不会冲突吗</h5><p>_Bool是保留字保留字，指在高级语言中已经定义过的字，程序员不能再将这些字作为变量名、过程名或函数名使用，保留字包括关键字和未使用的保留字。</p><h4 id="说明-Bool、bool、BOOL的联系"><a href="#说明-Bool、bool、BOOL的联系" class="headerlink" title="说明_Bool、bool、BOOL的联系"></a>说明_Bool、bool、BOOL的联系</h4><h5 id="Bool"><a href="#Bool" class="headerlink" title="_Bool"></a>_Bool</h5><p>_Bool就是一种C99标准下定义的类型 </p><ul><li>在不支持C99的编译器需要引用标准库**&lt;stdbool.h&gt;**</li><li>是一个字节</li></ul><pre><code>#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;int main()&#123;  _Bool fag = 1;   //可以将1赋值给他  fag = true;  if (fag)  &#123;    printf(&quot;%d&quot;, sizeof(fag));  &#125;  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734326.png" alt="img"></p><h4 id="-6"><a href="#-6" class="headerlink" title=""></a></h4><h5 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h5><p>我们要记住在C++里面我们的布尔类型是bool，C&#x2F;C++是相通的，避免我们在移植出现错误，我们将_Bool宏定义成了bool，本质一样</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734364.png" alt="img"></p><h4 id="-7"><a href="#-7" class="headerlink" title=""></a></h4><h5 id="BOOL"><a href="#BOOL" class="headerlink" title="BOOL"></a>BOOL</h5><p>BOOL本质上是<strong>int</strong>型，是微软自己定义的，只能在自己的产品中使用</p><ul><li>TRUE　和　FALSE　都是大写的</li><li>需要引用标准库**&lt;windows.h&gt;**</li><li>TRUE 就是1 FALSE就是0</li></ul><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;int main()&#123;  BOOL x = TRUE;  printf(&quot;%d&quot;, sizeof(BOOL));  return 0;&#125;</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734376.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734405.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734409.png" alt="img"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204281734397.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/Java%E4%B8%8EC%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%8D%E5%90%8C/"/>
      <url>/2022/06/24/Java/JavaSE/Java%E4%B8%8EC%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>这篇博客主要是解决我在学习Java中C语言的指针对我的影响，让我记住一些内容</p></blockquote><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><blockquote><p>这些天我一直在疑惑关于指针的一些事，心里总是不踏实，感觉对指针的理解不太到位</p></blockquote><blockquote><p>这里在学链表时我不知道为何要传二级指针，后来才发现自己理解错了形参只是实参的一份临时拷贝，改变形参不会对实参有任何影响</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/5259a1b6a2f44fdcbb20eb06d4bfc6ba.png" alt="在这里插入图片描述"></p><blockquote><p>对于指针也是一样的</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/d6d180fb99c349e28a796955484ad96a.png" alt="在这里插入图片描述"></p><blockquote><p>是我进入了误区，我们要在链表头结点那里添加节点，必须要通过二级指针来改变next的值，二级指针的作用主要作用第一次插入</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> Node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾插</span><span class="token keyword">void</span> <span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token operator">*</span> phead<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> newnode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newnode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        newnode<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>        newnode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>phead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">*</span>phead <span class="token operator">=</span> newnode<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token operator">*</span>phead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> newnode<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印链表</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/e48845e83d364fafb7ad90bb7b32ddee.png" alt="在这里插入图片描述"></p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><blockquote><p>Java这里是没有指针这一概念的，感觉很是方便</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Node head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾插</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode listNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span><span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span><span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span><span class="token function">TailInsert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/82219cc6eb70407fb93358603dd2d34a.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E7%94%B5%E5%B7%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFC/%E7%94%B5%E8%B7%AF%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/"/>
      <url>/2022/06/24/%E7%94%B5%E5%B7%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFC/%E7%94%B5%E8%B7%AF%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h3 id="电路的作用与组成部分"><a href="#电路的作用与组成部分" class="headerlink" title="电路的作用与组成部分"></a>电路的作用与组成部分</h3><blockquote><p>电路的作用</p></blockquote><ul><li>电能的传输和分配与转换</li><li>实现信号的传递与处理</li></ul><blockquote><p>组成部分</p></blockquote><p>电源  提供电能的装置</p><p>负载 取用电能的装置</p><p>电源   中间环节    负载</p><h3 id="电路模型"><a href="#电路模型" class="headerlink" title="电路模型"></a>电路模型</h3><p>实际电路理想化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E7%94%B5%E5%B7%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFC/Untitled/"/>
      <url>/2022/06/24/%E7%94%B5%E5%B7%A5%E4%B8%8E%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AFC/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E6%84%9F%E6%82%9F/%E8%BF%99%E4%B9%88%E5%A4%9AIT%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%EF%BC%8C%E4%B8%BA%E4%BD%95%E6%88%91%E5%B0%B1%E5%8D%95%E5%8D%95%E9%80%89%E6%8B%A9%E4%BA%86%E6%AF%94%E7%89%B9%E5%B0%B1%E4%B8%9A%E8%AF%BE%EF%BC%9F/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E6%84%9F%E6%82%9F/%E8%BF%99%E4%B9%88%E5%A4%9AIT%E5%9F%B9%E8%AE%AD%E6%9C%BA%E6%9E%84%EF%BC%8C%E4%B8%BA%E4%BD%95%E6%88%91%E5%B0%B1%E5%8D%95%E5%8D%95%E9%80%89%E6%8B%A9%E4%BA%86%E6%AF%94%E7%89%B9%E5%B0%B1%E4%B8%9A%E8%AF%BE%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="这么多IT培训机构，为何我就单单选择了比特就业课？"><a href="#这么多IT培训机构，为何我就单单选择了比特就业课？" class="headerlink" title="这么多IT培训机构，为何我就单单选择了比特就业课？"></a>这么多IT培训机构，为何我就单单选择了<a href="http://www.bitejiuyeke.com/#/homePage">比特就业课</a>？</h1><p>  说实话，我是第一次写这样的文章，要是又不恰当的地方，还请诸位见谅。先大致说一下自己，本人在校学生一枚，非计算机相关专业，</p><p>第一次知道<strong>比特</strong>是在B站看到了鹏哥的视频，那时候大一，学校里正在教C语言。或许我是觉得学校老师讲的有些枯燥，听不进去，快到考试的时候才感到焦急，在网上寻找教程，这样我遇到了B站上鹏哥的C语言，过程不想小说中那样奇妙，那时的我还未意识到这是缘分的开始，为了应付考试，我花了十几天来看视频，当然我是没有看完的，成绩出来了，考了八十几分</p><p>人生有很多相遇，或许一次遇见将改变你的人生  这句话就是我现在的感想   我的人生就像人们所常说的平平谈谈，我高中立志进入一所好的大学，又像很多学生一样到了大学中不到方向，大一上学期，那是空洞乏味的回忆，整天无事可干，若不是下学期的出现的C语言，我或许已经沉沦了，C语言的不会强迫我寻找网上教程，也在B站上遇到了鹏哥，说真的我从未见到一个这么负责人有耐心，讲的有生动有趣的老师，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E6%84%9F%E6%82%9F/2022_03_21/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E6%84%9F%E6%82%9F/2022_03_21/</url>
      
        <content type="html"><![CDATA[<p>这两天一直在疑惑，如何学习。我对小说的抗性一直很低，都是过几天就会有看的欲望。不过我把浏览器给卸载了，一定程度上缓解了这种情绪。不过今天我突然感觉到自己学习数据结构的方法可能存在一些问题。是理解方法，课后在自己写，还是上课每一个代码都搞懂主要是我们着几天都有课。可能听的不太仔细。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E6%84%9F%E6%82%9F/2022.3.31%E8%9B%8B%E5%93%A5%E7%9B%B4%E6%92%AD/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E6%84%9F%E6%82%9F/2022.3.31%E8%9B%8B%E5%93%A5%E7%9B%B4%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>互联网可以会火多少年</p></blockquote><p>不确定,一直存在996 35岁推移  但是薪资高 </p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311937802.png" alt="image-20220331193740724"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311947198.png" alt="image-20220331194708997"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311947183.png" alt="image-20220331194748985"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E9%98%85%E8%AF%BB/%E5%9B%BD%E5%AF%8C%E8%AE%BA/02%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E8%AE%BA%E5%88%86%E5%B7%A5%E7%9A%84%E7%90%86%E7%94%B1/"/>
      <url>/2022/06/24/%E9%98%85%E8%AF%BB/%E5%9B%BD%E5%AF%8C%E8%AE%BA/02%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E8%AE%BA%E5%88%86%E5%B7%A5%E7%9A%84%E7%90%86%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="分工产生的原因"><a href="#分工产生的原因" class="headerlink" title="分工产生的原因"></a>分工产生的原因</h1><blockquote><p>这章开篇就提出了一个让我感到疑惑的结论:<font color = green>“引出上述许多利益的分工，原不是人类智慧的结果”  </font>我就感到疑惑了,后面它的解释,说实话有点绕口,我先截下图.</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206222333927.png" alt="image-20220622233303878"></p><p>这段话说的意思就是<strong>人们认识到分工有很多好处,但是它的诞生是由于<font color = blue>以物换物</font>的等倾向缓慢产生的</strong>,记住是缓慢,也就是说这种变化是长时间产生的,很令人疑惑,我们接着往下看.</p><h2 id="这种倾向是什么"><a href="#这种倾向是什么" class="headerlink" title="这种倾向是什么"></a>这种倾向是什么</h2><p>我们需要</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E9%98%85%E8%AF%BB/%E5%9B%BD%E5%AF%8C%E8%AE%BA/01%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%AE%BA%E5%88%86%E5%B7%A5/"/>
      <url>/2022/06/24/%E9%98%85%E8%AF%BB/%E5%9B%BD%E5%AF%8C%E8%AE%BA/01%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%AE%BA%E5%88%86%E5%B7%A5/</url>
      
        <content type="html"><![CDATA[<p>在一个工厂中，有一个大型的工作要完成，成功组装1w部手机。我们有下面两种解决办法。</p><ol><li>一个人完成一部手机的全部组装</li><li>多个人分工，每人完成组装的一部分</li></ol><p>我们来看看它们的效率如何。</p><blockquote><p>一个人完成一部手机的全部工作</p></blockquote><p>这要求这个工人要熟悉所有的手机的工作流程，只有一步不会，那么他就合成不出一部手机，而且这种工人占据的人数有点少。</p><blockquote><p>分工</p></blockquote><p>分工只要求一个工人只需要了解和熟练从属自己的工作就可以了，这样工人的需要了解的不多，对他们来说，简单快速，随着工作的时间变长，工人的熟练度会增加，出错的概率也会变低，最为关键的是，这种工人的人数很多，人们只需要一下简单的培训就可以上岗了。</p><blockquote><p>分工  存在很多好处，例如劳动生产力的激进，更多的技巧和更高的熟练度…</p></blockquote><p>但是有很多人可能认为,只有在那些不重要的制造业,分工才会那么详细.实际上,对于那些只为少数人小量提供的不重要的制造业,由于人数过少,分工看起来很周密,但是对于那些人数多的,反倒难以看出来了.</p><p>分工就可以把一个复杂的东西简单化，更加高效，而且人也不用学习全部的知识</p><blockquote><p>凡能采用分工制的工艺，一经采用分工制，便相应地增进劳动的生产力。 </p><p>农业一般是独自一个人来完成的</p><p>农业上劳动生产力的增进，总跟不上制造业上劳动生产力的增进的主要原因，也许就是农业不能采用完全的分工制度。  </p></blockquote><p>我们可以得到一个结论，富国的农业不一定强于贫国，但是制造业贫国是不能够和富国竞争的，至少在富国土壤气候位置适<br>宜于这类制造业的场合，贫国不能和富国竞争  </p><blockquote><p>有了分工，同数劳动者就能完成比过去多得多的工作量，</p></blockquote><ul><li>第一，劳动者的技巧因业专而日进；</li><li>第二，由一种工作转到另一种工作，通常须损失不少时间，有了分工，就可以免除这种损失；</li><li>第三，许多简化劳动和缩减劳动的机械的发明，使一个人能够做许多人的工作。</li></ul><p>分工的结果，各个人的全部注意力自然会倾注在一种简单事物上，可以得到更加简便的，快速的方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E9%98%85%E8%AF%BB/%E5%9B%BD%E5%AF%8C%E8%AE%BA/00%20%E7%BB%AA%E8%AE%BA/"/>
      <url>/2022/06/24/%E9%98%85%E8%AF%BB/%E5%9B%BD%E5%AF%8C%E8%AE%BA/00%20%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="《国富论》地位"><a href="#《国富论》地位" class="headerlink" title="《国富论》地位"></a>《国富论》地位</h1><p>《国富论》是亚当斯密最重要的一本著作，可以说是资本主义经济学的开山鼻祖。1776年，美国出现了两大成就，一个是《独立宣言》，它标志美国的诞生，另一个就是《国富论》的出版，它奠定了资本主义自由经济的理论基础。可以说，《国富论》这本书在经济学中存有举足轻重的地位，堪称西方经济学界的“圣经”。</p><h1 id="为何我们还要看这本书"><a href="#为何我们还要看这本书" class="headerlink" title="为何我们还要看这本书"></a>为何我们还要看这本书</h1><blockquote><p>历经近三个世纪，现在的经济学著作琳琅满目，我们现在的时代和那个年代完全不同，这本书是不是这本书就落伍了，是的，亚当斯密或许想象不出我们当今的时代，，但是我们现在这些著作大多都是对它的延伸和发展，在这个框架里面进行发展.而且这本书里面举了很多形象的例子，可以帮助我们辅助理解。</p></blockquote><p>我是一名初学者，对于经济学之前一点都不了解，这是我第一次看这本书，这也是我的一个长辈给我推荐的书。里面有很多知识、语句对我来说有点枯涩难懂，尤其是下面的绪论部分，我看了很长时间，做了一些笔记。</p><h1 id="国富论序论及全书设计-笔记"><a href="#国富论序论及全书设计-笔记" class="headerlink" title="国富论序论及全书设计  笔记"></a>国富论序论及全书设计  笔记</h1><blockquote><p>消费人群对劳动产物或者用劳动产物购买的外国商品的比例可以反映一国国民所需要的一切必需品和便利品供给情况的好坏 .</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206102327919.png" alt="image-20220610232721743"></p><p>但是这种比例无论在哪一个国家，大致都会收到两种因素的影响，大多取决于第一种情况.</p><p>但是下面又出现了这么一句话,我有点疑惑</p><blockquote><p>不论一国国民在运用劳动时，实际上究竟是怎样熟练，怎样有技巧，怎样有判断力，在运用情况继续不变的期间，一国国民每年供给状况的好坏，总必取决于其国民每年从事有用劳动的人数，和不从事有用劳动的人数，究竟成什么比例 。</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206102338235.png" alt="image-20220610233834117"></p><blockquote><p>在劳动技能比较成熟的地方,一些国家会对劳动的指导和管理采取不同的方法,有的关注农业,有的关注城市,得到不同的结果,也出现的不同的学说</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaWeb/04%20%E5%A4%9A%E7%BA%BF%E7%A8%8B03/"/>
      <url>/2022/06/24/Java/JavaWeb/04%20%E5%A4%9A%E7%BA%BF%E7%A8%8B03/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaWeb/03%20%E5%A4%9A%E7%BA%BF%E7%A8%8B02/"/>
      <url>/2022/06/24/Java/JavaWeb/03%20%E5%A4%9A%E7%BA%BF%E7%A8%8B02/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>前面我们已经基本了解了线程的基本属性,也初步认识了Thread类中的部分内容,今天主要在这个基础上再拔高一个台阶,深入理解线程的执行与销毁.</p></blockquote><h1 id="开始一个线程"><a href="#开始一个线程" class="headerlink" title="开始一个线程"></a>开始一个线程</h1><p>开始一个线程很简单,就是调用start();方法,当我们调用这个方法时,进程会创建一个Thread对象,在内核中会出现一个PCB</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161816128.png" alt="image-20220416181642999"></p><h1 id="结束线程"><a href="#结束线程" class="headerlink" title="结束线程"></a>结束线程</h1><p>线程的结束就是内核中的PCB销毁了,结束线程的关键就是让线程的入口方法执行完毕</p><blockquote><p>入口方法</p></blockquote><ul><li>继承Thread,重写的run</li><li>继承的Runnable,重写的run</li><li>lambda</li></ul><p>下面的代码就是当run方法执行完了后,这个线程就自动结束了.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可是有时候run方法不一定可以这么快的结束,例如下面的代码,线程不会自动结束,这就需要我们手动来结束线程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//由于  判断条件一直是 真 ,所以线程不会自动结束</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="结束线程-1"><a href="#结束线程-1" class="headerlink" title="结束线程"></a>结束线程</h2><p>实际开发种,我们不希望run是一个死循环,存在两种方法可以让我们随时中断掉线程</p><ol><li>使用 布尔变量 来直接中断线程</li><li>使用内置的 isInterrupted();来判定当前线程是不是应该结束循环</li></ol><h3 id="使用-布尔变量"><a href="#使用-布尔变量" class="headerlink" title="使用 布尔变量"></a>使用 布尔变量</h3><p>简单粗暴</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程运行中 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161907171.png" alt="image-20220416190748130"></p><h3 id="使用-isInterrupted"><a href="#使用-isInterrupted" class="headerlink" title="使用 isInterrupted();"></a>使用 isInterrupted();</h3><p>Java提供了内置的方法,</p><ul><li>isInterrupted();来判断当前线程是不是中断了,默认是false</li><li>interrupt(); 可以修改标记位,中断线程,修改标记位</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 默认 是 Thread.currentThread().isInterrupted()  false</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程运行中 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打断程序  标记位 设为  true</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161924721.png" alt="image-20220416192410676"></p><p>我们发现这和我们设想的不太一样,他好像没有修改标记位,并且报了一个异常,我们先来处理异常问题</p><blockquote><p>异常</p></blockquote><p>这个异常就是因为 e.printStackTrace();的原因,我们每打印一次都会休眠上1秒钟,当我们修改标记位是恰巧在线程休眠时,这就是出现异常.</p><blockquote><p>好象没有修改标记位</p></blockquote><p>当线程处于休眠的状态时,我们修改了标记位,出现了异常,但是一但这个等待状态时间结束后,程序仍旧开始执行</p><h4 id="interrupt-的处理机制"><a href="#interrupt-的处理机制" class="headerlink" title="interrupt()的处理机制"></a>interrupt()的处理机制</h4><ul><li>要是当前进程正在运行中,就会修改hread.currentThread().isInterrupted()  为true</li><li>当前进程处在sleep&#x2F;wait&#x2F;等待锁等此时会触发InterruptedException机制</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>异常哪里加一个    break;直接跳出循环</p><pre class=" language-c"><code class="language-c">public class TestDemo4 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 默认 是 Thread.currentThread().isInterrupted()  false</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程运行中 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打断程序  标记位 设为  true</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(Thread.interrupted());</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204162012568.png" alt="image-20220416201210520"></p><h2 id="isInterrupted-和interrupted-区别"><a href="#isInterrupted-和interrupted-区别" class="headerlink" title="isInterrupted()和interrupted()区别"></a>isInterrupted()和interrupted()区别</h2><p>这两个都是可以判断线程的标记位,不过有下面几种不同</p><ul><li>isInterrupted()是实例方法 ,interrupted()是静态方法</li><li>interrupted()会自动弹出开关,isInterrupted()不会</li></ul><blockquote><p>interrupted()会自动弹出开关,我们使用interrupt();修改了标记位返回true,当调用interrupted()来判定标记位时,也返回true,并且对标记位进行修改,下次调用isInterrupted()时仍旧是false</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo5</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 弹出</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyRunnable target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204162031783.png" alt="image-20220416203148727"></p><blockquote><p>isInterrupted()不会自动弹出,比如我们使用interrupt();修改了标记位返回true,当调用isInterrupted()来判定标记位时,也返回true,但是不会对标记位进行修改,下次调用isInterrupted()时仍旧是true</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo5</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不弹出</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyRunnable target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204162033896.png" alt="image-20220416203344850"></p><h1 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h1><p>什么是线程等待,由于线程与线程之间调度的顺序是不确定的,哪个线程先执行,哪个线程后执行我们判断不出来。我们希望这些线程执行的循序是可控的.。此时的线程等待就是一种办法,<strong>所谓的线程等待就是控制线程与线程之间的执行顺序</strong></p><p>假如说有线程t1,t2,t3这三个线程,我们要求线程t1执行的时候,在线程t2,t3的完成后才开始结束线程t1.需要借助join。</p><blockquote><p>按照我们的想法，t线程和main主线程是一起并发执行的，但是要是我们加入一个t.join(),这就是阻塞等待，只有t线程结束完成之后，代码才会继续往下执行</p></blockquote><pre class=" language-c"><code class="language-c">public class MyThread <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  阻塞等待</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211442753.png" alt="image-20220421144251667"></p><h2 id="线程等待状态的原因"><a href="#线程等待状态的原因" class="headerlink" title="线程等待状态的原因"></a>线程等待状态的原因</h2><p>我们看看线程等待的原理.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211725883.gif" alt="阻塞队列"></p><p>同样线程等待也分为死等和有时间限度等待，上面的就是死等，所谓的死等就是只有这个线程结束或者被其他的线程唤醒，才会结束等待，在工作中，死等往往是不安全的。这里有一个带参数join方法，参数就是等待的时间，一旦超过这个时间，代码就会继续往下面执行。</p><pre class=" language-c"><code class="language-c">t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211448099.png" alt="image-20220421144846056"></p><h1 id="获取当前进程的引用"><a href="#获取当前进程的引用" class="headerlink" title="获取当前进程的引用"></a>获取当前进程的引用</h1><p>前面我们也使用过Thread.currentThread();  对它也非常熟悉了，这里我要补充一点.</p><blockquote><p>本质上他和this的作用一样,我们使用this也可以代替它,不过这里有一个限制,要是我们继承的是Runnable接口等等,this就不能使用了,但是上面的仍旧可以使用,相等于一个万金油.</p></blockquote><pre class=" language-c"><code class="language-c">public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211452329.png" alt="image-20220421145258279"></p><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>线程的状态可以辅助我们进行线程的调用.在Java中为了更好的控制线程在Thread类中封装的一些方法,可以帮助我们更好的理解线程</p><p>这里我们谈到的状态和CPU里面的状态不完全一样.分为下面几种</p><table><thead><tr><th align="center">描述</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">NEW</td><td align="center">实例化一个线程,还未创建PCB</td></tr><tr><td align="center">RUNNABLE</td><td align="center">处于就绪态或者是执行态</td></tr><tr><td align="center">TIMED_WAITING</td><td align="center">等待状态(有时间限制)</td></tr><tr><td align="center">TERMINATED</td><td align="center">PCB已经结束,对象还在</td></tr><tr><td align="center">WAITING</td><td align="center">死等</td></tr><tr><td align="center">BLOCKED</td><td align="center">等待被锁</td></tr></tbody></table><h2 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h2><p>所谓的初始态,就是我们刚刚实例化一个Thread对象,内核PCB还没有创建，什么都不做.其中初始态叫做NEW.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"第一线程"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161822772.png" alt="image-20220410175409364"></p><h2 id="RUNNABLE"><a href="#RUNNABLE" class="headerlink" title="RUNNABLE"></a>RUNNABLE</h2><p>对于线程来说,,我们都知道可以使用双向链表来管线程,要是这个进程被调度到CPU中，这个就叫做运行态．对于随时都有可能的状态叫做就绪态.就绪态和运行态都是  RUNNABLE  </p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161822836.png" alt="image-20220410181140950"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"第一线程"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161822808.png" alt="image-20220410181521196"></p><h2 id="TIMED-WAITING"><a href="#TIMED-WAITING" class="headerlink" title="TIMED_WAITING"></a>TIMED_WAITING</h2><p>我们都知道CPU管理线程使用过描述加组织两种方式共同作用的.组识是通过双向链表的形式来完成的.双向链表不仅仅只有一个.</p><pre class=" language-c"><code class="language-c">public class MyThread <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// System.out.println("正在运行");</span>                    try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211512751.png" alt="image-20220421151257648"></p><h2 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h2><p>线程已经结束了,但是我们的对象还存在.</p><pre class=" language-c"><code class="language-c">public class MyThread <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// System.out.println("正在运行");</span>                    try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211515479.png" alt="image-20220421151523307"></p><h2 id="WAITING-amp-BLOCKED"><a href="#WAITING-amp-BLOCKED" class="headerlink" title="WAITING &amp; BLOCKED"></a>WAITING &amp; BLOCKED</h2><p>由于现在还不太好演示,我们这里就说一说他们的含义</p><ul><li>WAITING  线程中调用了wait,也会进入阻塞状态(死等),直到其他的把它的给唤醒</li><li>BLOCKED 是由于我们尝试给线程加锁,发现锁已经被其他的线程所占据了,线程也会进入阻塞状态.等待其他线程释放锁后被唤醒</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211530441.png" alt="image-20220421153002268"></p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>线程安全是我们多线程最重要也是最困难的地方,这在我们工作时经常会用到.我们先看一个例子来辅助我们初步理解线程安全.</p><p>我们使用两个线程分别对count自增5w次,看一看是不是我们能得到count &#x3D; 10w的结果.</p><pre class=" language-c"><code class="language-c">class Count <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    public <span class="token keyword">int</span> count<span class="token punctuation">;</span>    public <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>public class TestDemo <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Count count <span class="token operator">=</span> new <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">50000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    count<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            @Override            public <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">50000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    count<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211723462.gif" alt="线程不安全"></p><p>很抱歉,我们执行了几次代码,都和我们的结果不一样,并且每次的结果还是不确定的.</p><h2 id="自增的原理"><a href="#自增的原理" class="headerlink" title="自增的原理"></a>自增的原理</h2><p>理解上面的线程不安全,我们需要知道了解++这种操作符的原理,自增会有三个步骤</p><ol><li>LOAD 把内存的值放到CPU中</li><li>ADD 再CPU中完成自增</li><li>SAVE 把自增的值再次放到内存中</li></ol><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211729607.gif" alt="自增"></p><h2 id="为何并发进程不安全"><a href="#为何并发进程不安全" class="headerlink" title="为何并发进程不安全"></a>为何并发进程不安全</h2><p>知道了上面自增的原理,我们大概就可可以明白一点了,由于我们让线程并发执行,线程与线程之间是<strong>抢占式执行</strong>,并且它是并发的.它极有可能存在下面这种情况.线程1的自增还没有执行完,线程2就开始执行LOAD，就会发生结果达不到10w.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211738100.gif" alt="并发自增"></p><h2 id="导致线程安全的原因"><a href="#导致线程安全的原因" class="headerlink" title="导致线程安全的原因"></a>导致线程安全的原因</h2><p>我们很烦那些结果不能确定的事情,要是我们代码结果错了,我们可以修改,但是像这些不确定的结果我们最难受.我们要尽可能的杜绝这些不安全的发生,<strong>多个线程修改同一个变量</strong> 就会导致线程不安全.我们要避免这种情况.</p><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>我们把一段代码想象成一个房间，每个线程就是要进入这个房间的人。如果没有任何机制保证，A进入房间之后，还没有出来；B 是不是也可以进入房间，打断 A 在房间里的隐私。这个就是不具备原子性的 .上面的自增就是不是原子性的,不保证原子性会给多线程带来什么问题.如果一个线程正在对一个变量操作，中途其他线程插入进来了，如果这个操作被打断了，结果就可能是错误的 .</p><p>我们可以给不是原子性的加上一个<strong>锁</strong>,就可以使它变成原子性了(后面博客会谈到).</p><h1 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h1><p>我们还是以自增来举例子,自增会出现LOAD,ADD,SAVE多个步骤,但是ADD要比LOAD,SAVE执行速度要快的多的多.当我们多次执行自增操作,编译器就自动优化了一部分逻辑,它把中间的LOAD,SAVE给我省略了,只保留最前面和最后面的.当我们使用多线程修改同一个变量时,这就会发生很大的不安全.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204211801912.gif" alt="内存可见性"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaWeb/02%20%E5%A4%9A%E7%BA%BF%E7%A8%8B01/"/>
      <url>/2022/06/24/Java/JavaWeb/02%20%E5%A4%9A%E7%BA%BF%E7%A8%8B01/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我们前面已经初步了解到了进程的基本知识，知道一个进程运行需要向内存申请资源。这些都是我们学习今天知识的基础。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>进程运行需要申请资源，结束需要释放资源。一次下来操作系统还可以接受。但是要是次数过多，我想谁也吃不消的。于是聪明的人类有提出一个叫作<strong>线程</strong>（Thread）的概念，所谓的线程，它的作用和进程差不多，有时我们也称它为“<strong>轻量级进程</strong>”。不过有下面几点优势。</p><ul><li>线程不需要开辟资源和释放资源，它是存在一个进程中的，和这个进程共用这片资源。</li><li>一个进程可以包含一个或多个线程。</li></ul><blockquote><p>在Linux中，我们进程也是用PCB来表示，我们发现下图最后的pid和第一个pid相同，属于同一个进程，可以认为这两个线程占据同一个空间。注意操作系统不认识进程和线程，只认PCB，创建一个进程&#x2F;线程就是创建一个PCB，我们也可以认为一个进程就是一个线程。</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204080942127.png" alt="image-20220408094248081"></p><h2 id="线程和进程关系"><a href="#线程和进程关系" class="headerlink" title="线程和进程关系"></a>线程和进程关系</h2><p>这是一个很经典的面试题，我们一定要会。</p><ul><li>一个进程可以包含一个多个线程</li><li>每个进程都有独立的内存空间（虚拟地址空间），进程包含的线程共用这一片空间</li><li>进程是操作系统分配空间的基本单位，线程是操作系统调度执行的基本单位。</li></ul><blockquote><p>线程和进程共享同一片资源的包含下面的几个方面</p></blockquote><ol><li>内存   (变量)</li><li>文件  (后面说)</li></ol><h2 id="线程和代码的关系"><a href="#线程和代码的关系" class="headerlink" title="线程和代码的关系"></a>线程和代码的关系</h2><p>一个线程就是一个代码的执行流，具体我们先不来了解。</p><h1 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h1><p>我们前面说了，线程的开辟与销毁是不需要空间的参与的，所以说一定程度上线程优于进程。我们希望计算机执行的速度越快越好，所以出现了两种方式。我们用例子举例，假如这里有100只🦃，我们的目的就是要吃这一百只🦃。我们怎么提高吃鸡的速度？</p><ol><li>多进程</li><li>多线程</li></ol><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081002650.png" alt="image-20220408100232605"></p><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>我们让两个滑稽老铁来分别吃鸡，给每个滑稽老铁一人一个屋子，每人50只🦃，这里就是多进程吃鸡。我们有两套桌子，两个房间，也就是开辟了两份资源，并且两个滑稽老铁互相看不到对方究竟吃了多少，这就是进程具有隔离性。</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081005422.png" alt="image-20220408100534369"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多线程有点浪费资源了，我们是不是可以让两个滑稽老铁在同一个房间吃鸡，这就是多线程。</p><p>我们只是创建一个滑稽老铁，没有开辟新的资源。</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081009765.png" alt="image-20220408100948705"></p><h3 id="线程数量过多"><a href="#线程数量过多" class="headerlink" title="线程数量过多"></a>线程数量过多</h3><p>我们希望速度越快越好，但是要是线程的速度太多了，就会有一定的问题。</p><ul><li>线程太多，频繁调度，开销太大</li><li>线程不安全</li><li>一个进程里面的一个线程出现异常并且操作系统没有看住的话，其他的线程也可能会出现异常</li></ul><blockquote><p>线程太多，频繁调度，开销太大,滑稽老铁吃着吃着就可能被挤出去了。</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081013807.png" alt="image-20220408101347726"></p><blockquote><p>安全性可能减低,两个滑稽老铁可能看上了同一个鸡大腿，他们有可能会打起来。</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081016206.png" alt="image-20220408101620137"></p><blockquote><p>一个进程里面的一个线程出现异常并且没有看住的话，其他的线程也可能会出现异常，某个滑稽老铁可能不开心，它抢不到桌子，掀桌子吧。</p></blockquote><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><p>说了这么多理论，我们要通过代码来进行实操。这里我使用的Java。在Java中，我们可以使用Thread这个类的对象可以表示操作系统的对象。如果说PCB是操作系统描述线程的方式，那么Thread就是代码描述线程的方式</p><h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><p>我们通过下面几种方式来创建一个进程。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Thread 是标准库里面的类</span><span class="token comment" spellcheck="true">// 常用方法我们继承这个类，</span><span class="token comment" spellcheck="true">//重写run方法</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello bit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081041059.png" alt="image-20220408104119008"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081042848.png" alt="image-20220408104216803"></p><h3 id="比较-thread-start-和-thread-run"><a href="#比较-thread-start-和-thread-run" class="headerlink" title="比较 thread.start();和 thread.run();"></a>比较 thread.start();和 thread.run();</h3><p>我们可能会感觉到疑惑，我之前使用thread.run();也可以得到上面的结果。为何要使用thread.start();呢？，它有什么区别啊？</p><ul><li>thread.start();会创建一个线程，和main方法所在的进程共同使用同一片资源</li><li>thread.run()没有创建新的线程.</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081050042.png" alt="image-20220408105000971"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081050028.png" alt="image-20220408105018967"></p><p>看到这里你可能还有些疑惑，不过不用当心。我们下面的代码可能会解决你一定的疑虑</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让这个线程休眠一段时间，暂时调离CPU</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//thread.start();</span>        thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让这个线程休眠一段时间，暂时调离CPU</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>我们使用thread.run();</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081115300.gif" alt="run"></p><blockquote><p>我们使用thread.start();</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081116975.gif" alt="start"></p><h2 id="创建线程的其他方法"><a href="#创建线程的其他方法" class="headerlink" title="创建线程的其他方法"></a>创建线程的其他方法</h2><p>我们还有其他的方式来创建线程，这些创建的本质都是一样的，都是通过Thread类来创建一个PCB，区别只是Java语法的区别</p><ul><li>使用一个Runnable接口,主要用于描述一个任务，需要重写run方法</li><li>继承Thread，重写run，使用匿名内部类，写的语法更简单一些，简称“语法糖”。厉害的人写出的可读性并不低</li><li>继承Runnable，重写run，使用匿名内部类</li><li>使用lambda表达式来表示要执行的任务</li></ul><blockquote><p>Runnable接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将一个实例作为参数 本质和第一种方法一样，都是告诉该线程的任务是什么</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>继承Thread，重写run，使用匿名内部类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//相当于创建了一个 内部类，这个类继承了 Thread</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//任务</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>继承Runnable，重写run，使用匿名内部类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081220336.png" alt="image-20220408122007196" style="zoom:150%;" /><blockquote><p>使用lambda表达式来表示要执行的任务</p></blockquote><p>lambda本质是一个匿名函数，由于Java当中，方法与类不能够脱离，所以我们就把lambda做成了一个接口，这是很简单的一种做法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让这个线程休眠一段时间，暂时调离CPU</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="查看线程"><a href="#查看线程" class="headerlink" title="查看线程"></a>查看线程</h2><p>我们是不是可以看一看自己创建的线程，JDK是允许的，在JDK中有一个叫jconsole可以帮助我们，当然IDEA也是可以的，jconsole的作用很大，当我们写的程序崩溃的时候，我们可以通过jconsole来检查</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让这个线程休眠一段时间，暂时调离CPU</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//thread.start();</span>        thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让这个线程休眠一段时间，暂时调离CPU</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>运行thread.run();</p></blockquote><p>我们可以发现有很多线程，其中第一个就是main的线程。其他的线程都是一些内置的，我们不用管</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081301019.gif" alt="多线程mian"></p><blockquote><p>运行thread.start();，得到了一个Thread的线程</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081306385.gif" alt="多线程mian_1"></p><h2 id="多线程的优势"><a href="#多线程的优势" class="headerlink" title="多线程的优势"></a>多线程的优势</h2><p>我们使用多线程就是为了使CPU执行的速度的快一点那，我们用例子来看看。</p><p>假如我们要对数字a,b分别自增1亿次，我们可以比较一下使用单线程和多线程的时间差别</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 串行     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            b<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serial time = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 并发     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">multiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    a<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    b<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 线程阻塞</span>            t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiThread() time = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">serial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">multiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204101710882.png" alt="image-20220410171027783"></p><p>我们会发现并发式大概是串行的一半，不过他会大于一半的，因为线程运行也需要一定的时间</p><h1 id="认识Thread类"><a href="#认识Thread类" class="headerlink" title="认识Thread类"></a>认识Thread类</h1><p>我们刚才使用了很多Thread类，不认识认识就有点说不过了。现在让我们开启这篇博客最后的篇章。Thread类里面究竟有什么方法和属性。我们可以看看IDEA中一部分源码,下面的只是一部分,我们肯定不会学习这么多,只学习一部分比较常见的.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204101718635.png" alt="image-20220410171838521"></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>Thread提供了不少的的构造方法,我们一起来看看把</p><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Thread()</td><td align="center">分配一个新的 <code>Thread</code>对象。</td></tr><tr><td align="center">Thread(String name)</td><td align="center">分配一个新的 <code>Thread</code>对象。我们给这个对象命一个名字</td></tr><tr><td align="center">Thread(Runnable target)</td><td align="center">分配一个新的 <code>Thread</code>对象。</td></tr><tr><td align="center">Thread(Runnable target,String name)</td><td align="center">分配一个新的 <code>Thread</code>对象。</td></tr></tbody></table><h2 id="属性-amp-获取方法"><a href="#属性-amp-获取方法" class="headerlink" title="属性&amp;获取方法"></a>属性&amp;获取方法</h2><p>和上面一样,我们也见一见常见的方法.</p><table><thead><tr><th align="center">属性</th><th align="center">获取方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ID</td><td align="center">getId()</td><td align="center">ID是一个线程的标识符,不同的线程的表示符不同</td></tr><tr><td align="center">名称</td><td align="center">getName()</td><td align="center">得到我们给线程定的名字,如果没有就是Thread-N(N是一个常数)</td></tr><tr><td align="center">状态</td><td align="center">getState()</td><td align="center">辅助调用线程</td></tr><tr><td align="center">优先级</td><td align="center">getPriority()</td><td align="center">和内核中的PCB并不完全相同</td></tr><tr><td align="center">是否后台线程</td><td align="center">isDaemon()</td><td align="center">创建的线程默认不是后台线程</td></tr><tr><td align="center">是否存活</td><td align="center">isAlive()</td><td align="center">内核中的PCB是否还在</td></tr><tr><td align="center">是否被中断</td><td align="center">isInterrupted()</td><td align="center">判断线程是不是被中断</td></tr></tbody></table><h3 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h3><p>每一个线程都有一个属于自己的ID，类似身份证.我们可以通过代码查看</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo4</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"第一线程"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204101737082.png" alt="image-20220410173747039"></p><h3 id="getName"><a href="#getName" class="headerlink" title="getName()"></a>getName()</h3><p> 为何要给Thread给一个名字啊,主要是方便调试,要是线程的名字太多了,给一个名字可以帮助我们很快的找到我们要调试的线程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"第一线程"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Thread t3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204101736473.png" alt="image-20220410173634422"></p><h3 id="getState"><a href="#getState" class="headerlink" title="getState()"></a>getState()</h3><p>线程和进程是一样的,都存在一定的状态,是不是启动线程了,又或者线程是不是在等待?这些都是线程的状态,getState()就可以得到线程此时的状态.</p><h3 id="getPriority"><a href="#getPriority" class="headerlink" title="getPriority()"></a>getPriority()</h3><p>这个和进程的优先级类似,一个进程的可能存在多个线程的PCB，优先级决定哪个PCB会先被调度</p><h3 id="isDaemon"><a href="#isDaemon" class="headerlink" title="isDaemon()"></a>isDaemon()</h3><p>关于后台线程我们需要知道这一点就可以了,JVM会在一个进程的所有非后台线程结束后才结束</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hehhehhe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161726384.png" alt="image-20220416172632215"></p><h3 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h3><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204161740331.png" alt="image-20220416174059182"></p><h3 id="isInterrupted"><a href="#isInterrupted" class="headerlink" title="isInterrupted()"></a>isInterrupted()</h3><p>isInterrupted()  可以判断线程是不是被中断了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaWeb/01%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
      <url>/2022/06/24/Java/JavaWeb/01%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>我们已经学了Java的基础语法部分，感觉自己已经很厉害了。不过我想问一下大家，java可以做什么？我们学习Java有两大主要的作用 。</p></blockquote><ol><li>开发网站后台</li><li>手机app  （安卓）</li></ol><p>这两个方向有很大的区别，我现在主要学的是第一个方向。需要完成我们的目标，还有学习JavaEE的知识，这也是一个很大的模块，我先说一下我们的JavaEE都要学什么。</p><blockquote><p>初阶</p></blockquote><ol><li>系统和网络的原理知识  线程 IO 网路</li><li>前端基础 HTML CSS JavaScript  目的是为了做出一个网页（界面）</li><li>后端基础  核心 Tomcat&#x2F;Servlet （Java开发服务器的基本组件）</li></ol><p>学习这些知识，我们就可以做出一基础的网站 ，例如博客系统这些。</p><blockquote><p>进阶</p></blockquote><p><strong>Spring</strong>  也是一种Java开发服务器的基本组件，比Servlet要复杂一些，是我们工作中使用的</p><h1 id="计算机是如何组成的"><a href="#计算机是如何组成的" class="headerlink" title="计算机是如何组成的"></a>计算机是如何组成的</h1><p>说了这么多，我们还是要开始今天的主要内容，计算机是如何组成的这是我们学习的基础，所以这理我们一定要了解。</p><h2 id="计算机的发展历程"><a href="#计算机的发展历程" class="headerlink" title="计算机的发展历程"></a>计算机的发展历程</h2><p>1945年出现了第一个真正意义上的计算机 ：埃尼亚克，距今仅仅70多年。它的出现带给社会很大的变化。我们都知道发明计算机就是为了军事用途，计算弹道轨迹。</p><h2 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h2><p>学习计算机就绕不开这个知识点，我们需要有一个基本的了解。</p><blockquote><p>冯诺依曼体系结构包含 以下几个部分，其他的组件都是在这个基础上发展的</p></blockquote><ul><li>CPU</li><li>存储器(内存 和 外存)</li><li>输入设备</li><li>输出设备</li></ul><p>我们有的时候会看到自己的电脑上存在一个叫GPU(显卡),这个为何不存在冯诺依曼体系结构中呢?实际上,我们上面所说的都是计算机必不可少的部分,GPU有没有都一样.</p><h3 id="浅谈CPU"><a href="#浅谈CPU" class="headerlink" title="浅谈CPU"></a>浅谈CPU</h3><p>这个可以是人类科技的最巅峰的表现,不过现在CPU不是很贵.我们来看看我电脑的CPU,不是很好</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204061825367.png" alt="image-20220406182559311"></p><h4 id="主频"><a href="#主频" class="headerlink" title="主频"></a>主频</h4><p>下面我标记的就是主频,他衡量的CPU执行素的的快慢,数字越大,执行速度越快</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204061825632.png" alt="image-20220406182514410"></p><p>谈到这我们就可以说一下摩尔定律了(不是我们化学上的那个),他的大概意思是每隔18个月,我们芯片(CPU)的集成算力就提升一倍,这是一个经验规律.这是由intel公司的一个联合创始人摩尔提出的.现在这个规律已经濒临失效了.我们芯片单个计算单元到了一个瓶颈了,我们可以把计算单元做的很小,但是不能够做的无限小.现在的量子计算机可能会打破这一瓶颈.</p><h5 id="说一下GPU"><a href="#说一下GPU" class="headerlink" title="说一下GPU"></a>说一下GPU</h5><p>GPU就是我们所说的显卡,他和CPU的功能是一样的,只不过是专业方向的芯片,CPU是通用性的</p><h4 id="计算单元"><a href="#计算单元" class="headerlink" title="计算单元"></a>计算单元</h4><p>一个CPU包含了很多基本的计算单元,这些计算单元就是一个个<strong>门电路</strong>.</p><blockquote><p>所谓的门电路就是针对一个比特位进行逻辑运算</p></blockquote><ol><li>非门</li><li>与门</li><li>或门</li><li>异或门</li></ol><p>这些门的运算和我们之前学习的逻辑或…是一样的</p><h5 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h5><p>CPU 里面有一个核心的组件,就是ALU,它是由上面的门电路组成的,ALU由加法器和逻辑判断组成</p><h5 id="半加器-amp-全加器"><a href="#半加器-amp-全加器" class="headerlink" title="半加器 &amp; 全加器"></a>半加器 &amp; 全加器</h5><ul><li>半加器  两个比特位</li><li>全加器 三个比特位</li></ul><p>我们可以通过半加器和全加器就可以构建一个加法器了,要知道我们计算机中的加减乘除都是通过加法来实现的.</p><blockquote><p>半加器是计算两个比特位的运算,看看是不是要进位</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204061852053.png" alt="image-20220406185247930"></p><blockquote><p>全加器 是计算三个比特位的运算,看看是不是要进位</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204061855068.png" alt="image-20220406185512912"></p><blockquote><p>通过半加器和全加器我们就可以构建出一个8位加法器,</p></blockquote><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204061858542.png" alt="image-20220406185859394" style="zoom: 150%;" /><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>存储器包含内存和外存,这里我要说明一下,平时我们买手机说的128g内存,这里的内存指的是外存</p><ol><li>内存  我们所说的运行内存                  </li><li>外存  平时所说说的硬盘  软盘 U盘</li></ol><blockquote><p>区别内存和外存的方法</p></blockquote><ul><li>内存一般小 ,外存大</li><li>内存运行速度快,外存慢,(差3到4的数量级)</li><li>内存贵,外存便宜  外存大概1G 1元,内存我就不太了解了,大家可以查一下</li><li>内存断电数据消失,外存不会</li></ul><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>我想重点说一下内存,内存有一个很重要的特点: 支持随机访问,随心所欲访问任意地址的数据,指哪打哪.当然外存也有随机访问,不过开销大很多,更擅长顺序访问.</p><p>这里我要提醒一下大家,不只有内存和外存可以存储数据,CPU上面也可以(寄存器),寄存器空间更小,价格更贵,速度更快</p><h1 id="计算机是如何工作的"><a href="#计算机是如何工作的" class="headerlink" title="计算机是如何工作的"></a>计算机是如何工作的</h1><p>我们学习的Java,C&#x2F;C++…语言,写出的代码都是通过编译器&#x2F;解释器,转换成一系列的CPU可以识别的指令，代码是跑在CPU上的．上面我们说的都是硬件部分，下面谈谈软件部分.</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>操作系统(OS)是一个软件,例如我们的windows,操作系统是一个搞管理的软件,所谓的管理,包含<strong>描述和组织</strong></p><ol><li>管理硬件设备 例如 鼠标</li><li>管理软件资源  例如 文件  进程 (很重要)</li></ol><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204062034874.png" alt="image-20220406203422810" style="zoom:150%;" /><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程是我们学习的一个很重要的概念,他还有一个名字 叫做 “任务”,对于操作系统来说，一个任务就是一个进程（Process).进程就是计算机完成一个工作的过程.</p><p>进程是很具体的,就是正在运行的程序.</p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204062039694.png" alt="image-20220406203936629" style="zoom:150%;" /><h2 id="如何管理一个进程"><a href="#如何管理一个进程" class="headerlink" title="如何管理一个进程"></a>如何管理一个进程</h2><p>运行一个进程,需要系统给分配硬件资源,包含CPU,内存,网络带宽等等,换句话说&#x3D;&#x3D;进程是系统分配资源的基本单位&#x3D;&#x3D;,刚才我们说了,,所谓的管理,包含<strong>描述和组织</strong>,对于进程也是如此.</p><ul><li>组识  PCB（Process Control Block）</li><li>描述  使用双向链表</li></ul><h3 id="描述-PCB"><a href="#描述-PCB" class="headerlink" title="描述(PCB)"></a>描述(PCB)</h3><p>本质是一个结构体,一个结构体对象就是一个进程,使用一定的数据结构来组织,常见的作法是双向链表,</p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204062220371.png" alt="image-20220406222055251" style="zoom:150%;" /><p>创建一个进程就是新增一个节点,结束一个进程就是删除一个节点</p><blockquote><p>这里说一下PCB里面都有那些属性，这些属性就类似于结构体里面的成员变量。其中前三个我们只需要了解就可以了，但是后面几个一定要熟悉，这是很重要的。</p></blockquote><ul><li>pid  进程的身份标识   </li><li>内存指针       描述这个进程使用的空间是哪个范围，</li><li>文件描述符表   描述这个进程都开那个文件，打开一个文件，就得到一个文件描述符</li><li>进程的状态</li><li>进程的优先级</li><li>进程的上下文</li><li>进程的记账信息</li></ul><blockquote><p>pid 进程的身份标识    类似我们的身份证，一个进程只有一个pid,也就是不同的进程有不同的pid</p></blockquote><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204071001244.png" alt="image-20220407100128129" style="zoom:150%;" /><h4 id="进程的调度"><a href="#进程的调度" class="headerlink" title="进程的调度"></a>进程的调度</h4><blockquote><p>我们刚才看到了自己电脑上面的所运行的进程，大概有数百个，那么我们就疑惑了我们的电脑只有一个8核CPU，所谓的一个8核CPU就是把8个CPU打包在一起成为一个CPU。就是8个CPU可以同时干活。那么就算8个一起工作，也只能运行8个进程。但是进程那麽多？可谓狼多肉少。现在我们的电脑支持多任务系统，你可以既浏览网页，又可以给朋友发信息，甚至可以开着音乐，我们感觉这些程序是一直同时运行在我们的电脑上的。这个功能就是基于进程的调度完成的。就是海王可以同时交往多个朋友，但是他的朋友一个朋友却以为它属于自己一人，完成这些需要时间管理。进程也是如此。</p></blockquote><ul><li>进程的状态          就绪态(R) ,睡眠态(S),结束态(X)…</li><li>进程的优先级      安排时间表的时候，优先给哪个进程安排</li><li>进程的上下文      需要记住上次进程运行到哪里了，再次调度的可以继续  就是存档和读档，信息存在寄存器中，方便下次调用，进程本身感受不到调度</li><li>进程的记账信息   记录进程何时上CPU，何时下，执行了多久。用来辅助</li></ul><blockquote><p>我们人类的反应时间可能会有一定的大，操作系统管理进程有下面两种方式.我们真实的计算机是这两种方式同时进行的。</p></blockquote><ul><li>并发式    一会运行进程A，一会进程B，一会进程C…由于CPU速度快，宏观上是运行多个进程，微观是一个</li><li>并行时    多个CPU运行多个程序，CPU１运行进程１，CPU２运行进程２… 宏观和微观都是多个</li></ul><h4 id="何时调度"><a href="#何时调度" class="headerlink" title="何时调度"></a>何时调度</h4><p>我们什么时候把一个进程调度到CPU，何时下CPU，对于进程来说它是感知不到的，执行任何指令都有可能会令进程进入CPU，这就给系统带来一定的隐患。有时我们的代码是正确的，但是由于调度的不恰当也会有问题</p><h2 id="进程的虚拟地址空间"><a href="#进程的虚拟地址空间" class="headerlink" title="进程的虚拟地址空间"></a>进程的虚拟地址空间</h2><p>我们在C语言中学习了虚拟地址空间，进程是要占用内存资源的，我们需要给他们分配一定的资源。对于原始的操作系统来说，多个进程可能按实际内存进行分配，但是对于进程A，他极有可能会越过自己的空间，不小心修改了进程B的内容，这是极大的不安全。现在的操作系统加入一个虚拟的空间，用来作安全检测。使得进程与进程之间隔离空间变大了，安全性提高了</p><ul><li>优点   安全</li><li>缺点  进程与进程的配合有些困难，需要特殊手端，例如文件、 管道</li></ul><p>这就像给学生编号一样，一班的同学有1号同学，二班的同学也有1号同学，但是这两个同学不是同一个学生</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204072233376.png" alt="image-20220407223314208"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/Untitled/"/>
      <url>/2022/06/24/Java/JavaSE/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/13%20%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/06/24/Java/JavaSE/13%20%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/12%20String%E7%B1%BB/"/>
      <url>/2022/06/24/Java/JavaSE/12%20String%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/11%20Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2022/06/24/Java/JavaSE/11%20Java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天我们来看看Java中的内部类,这个内容应该放在数据结构那里来说,因为对于语法而言,现在的一般都够用了.但是我把它放在这里也是为了更好的复习.</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>什么是内部类?我们先来看看,在之前我们定义的所有类都是外部类.区别于外部类,内部类是定义在方法等里面的类,大概分为三种.</p><ul><li>本地内部类    存在方法中</li><li>实例内部类    存在 类中   有内外类之分</li><li>静态内部类</li></ul><h2 id="本地内部类"><a href="#本地内部类" class="headerlink" title="本地内部类"></a>本地内部类</h2><p>本地内部类 定义在方法中,只能在该方法中使用,我们平常不用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="实例内部类"><a href="#实例内部类" class="headerlink" title="实例内部类"></a>实例内部类</h2><p>实例内部类是定义在一个类里面,它的地位和成员变量与方法大致相同.我们可以把他当作外部类的一个实例成员.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205212149696.png" alt="image-20220521202634704"></p><h3 id="实例内部类的特性"><a href="#实例内部类的特性" class="headerlink" title="实例内部类的特性"></a>实例内部类的特性</h3><p>我们需要看看实例内部类的一些特性,更好的研究.</p><ul><li>存有构造方法,普通方法,不能存在静态成员方法</li><li>不可以定义一个静态的成员变量  可以是final  静态的常量</li></ul><h3 id="如何实例化一个实例内部类"><a href="#如何实例化一个实例内部类" class="headerlink" title="如何实例化一个实例内部类"></a>如何实例化一个实例内部类</h3><p>既让实例内部类存在构造方法,那我们该如何实例化一个对象呢.这个语法大家可能会感到陌生,记住就可以了.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个实例内部了不带参数的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        OutClass outClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> outClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  实例化 实例内部类 </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205212149730.png" alt="image-20220521204358562"></p><h3 id="继承其他类或者实现接口"><a href="#继承其他类或者实现接口" class="headerlink" title="继承其他类或者实现接口"></a>继承其他类或者实现接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个实例内部了不带参数的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个实例内部了不带参数的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="外部类继承一个实例内部类"><a href="#外部类继承一个实例内部类" class="headerlink" title="外部类继承一个实例内部类"></a>外部类继承一个实例内部类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个实例内部了不带参数的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token keyword">extends</span> <span class="token class-name">OutClass<span class="token punctuation">.</span>InnerClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TestDemo</span><span class="token punctuation">(</span>OutClass outClass<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        outClass<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        OutClass outClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> outClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="内部类的应用"><a href="#内部类的应用" class="headerlink" title="内部类的应用"></a>内部类的应用</h3><p>链表的时候 Node</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/10%20Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%20&amp;%20%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/06/24/Java/JavaSE/10%20Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%20&amp;%20%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我们要来学习一些更加抽象的东西了，我们学习了多态，知道了什么是动态绑定，不过这还不够，我们一起来看看抽象类,同时我们一起学习什么是接口</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>看看下面的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印一个🔺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们在多态里面看到了这个代码，发现class shape里面的draw方法没有用，我们是不是可以不实现这个方法，就把它声明一下，我们在Java中是可以做到的，这就是抽象方法。我们需要abstract来修饰(在访问修饰限定前后都一样)</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>包含抽象方法的类是类,记住是包含,不是所有</p></blockquote><h2 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h2><ol><li>抽象类不能实例化,它生来就是要被继承的</li><li>抽象方法不能是 private 的  </li><li>抽象类里面可以存在普通成员和方法</li><li>一个<strong>普通类</strong>继承了抽象类,必须重写所有的抽象方法</li><li>抽象类仍然可以发生向上转型</li><li>一个抽象类A继承了抽象类B,那么这个抽象类B的抽象方法可以重写,要是这个A才被抽象类继承,抽象类要重写A和B中所有的抽象方法</li><li>抽象类不能被final修饰,也就是抽象方法也不能不被继承</li></ol><blockquote><p>抽象类不能实例化</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272033387.png" alt="image-20220327203344305"></p><blockquote><p>一个普通类继承了抽象类,必须重写所有的抽象方法</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272042075.png" alt="image-20220327204214032"></p><p>说到这里,抽象类还有一些很古怪的特点,我们一起来看看吧.要是一个抽象类继承了一个抽象类会怎们样?</p><p>不会发生报错</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272044716.png" alt="image-20220327204425676"></p><p>不过要是一个抽象类A继承了抽象类B,那么这个抽象类B的抽象方法,要是这个A才被抽象类继承,抽象类要重写A和B中所有的抽象方法</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272049143.png" alt="image-20220327204909090"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272049275.png" alt="image-20220327204933234"></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是抽象类的更进一步. 抽象类中还可以包含非抽象方法, 和字段. 而接口中包含的方法都是抽象方法, 字段只能包含静态常量  </p><p>接口有是比抽象类还要抽象的知识,我们来看看吧</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>要是一个类都是抽象方法,这个类我们可以定以成一个接口</p></blockquote><h2 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h2><p>接口使用interface修饰的,下面就是一个接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IShape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li>interface 修饰</li><li>接口当中的普通方法,不能有具体方法的实现,要是非要有,必须加一个&#x3D;&#x3D;default&#x3D;&#x3D;来修饰</li><li>可以存在静态成员变量,但是必须初始化,也就是静态常量,其中  final  和   static  都可以省略</li><li>接口可以存在static修饰的方法</li><li>接口里面所有的方法都是public的,可以省略,抽象方法还可以继续省略abstract</li><li>不可以实例化,但是可以向上转型</li><li>类和接口之间的关系是通过implements实现</li><li>普通类必须重写接口所有的&#x3D;&#x3D;抽象&#x3D;&#x3D;方法,&#x3D;&#x3D;default&#x3D;&#x3D;修饰的不用,当然这种也可以重写</li><li>普通类重写接口的&#x3D;&#x3D;抽象&#x3D;&#x3D;方法,访问修饰限定符必须是 public</li><li>一个类可以通过extends继承一个类或者抽象类,但是implements实现多个接口,接口之间 使用逗号隔开.</li><li>接口与接口之间之间是extends关系,意味拓展,也要”父债子尝”</li></ol><blockquote><p>interface 修饰</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272119502.png" alt="image-20220327211911470"></p><blockquote><p>类和接口之间的关系是通过implements实现</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272117094.png" alt="image-20220327211706055"></p><blockquote><p>可以存在成员变量,但是必须初始化,默认是有public static final,可以省略</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272123599.png" alt="image-20220327212355561"></p><blockquote><p>一个类可以通过extends继承一个类或者抽象类,但是implements实现多个接口,接口之间 使用逗号隔开</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IB</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">,</span>IB <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272133819.png" alt="image-20220327213328763"></p><blockquote><p>接口与接口之间之间是extends关系</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203272137471.png" alt="image-20220327213703432"></p><h1 id="常见的三个接口"><a href="#常见的三个接口" class="headerlink" title="常见的三个接口"></a>常见的三个接口</h1><p>这个博客的内容有点少,所以我把三个我们平常使用的接口放到了这里.</p><h2 id="Comparable-接口"><a href="#Comparable-接口" class="headerlink" title="Comparable 接口"></a>Comparable 接口</h2><p>对于自定义类型,我们该如何调用  sort  函数,我们需要需要自己在类实现Comparable接口,并且重写compareTo方法.这种对类的浸入性很大</p><p>记住  compareTo  比较的结果  </p><ul><li>&lt; 0   是升序</li><li>&#x3D;&#x3D; 0  是不交换</li><li>&gt; 0   是降序</li></ul><h2 id="Comparator比较器"><a href="#Comparator比较器" class="headerlink" title="Comparator比较器"></a>Comparator比较器</h2><p>这个比上面的那个好多了,我建议使用这一个,对类的浸入性并不强.</p><p>定义一个类实现该接口,重写里面的compare方法.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AgeComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student o1<span class="token punctuation">,</span> Student o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Clonable-接口"><a href="#Clonable-接口" class="headerlink" title="Clonable 接口"></a>Clonable 接口</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  实现  拷贝接口</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token comment" spellcheck="true">//重写方法</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Student&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202205212005527.png" alt="image-20220521200541122"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/09%20Java%E4%B9%8B%E5%A4%9A%E6%80%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/24/Java/JavaSE/09%20Java%E4%B9%8B%E5%A4%9A%E6%80%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>博客写到这里,我们可以说对Java语法有了初步的了解了,多态是三大特点里面最抽象的形式.我们需要一点点来了解.</p><h1 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h1><p>我们不是要学习多态吗?,向上转型是什么玩意儿,这是我们学习多态的基础.&#x3D;&#x3D;向上转型就是父类引用子类的对象&#x3D;&#x3D;.</p><p>在谈这之前,我们需要知道什么是上,什么是下.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271552076.png" alt="image-20220327155228942"></p><p>用代码来表示就是</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这就是向上转型  </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><h2 id="发生向上转型的方式"><a href="#发生向上转型的方式" class="headerlink" title="发生向上转型的方式"></a>发生向上转型的方式</h2><p>发生向上转型的方式有以下三种方式</p><ol><li>直接赋值</li><li>函数传参</li><li>作为函数的返回值</li></ol><p>下面我们一一举例</p><h3 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h3><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父类 引用 子类</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><blockquote><pre class=" language-Java"><code class="language-Java">class Animal &#123;&#125;class Dog extends Animal&#123;&#125;public class TestDemo &#123;    public static void func(Animal ani) &#123;            &#125;    public static void main(String[] args) &#123;        Dog dog = new Dog();        func(dog);    &#125;&#125;</code></pre></blockquote><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><blockquote><pre class=" language-Java"><code class="language-Java">public static Animal func(Animal ani) &#123;        Dog dog = new Dog();        return dog;    &#125;</code></pre></blockquote><h2 id="向上转型的注意事项"><a href="#向上转型的注意事项" class="headerlink" title="向上转型的注意事项"></a>向上转型的注意事项</h2><p>父类引用子类的对象后,只能够使用父类里面的字段和方法,我们要注意这一点</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271733736.png" alt="image-20220327173305697"></p><blockquote><p>要是父类和子类都存在一个相同的字段,通过父类的引用这个字段出现的父类的字段</p></blockquote><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271808707.png" alt="image-20220327180820652"></p><h2 id="向上转型的作用"><a href="#向上转型的作用" class="headerlink" title="向上转型的作用"></a>向上转型的作用</h2><p>出现一个事物肯定是这个有用,我们来说说向上转型的作用,我们看看下面的代码</p><p>我们可以很容易的得出结果,很简单</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"，今年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271722840.png" alt="image-20220327172227786"></p><p>那要是下面的代码呢?我们就很疑惑了</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> String name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"，今年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子类中的eat方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271725650.png" alt="image-20220327172525598"></p><blockquote><p>这就是动态绑定,这是我们多态的核心,下面我会说一下为何会先这种情况</p></blockquote><h1 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h1><p>说到动态绑定,我还是更喜欢叫他<strong>运行时绑定</strong>,我们对于上面现象可能会感觉到新奇,多态的出现大大优化了我们使用代码的能力.</p><p>使用动态绑定需要满足一下条件</p><ol><li>父类引用子类的对象</li><li>子类中存在重写的方法</li></ol><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>我记得不久前我们看过函数的重载,这里的重写的形式一样,但是内含完全不一样,所谓的重写就是我们重新在子类中再次些父类中的方法,上面的eat方法就是重写</p><p>重写也要满足一定的要求</p><ol><li>父类和子类都有</li><li>方法名相同</li><li>参数类型和数量一样</li><li>返回类型也相同,但是要是返回类型构成<strong>协变类型</strong>,也可以有那么稍稍不同,注意一下就可以了</li><li>子类中的访问修饰限定符 的权限&gt;&#x3D; 父类的 </li><li>普通方法可以重写, static 修饰的静态方法不能重写</li></ol><h2 id="为何叫动态绑定"><a href="#为何叫动态绑定" class="headerlink" title="为何叫动态绑定"></a>为何叫动态绑定</h2><p>我们为何取这个名字,为啥不叫阿猫阿狗,这是有原因的,我们反编译一下(如何编译不用了解)</p><blockquote><p>我们很疑惑,调用的明明是父类里面的eat方法,为什么打印出的结果和我们想的不一样,这就是动态绑定,也就是说,动态绑定是在运行代码的时候出在的,也叫运行时绑定</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271750694.png" alt="image-20220327175034637"></p><h2 id="存在静态绑定吗"><a href="#存在静态绑定吗" class="headerlink" title="存在静态绑定吗"></a>存在静态绑定吗</h2><p>存在的,我们之前学的函数重载就是静态绑定</p><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>抱歉,有向上转型,那就有向下转型,就是子类对父类的引用,不过我们并不建议这么做,会出现一定的风险</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Bird</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"，正在飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token string">"feie"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bird bird <span class="token operator">=</span> <span class="token punctuation">(</span>Bird<span class="token punctuation">)</span> animal<span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271836819.png" alt="image-20220327183635686"></p><h1 id="理解多态"><a href="#理解多态" class="headerlink" title="理解多态"></a>理解多态</h1><p>到这里,我们就可以很容易理解多态了,我们使用多态就要依赖动态绑定和重写方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印一个🔺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Round</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印一个⚪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Shape shape1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shape1<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shape shape2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shape2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271850747.png" alt="image-20220327185036550"></p><p>&#x3D;&#x3D;下面的代码就可以很好的表示多态的优点&#x3D;&#x3D;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawMap</span><span class="token punctuation">(</span>Shape shape<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        shape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">drawMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271853299.png" alt="image-20220327185334161"></p><blockquote><p>多态的好处</p></blockquote><ol><li>封装使得代码的安全性提高</li><li>多态的核心都是让调用者<strong>不必关注对象的具体类型</strong>  ,这是降低用户使用成本的一种重要方式</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/08%20Java%E4%B9%8Bsuper%E4%B8%8Ethis%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/06/24/Java/JavaSE/08%20Java%E4%B9%8Bsuper%E4%B8%8Ethis%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>简单说一下Java语言中super关键字与this关键字的作用，看看他们的特点</p></blockquote><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><blockquote><p>作用 ：this代表当前对象的引用</p></blockquote><ul><li>this.data: 访问当前类的属性</li><li>this.func(): 访问本类的其他成员方法</li><li>this(): 调用本类其他的构造方法</li></ul><h3 id="this-data"><a href="#this-data" class="headerlink" title="this.data"></a>this.data</h3><blockquote><p>当我们类中方法的参数名与字段名相同时，我们通过this.data 来代表是字段，当然如果名字不同时，字段也可以不加this，不过我们代码风格要求尽量使用this,我们要风格给用好</p></blockquote><blockquote><p>带有this</p></blockquote><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this.name表示字段</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://img-blog.csdnimg.cn/d6993828a72c48f2bf3b1b17071f8c71.png" alt="在这里插入图片描述"></p><blockquote><p>不带this</p></blockquote><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://img-blog.csdnimg.cn/0cdba56ea34749d7a54fe76e9ed8c360.png" alt="在这里插入图片描述"></p><h3 id="this-func"><a href="#this-func" class="headerlink" title="this.func()"></a>this.func()</h3><blockquote><p>这个没什么好说的，代码风格</p></blockquote><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 和eat();逻辑一样，最好带上</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://img-blog.csdnimg.cn/3145569910354736a8b9b18f5491b2c1.png" alt="在这里插入图片描述"></p><h3 id="this"><a href="#this" class="headerlink" title="this()"></a>this()</h3><blockquote><p>这个就要求的就有些多了，我们仔细看看</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>我来说几个重要的点</p></blockquote><ol><li>构造方法可以自动生成一个不带参数的构造方法</li><li>this（）在一个构造方法中可以调用另一个，该代码在首行,这个首行使代码行的首行</li></ol><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><blockquote><p>作用：代表对父类的引用</p></blockquote><ul><li>super(): 调用父类的构造方法</li><li>super.data: 访问父类的属性</li><li>super.func(): 访问父类的方法</li></ul><h3 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h3><blockquote><p>子类new一个对象时，要先帮助父类进行构造，否则会报语法错误，这就是super()的作用</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"mimi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2995feb7640047739cebd35ec467d52c.png" alt="在这里插入图片描述"></p><blockquote><p>这个我也说一下</p></blockquote><ol><li>super()也是只能存在首行</li></ol><h3 id="super-data"><a href="#super-data" class="headerlink" title="super.data"></a>super.data</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/682c2b56f23e4b7182d1b07646850f9d.png" alt="在这里插入图片描述"></p><h3 id="super-func"><a href="#super-func" class="headerlink" title="super.func()"></a>super.func()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示调用</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cat.fun();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0a72a73915774e8682541fa876dadb9f.png" alt="在这里插入图片描述"></p><h3 id="super总结"><a href="#super总结" class="headerlink" title="super总结"></a>super总结</h3><blockquote><p>你会发现，在super这里，我们都是在构造方法里面使用，实际上，&#x3D;&#x3D;如果在<strong>方法</strong>外，注意使成员方法内,不仅仅使构造方法.会出现语法错误&#x3D;&#x3D;,this也一样</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只能在方法里面</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/b3d8ad51c28b41ffabc2f32ebbd941b6.png" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>this和super都不能出现静态方法中</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271436941.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/07%20Java%E4%B9%8B%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/24/Java/JavaSE/07%20Java%E4%B9%8B%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>我们都知道OOP语言有很多特点，像我们说的三大特征：<strong>封装、继承、多态</strong>，今天主要说一下什么是<strong>继承</strong>，今天主要以Java语言来描述。顺带着我们把组合这个知识点说一下.</p></blockquote><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><blockquote><p>继承（英语：inheritance）是面向对象软件技术当中的一个概念。如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”。继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码。(来源：维基百科).</p></blockquote><blockquote><p>我举一个不太恰当的例子，当张三的父亲离世后，张三继承了父亲的遗产，这里张三就是”<strong>子类</strong>“，其父亲便是”<strong>父类</strong>“,张三拥有父亲的遗产，但是除此之外他可能也有自己的财富。</p></blockquote><h2 id="怎么继承"><a href="#怎么继承" class="headerlink" title="怎么继承"></a>怎么继承</h2><blockquote><p>谈到这里就不得不说一下关键字extends了,它就像一个遗书一样,他告知你可以使用他们的内容</p></blockquote><p>Derive 类继承了 Base</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> b <span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>一个人可以有很多的外号，在这里也适用</p></blockquote><p><img src="https://img-blog.csdnimg.cn/24d8384b55454a94b60b829d9529e6f8.png" alt="在这里插入图片描述"></p><h2 id="继承特点"><a href="#继承特点" class="headerlink" title="继承特点"></a>继承特点</h2><ul><li>一个子类只能有一个父类</li><li>一个父类可以有多个子类</li><li>继承关系可以多层，就像 爷爷 -&gt; 父亲-&gt;儿子，不过我们一般就3层（也叫多层继承）</li></ul><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><ul><li>问题：子类继承了父类的什么</li><li>回答：继承所有的字段和方法（除构造方法）</li></ul><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><ul><li>问题：刚才我们谈了我们可以继承字段和方法，那么如果方法是private修饰也会被继承吗?</li><li>回答：是的，不过大部分代码出现报错，原因是private修饰的类只能在本类中被引用，是你的代码有问题，实际上已经继承了.</li></ul><h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><ul><li>问题：要是子类和父类中的变量名或者是方法名相同，会报错吗？该怎么办？</li><li>回答：不会报错，优先选择子类的</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep()!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mimi"</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/eefa8c2f4bb74b5abafc16e8e31950ac.png" alt="在这里插入图片描述"></p><h2 id="继承作用"><a href="#继承作用" class="headerlink" title="继承作用"></a>继承作用</h2><blockquote><p>目的就是为了达到代码的复用，避免重复造轮子.下面我就以代码为例</p></blockquote><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>看一看，是不是很麻烦，但是通过继承，代码就会很简洁</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bird</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>口说无凭，我们用事实说话</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" eat()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mimi"</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/96f591fce6134cfa9420d7021e8da955.png" alt="在这里插入图片描述"></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><blockquote><p>这个是重点的知识，我们一定要弄清楚,关于构造方法的知识点,我有篇已经说过了,这里就不浪费大家的时间了</p></blockquote><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><blockquote><p>我们都知道如果我们自己不写构造方法，编译器会自动提供一个不带有参数的，但是我们要是写了，就不提供了</p></blockquote><ul><li>父类中有一个带有参数的构造方法，子类会报错,注意,如果是编译器默认生成的,或者是我们写的无参的构造函数,不会报错.</li></ul><p><img src="https://img-blog.csdnimg.cn/51c1437e539443928038952364a17b39.png" alt="在这里插入图片描述"></p><p>&#x3D;&#x3D;原因：子类在构造的时候要先帮助父类进行构造，但是上面我们没有做一点&#x3D;&#x3D;</p><h3 id="如何帮助父类构造"><a href="#如何帮助父类构造" class="headerlink" title="如何帮助父类构造"></a>如何帮助父类构造</h3><blockquote><p>使用 super关键字</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6775496f8e964c448dd4b9f20e30732c.png" alt="在这里插入图片描述"></p><p>具体的super内容我们可以看这篇 :point_right: <a href="https://blog.csdn.net/m0_61334618/article/details/122123625?utm_source=app&app_version=4.14.0&code=app_1562916241&uLinkId=usr1mkqgl919blen">super与this的比较</a></p><h3 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h3><ul><li>问：子类中可以存在父类中没有的构造方法吗</li><li>答：可以的</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>age <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/9355ae693f1a4fc28455e3c83ac000db.png" alt="在这里插入图片描述"></p><h3 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h3><ul><li>问：子类需要帮助父类构造几个构造方法</li><li>答：只要一个就行,只要使父类存在一个就可以了</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/9fabbbf807c64e21a9889a03dd070adf.png" alt="在这里插入图片描述"></p><h2 id="protected关键字"><a href="#protected关键字" class="headerlink" title="protected关键字"></a>protected关键字</h2><blockquote><p>前面我说个，但我们使用private修饰字段和方法时，我们不能在其他类中使用，要是使用public有违背我们封装的初衷，这就出现了protected关键字下面就这一点说一说</p></blockquote><p> 详情:point_right:<a href="https://blog.csdn.net/m0_61334618/article/details/122134261">四种访问权限关键字</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"mimi"</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/dd85139909ef494a9f52cf317535fa64.png" alt="在这里插入图片描述"></p><h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><p>组合和继承类似,都是可以是代码复用,是 has a 的关系.组合没有太多的语法.我们不常说,但是经常使用</p><blockquote><p>组合并没有涉及到特殊的语法(诸如 extends 这样的关键字), 仅仅是将一个类的实例作为另外一个类的字段.<br>这是我们设计类的一种常用方式之一  </p></blockquote><p>比如一个学校由学生和老师组成的,学生和老师都是学校的一部分,</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Teacher<span class="token punctuation">[</span><span class="token punctuation">]</span> teachers<span class="token punctuation">;</span>    <span class="token keyword">public</span> Student<span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/06%20Java%E4%B9%8B%E5%9B%9B%E7%A7%8D%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"/>
      <url>/2022/06/24/Java/JavaSE/06%20Java%E4%B9%8B%E5%9B%9B%E7%A7%8D%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>这个模块主要说一下在Java中四种访问权限的知识点，让我们更好的理解权限修饰符.</p></blockquote><h1 id="访问修饰限定符"><a href="#访问修饰限定符" class="headerlink" title="访问修饰限定符"></a>访问修饰限定符</h1><blockquote><p>我们知道的访问修饰限定符有四种,下面先认识一下</p></blockquote><ol><li>public 公有的</li><li>protected</li><li>private</li><li>default</li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote><p>包 (package) 是组织类的一种方式.<br>使用包的主要目的是保证类的唯一性</p></blockquote><blockquote><p>例如, 你在代码中写了一个 Test 类. 然后你的同事也可能写一个 Test 类. 如果出现两个同名的类, 就会冲突, 导致<br>代码不能编译通过.</p></blockquote><h3 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h3><blockquote><p>我们创建包就像 <a href="http://www.baidu.com/">www.baidu.com</a> 域名那样，不过我们要&#x3D;&#x3D;反过来&#x3D;&#x3D;</p></blockquote><p><img src="https://img-blog.csdnimg.cn/eed277ceb14f46ffb5d459eddc2cdb8a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/72a617fd794d452e93210a5b9bf60663.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/312ffa33ec664de5b2fbdd402ccf3362.png" alt="在这里插入图片描述"></p><blockquote><p>这样我们就创建好了，看一看</p></blockquote><p>在计算机上面的硬盘上,出现了文件夹</p><p><img src="https://img-blog.csdnimg.cn/38290c7104aa4b07b0e6109fee7a2dc2.png" alt="在这里插入图片描述"></p><p>IDEA会自动导入这个包. </p><p><img src="https://img-blog.csdnimg.cn/912e6fa6171844c0a9d81f56bc68c0f4.png" alt="在这里插入图片描述"></p><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>导入包分为下面两种,一个是导入我们自己创建的包,里一个就是导入已经封装好的,它们的方法是一样的.我们就说一种把</p><blockquote><p>Java有很多优点,其中之一就是我们封装了大量的方法,程序员们把他们存在一个包中上传到网上,后面又有人制定了标准,我们可以在IDAE中直接使用这些方法,避免我们重复造轮子.</p></blockquote><p>下面我们使用最常用的一个包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span></code></pre><p>我们使用import 导入一个类,这个类存在于java.util下面.这样我们就可以来使用这里面的方法了.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入java.util的包的Date类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到一个毫秒级别的时间戳</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/54b129d671a546fcaf1c242bed2babd2.png" alt="在这里插入图片描述"></p><blockquote><p>有人可能会说,这也太麻烦了,我还要找我们需要的是在包下的哪个类,有没有一些方法可以使我们只找到包,不找类呢?Java是允许的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>   </code></pre><p>我们加上一个* 就可以完成这些事了,我们要注意* 不是把包里面所有的都导入,而是我们代码使用了哪个类导入哪个类&#x2F;</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>关于包的导入我们可能要注意些问题,在不同的包中,我们可能出现类名一样的包,我们使用的时候一定要准确导入,和之前的方法就不一样,比如说下面的代码</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//具体导入包</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><h1 id="正式内容"><a href="#正式内容" class="headerlink" title="正式内容"></a>正式内容</h1><h2 id="public-公有的-amp-private-私有的"><a href="#public-公有的-amp-private-私有的" class="headerlink" title="public 公有的  &amp; private 私有的"></a>public 公有的  &amp; private 私有的</h2><blockquote><p>这个我们都知道，就不谈了，其中private修饰的只能在本类中访问,即使后面的子类也不可以调用</p></blockquote><h2 id="protected-受保护的"><a href="#protected-受保护的" class="headerlink" title="protected 受保护的"></a>protected 受保护的</h2><blockquote><p>当我们使用继承时，发现父类中private修饰的字段和方法我们无法使用，要是用public修饰，违背了我们封装的初衷，所以就出现了protected关键字</p></blockquote><blockquote><p>作用</p></blockquote><ul><li><p>在同一包同一类中使用</p></li><li><p>在同一包不同类中使用</p></li></ul><p><img src="https://img-blog.csdnimg.cn/323117d9b26645599ca791512a4aa6be.png" alt="在这里插入图片描述"></p><ul><li>不同包的子类</li></ul><p><img src="https://img-blog.csdnimg.cn/2caac92ca0204fb7ba81fb9844f1d277.png" alt="在这里插入图片描述"></p><h2 id="default-默认权限"><a href="#default-默认权限" class="headerlink" title="default 默认权限"></a>default 默认权限</h2><blockquote><p>首先声明一点，default不是权限修饰符，什么都没有，也就是“默认权限”</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认权限 -》什么修饰符都没有，叫做包访问权限</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>作用</p></blockquote><ul><li>在同一包同一类中使用</li><li>在同一包不同一类中使用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认权限 -》什么修饰符都没有，叫做包访问权限</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/a54949bed19244f4832b85b541f8ba01.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3f0779b7100a4d1b990c52b418708020.png" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>不用那么复杂，只需记住默认权限的事物只能在本包中使用就行了</p></blockquote><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><img src="https://img-blog.csdnimg.cn/94cd0c8b6b174b9189523fd15c50c6d5.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/05%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1(%E5%B0%81%E8%A3%85)/"/>
      <url>/2022/06/24/Java/JavaSE/05%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1(%E5%B0%81%E8%A3%85)/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>类和对象是OP语言的一个重要的知识点，抽象性很高，我们学习起来可能会有一些疑惑，今天我们好好谈谈这个知识点，若有错误，还请诸位斧正。</p></blockquote><h1 id="初阶"><a href="#初阶" class="headerlink" title="初阶"></a>初阶</h1><p>在初阶里面我们需要理解什么是类，如何实例化一个对象。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>  类（英语：class）在面向对象编程中是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的特性和方法。<br>  支持类的编程语言在支持与类相关的各种特性方面都多多少少有一些微妙的差异。大多数都持不同形式的类继承。许多语言还支持提供封装性的特性，比如访问修饰符。类的出现，为面向对象编程的三个最重要的特性（<strong>封装性、继承性、多态性</strong>），提供了实现的手段。      来源：（维基百科）</p></blockquote><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><p>在计算机科学中，对象（英语：object），台湾译作 “ 物件 “，是一个存储器地址，其中拥有值，这个地址可能有标识符指向此处。对象可以是一个变量，一个数据结构，或是一个函数。是面向对象（Object Oriented）中的术语，既表示客观世界问题空间（Namespace）中的某个具体的事物，又表示软件系统解空间中的基本元素。<br>在软件系统中，对象具有唯一的标识符，对象包括属性（Properties）和方法（Methods），属性就是需要记忆的信息，方法就是对象能够提供的服务。在面向对象（Object Oriented）的软件中，对象（Object）是某一个类（Class）的实例（Instance）。 来源：维基百科</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>类就是一个模子   我们根据这个模子来造东西</li><li>对象就是一个实体，我们通过模子构造出的实体</li></ul><h1 id="正式内容"><a href="#正式内容" class="headerlink" title="正式内容"></a>正式内容</h1><h2 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h2><p>我们来看看类的组成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      字段；（或者称 成员属性）      方法；<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>我们以一个例子来具体看看类的组成</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//允许赋值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//注意 在方法内部只可以定义局部变量</span>         <span class="token comment" spellcheck="true">// public int a = 10;  报错</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><blockquote><p>字段 又称 “成员变量”，像下面的  name、 age、size 就是字段，这里的的字段又分为两种</p></blockquote><ul><li>实例成员变量   未用static修饰</li><li>静态成员变量   用static修饰</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String name<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//允许赋值</span><span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><blockquote><p>这些不同留在下面说</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>方法又称行为。类中的方法也分为两种，和字段一样看static是否修饰</p></blockquote><ul><li>实例成员方法</li><li>静态成员方法</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//实例成员方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态成员方法   用static</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>至于这两者的不同，我后面会重点谈到，先放一放</p></blockquote><h2 id="实例化一个对象"><a href="#实例化一个对象" class="headerlink" title="实例化一个对象"></a>实例化一个对象</h2><blockquote><p>一个类可以实例化多个对象，在&#x3D;&#x3D;堆&#x3D;&#x3D;上开辟相应的空间</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例成员变量</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态成员变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化一个对象</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="重点讲解static"><a href="#重点讲解static" class="headerlink" title="重点讲解static"></a>重点讲解static</h2><blockquote><p>static修饰与否会产生天差地别的不同</p></blockquote><h3 id="字段的不同"><a href="#字段的不同" class="headerlink" title="字段的不同"></a>字段的不同</h3><h5 id="使用的不同"><a href="#使用的不同" class="headerlink" title="使用的不同"></a>使用的不同</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//引用对象</span>        Person<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//引用类  static修饰的字段和方法使用时需要引用类名  </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="开辟空间的位置不同"><a href="#开辟空间的位置不同" class="headerlink" title="开辟空间的位置不同"></a>开辟空间的位置不同</h5><ul><li><p>实例成员变量在<strong>堆</strong>上开辟</p></li><li><p>静态成员变量在方法区去开辟</p><p><img src="https://s2.51cto.com/images/20211129/1638178875594773.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p></li></ul><blockquote><p>由于静态成员变量开辟在方法区，所以可以说不在对象里面，可以这样说我们可以开辟多个对象，但这些对象“ 共用 ”静态成员变量</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211129/1638180858879037.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="方法的不同"><a href="#方法的不同" class="headerlink" title="方法的不同"></a>方法的不同</h3><blockquote><p>某种意义上，静态成员方法的的要求更为严格，限制更多，这里我就不截图的</p></blockquote><ul><li>静态成员方法只能调用静态成员方法，而实例成员方法不做要求</li><li>静态成员方法里面不能出现实例成员变量，而而实例成员方法不做要求</li></ul><h2 id="访问修饰限定符"><a href="#访问修饰限定符" class="headerlink" title="访问修饰限定符"></a>访问修饰限定符</h2><blockquote><p>我们刚才谈了很多，不过有一个词没有谈到，就是public。public是一个访问修饰限定符，让我们看看这些内容都有什么。这里我们重点谈的是private，也就不的不提到  <strong>封装</strong></p></blockquote><h5 id="访问修饰限定符-1"><a href="#访问修饰限定符-1" class="headerlink" title="访问修饰限定符"></a>访问修饰限定符</h5><ul><li>public：   共有的</li><li>private: 私有的</li><li>protected   受保护的</li><li>default ： 默认权限  -&gt;   包访问权限（后面会说）</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>在面向对象编程方法中，<strong>封装</strong>（英语：Encapsulation）是指，一种将抽象性函数接口的实现细节部分包装、隐藏起来的方法。同时，它也是一种防止外界调用端，去访问对象内部实现细节的手段，这个手段是由编程语言本身来提供的 。  来源：维基百科</p></blockquote><blockquote><p>我们通过private将自己的写的方法封装起来，避免用户随意修改我们的代码，另外提供一个接口，方便用户使用。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//封装</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this是一个关键字</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"读者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211129/1638182254921377.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><blockquote><p><strong>this</strong>关键字我们这里现在是不谈，后面我会再写一篇博客将关键字好好的的谈一谈，在这里我们就需要知道this.data 代表对象里的字段就可以了</p></blockquote><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法也是一种方法，不给他比较特殊</p><ol><li>构造方法的类名和方法名相同</li><li>没有返回值，注意 <font color = red>是没有</font>，而不是返回值是void</li></ol><blockquote><p>一个对象的产生分为几步  两步</p></blockquote><ol><li>为对象分配内存  </li><li>调用合适的构造方法</li></ol><p>也就是说 构造方法一定参与对象的实例化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>上面的 Person() 就是一个构造方法。</p></blockquote><ul><li><p>问：之前我们也没有写过构造方法啊，为什么还可以实例化对象？<br>答：因为编译器自动帮我们写了一个不带参数的构造方法，我们就不需要构造了</p></li><li><p>问：构造方法是如何调用的？<br>答： Person per &#x3D; new Person();中的Person()，就是调用</p></li></ul><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211129/1638183270963222.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><ul><li>为什么会报错<br>答：当我们自己写构造方法时，编译器便不再为我们自动生成了，我们实例化对象时调用的构造方法参数不对</li></ul><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><ul><li>问：可以存在多个构造方法吗<br>答：可以  构造方法也是遵从函数重载的</li></ul><h4 id="样例一"><a href="#样例一" class="headerlink" title="样例一"></a>样例一</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211129/1638183596579913.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h4 id="样例二"><a href="#样例二" class="headerlink" title="样例二"></a>样例二</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//this();</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sleep()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><ul><li>问：构造方法可以互相调用吗<br>答： 可以，不过this()调用时只能在第一行，也就是说一个构造方法只能调用一次另一个</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211129/1638184169927562.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块这个知识点我们不太常用,不过为了知识的完整性,我们还是把这个模块说一下吧.代码块分为以下几种</p><ol><li>普通代码块     定义在方法中的代码块  </li><li>构造块            定义在类中的代码块(不加修饰符)。也叫：<strong>实例代码块</strong>。构造代码块一般用于初始化实例成员变量  </li><li>静态块            使用static定义的代码块。<strong>一般用于初始化静态成员属性</strong>  </li><li>同步代码块    这个不说</li></ol><blockquote><p>这里我们重点说一下构造快和静态块,下面一个代码就可以搞定</p></blockquote><p>&#x3D;&#x3D;从下面我们可以看出,静态块先执行,接着是实例代码块,后面才是构造方法.&#x3D;&#x3D;这个顺序大家先记住.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个 实例代码块 ！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态代码块 ！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个构造方法！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271013603.png" alt="image-20220327101332554"></p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>看完上面的内容，想来你已经对类和对象有一定的了解了。下面的知识是关于一些常见问题的解答。我们一起来看看.</p><p>来看看这些问题把</p><p>&#x3D;&#x3D;下面代码是否可以编译通过&#x3D;&#x3D;</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           TestDemo testDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p>很抱歉，this关键字是对当前对象的引用，static修饰的成员变量和成员方法不在<strong>对象</strong>里面，所以编译不通过</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203262049217.png" alt="image-20220326204921063"></p><p>下面的代码是不是报错.</p><blockquote><pre class=" language-Java"><code class="language-Java">class Test &#123;    public static int age = 18;&#125;public class TestDemo &#123;    public static void main(String[] args) &#123;        Test test = null;        System.out.println(test.age);        System.out.println(Test.age);    &#125;&#125;</code></pre></blockquote><blockquote><p>不会报错,static修饰的变是不属于对象的,即使我们没有new对象,也会得到结果</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271007272.png" alt="image-20220327100724145"></p><p>那我们再看看下面的代码</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p>这个更简单，由static修饰的变量<strong>定义</strong>在方法区中，无论是静态方法还是普通成员方法</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203262054467.png" alt="image-20220326205438367"></p><p>看看下面的代码块  &#x3D;&#x3D;静态代码块只能出现一次&#x3D;&#x3D;</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个 实例代码块 ！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态代码块 ！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个构造方法！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Test test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203271100755.png" alt="image-20220327110008695"></p><blockquote><p>总结一点</p></blockquote><ol><li>静态的成员是不能在方法中定义的</li><li>this关键字无法引用static修饰的方法或者变量</li><li>静态代码块只能出现一次,即使不用实例化对象也可以执行,具体需要到JVM才可以.</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/04%20%E5%BE%AA%E7%8E%AF%E4%B8%8E%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/06/24/Java/JavaSE/04%20%E5%BE%AA%E7%8E%AF%E4%B8%8E%E9%80%89%E6%8B%A9%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>这里谈的三大语句是我们在语言学习中经常用的，在很多种语言中内容都是大同小异的，也比较简单</p></blockquote><h2 id="三种语句"><a href="#三种语句" class="headerlink" title="三种语句"></a>三种语句</h2><ul><li>选择语句</li><li>循环语句</li><li>跳出语句</li></ul><h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><blockquote><p>选择语句分为两类</p></blockquote><ul><li>if else语句 </li><li>switch 语句</li></ul><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">==</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hehehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hahaha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>判断语句的数据类型必须是boolean </li><li>if(1) 在C语言中可以，Java不可以</li><li>允许多分支 </li><li>允许嵌套</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">==</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">if</span>（<span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"hehehe"<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hehehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hahaha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><blockquote><p> if 的执行过程</p></blockquote><ol><li>得到（）里面的真假结果</li><li>进行条件判定</li><li>根据条件判定的结果进行分支功能</li></ol><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>                             <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token keyword">default</span> <span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>有没有都可以，建议有                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>switch（）的括号的内部元素类型 字节&lt;&#x3D;4的整型(char int byte short)</li><li>每一个case后面，除非是特殊业务要求，要带上break；</li></ul><p><img src="https://s2.51cto.com/images/20211126/1637858428438917.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p>看看结果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//break;</span>                             <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//break;</span>                        <span class="token keyword">default</span> <span class="token operator">:</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203082153508.png" alt="image.png"></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><blockquote><p>我们刚刚说了选择语句，但是这个语句只会执行一次。由于我们发现生活中很多的实际的例子是：同一件事情我们需要完成很多次。那我们怎么做呢？这里就需要循环语句了，这里的循环语句三个。</p></blockquote><ul><li>for</li><li>while</li><li>do while</li></ul><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><blockquote><p>for(表达式1; 表达式2; 表达式3)</p></blockquote><ul><li>表达式1 为初始化部分，用于初始化循环变量的。</li><li>表达式2 为条件判断部分，用于判断循环时候终止。</li><li>表达式3 为调整部分，用于循环条件的调整。</li></ul><p><strong>使用for循环 在屏幕上打印1-10的数字</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211126/1637859618287911.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p>关于一些变种我就先不说了，后面我会一一补上</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p><strong>使用while循环 在屏幕上打印1-10的数字</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><blockquote><p>这里我就不再写代码了，该语句会先执行一次，然后再判断条件是否成立，成立  –  继续  ；  不成立  –  退出</p></blockquote><h3 id="跳出语句"><a href="#跳出语句" class="headerlink" title="跳出语句"></a>跳出语句</h3><p>这里就说一下就可以了，我所说的跳出语句指的下面两个关键字</p><ul><li>continue  –跳出本次循环</li><li>break     –跳出一个循环语句</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/03%20Java%E4%B9%8B%E6%95%B0%E7%BB%84%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2022/06/24/Java/JavaSE/03%20Java%E4%B9%8B%E6%95%B0%E7%BB%84%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>今天主要谈谈方法的实现与调用和以及数组有关的的一些知识点，内容不多，也比较简单</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>“方法”就是我们之前说的“函数”或者“子程序”，这里就不在一一仔细阐述。</p></blockquote><h3 id="HelloWord方法"><a href="#HelloWord方法" class="headerlink" title="HelloWord方法"></a>HelloWord方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>myPrint函数static，因为main是static</li><li>方法再main下面和上面都一样</li><li>方法名采用小驼峰形式</li></ul><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这就是重载，重载要满足一些条件</p></blockquote><ul><li>方法名相同</li><li>方法的参数不同 (参数个数或者参数类型)</li><li>方法的返回值类型不影响重载.</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>从数组开始，Java和C语言就开始有很大的不同了，我们可以对比着学习</p></blockquote><p><strong>与C的不同</strong></p><ul><li>java：int[ ] arr; </li><li>C语言：int arr[ N ](注：N为一常数)</li></ul><blockquote><p>这里提一下，Java中的命名规则可以说是“形象的”，对于C语言来说<br>int arr1[10] 和 int arr2[20] 就不是一个数据类型的，arr1是int[10]、arr2是int[20];</p></blockquote><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p><strong>数组元素初始化</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误做法 已经分配了内存</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确做法</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>NULL 和 null的区别</p></blockquote><ul><li>NULL是0地址</li><li>null就是一个空对象，和0地址没有关系</li></ul><p><strong>三种一位数组的创建方式</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// []内不能有数字</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span>，<span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 同样[]内不能加数字</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//数组内有5个元素，每个元素默认初始化为0</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>数组元素的内存存储位置 元素名在栈区 ，元素在堆区</p></blockquote><p><img src="https://s2.51cto.com/images/20211125/1637833343879402.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数字名是地址，会打印出地址</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211125/1637833435154639.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h4 id="打印数组元素"><a href="#打印数组元素" class="headerlink" title="打印数组元素"></a>打印数组元素</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>常规写法，arr.length计算元素的个数。</p></blockquote><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//val的数据类型要和arr一样</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>有一定的缺陷，只能全部打印。</p></blockquote><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                String ret <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以数组的形式输出</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211125/1637832807676527.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><blockquote><p>如果说一维数组与C语言还有些相似的话，那么二维数组有C语言有着很大的不同，我们来仔细看看二维数组的存储</p></blockquote><ul><li>数组名在栈区</li><li>二维数组是一个特殊的一维数组，其每一个元素都是一个一维数组</li></ul><p><img src="https://s2.51cto.com/images/20211127/1638007934277058.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h4 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 二维数组的创建     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//[]不能带数字</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[]不能带数字</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="二维数组的打印"><a href="#二维数组的打印" class="headerlink" title="二维数组的打印"></a>二维数组的打印</h4><blockquote><p>这里我就使用一种方法吧，其他的就不浪费大家的时间了</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 二维数组的打印     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>t                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="不规则的二维数组"><a href="#不规则的二维数组" class="headerlink" title="不规则的二维数组"></a>不规则的二维数组</h4><blockquote><p>在C语言中，我们定义二维数组一定不能够省略 <strong>列</strong>，但是Java中 <strong>行</strong> 不能够省略</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不规则的二维数组     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="打印不规则的二维数组"><a href="#打印不规则的二维数组" class="headerlink" title="打印不规则的二维数组"></a>打印不规则的二维数组</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不规则的二维数组     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  j<span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>出现错误</p></blockquote><p><img src="https://s2.51cto.com/images/20211127/1638008961756930.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><blockquote><p>Java是不能够自己算出一行是有多少个元素的，我们要自己给出</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不规则的二维数组     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>         arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  j<span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211127/1638009238944048.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/02%20%E8%AF%A6%E8%A7%A3Java%E4%B8%AD%E7%9A%84byte%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/06/24/Java/JavaSE/02%20%E8%AF%A6%E8%A7%A3Java%E4%B8%AD%E7%9A%84byte%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>大家有时候可能会对Java中出现的byte类型有些疑惑，今天就来内化这些知识点。这个算是对其他博客的一个补充。内容很少。</p></blockquote><h2 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h2><blockquote><p>在Java中，byte占据<strong>一个字节</strong>，也就是8的bite位</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Byte<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//127</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Byte<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-128</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/d59ee9699eb7412a85d2801c4cee3829.png" alt="在这里插入图片描述"></p><blockquote><p>这里要说的是下面这些   </p></blockquote><ol><li>127的二进制是   0111 1111</li><li>-128的二进制是 1111 1111</li></ol><h3 id="如何快速的将十进制转换为二进制（重点）"><a href="#如何快速的将十进制转换为二进制（重点）" class="headerlink" title="如何快速的将十进制转换为二进制（重点）"></a>如何快速的将十进制转换为二进制（重点）</h3><blockquote><p>这里我们以98为例，负数就是符号位变成1，依次有原码变成补码</p></blockquote><ol><li>将98变成 2的N次方的和</li><li>写出8个0</li><li>N为几就将从右数的N+1位置的0变成1<br><img src="https://img-blog.csdnimg.cn/be8de7905e0148169720a9919ce38403.png" alt="在这里插入图片描述"></li></ol><h2 id="byte的迷惑操作"><a href="#byte的迷惑操作" class="headerlink" title="byte的迷惑操作"></a>byte的迷惑操作</h2><blockquote><p>看看下面代码你就会明白了，</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错</span>        <span class="token keyword">byte</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不报错</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6d450b6b4a794ca4bf6b69c27da346fe.png" alt="在这里插入图片描述"></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote><p>在大多数计算机中，CPU运行时是以４个字节来处理数据的。因此当变量小于４个字节时，并且进行算数运算，会发生整型提升，这就是 byte c &#x3D; a + b会报错的原因， byte d &#x3D; 1 + 2不会报错是因为  1  和  2  是常量。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/JavaSE/01%20%E5%88%9D%E8%AF%86JavaSE/"/>
      <url>/2022/06/24/Java/JavaSE/01%20%E5%88%9D%E8%AF%86JavaSE/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h2><p>我们学习一门语言，肯定是由于这门语言很优秀，并且很流行。Java也是一门这样的的语言。有人可能会疑惑，那python不也是很好吗？注意这里没有引战的意思。python确实很好。它有优雅的风格，易入门等众特点被广泛认可，并且现在大数据处理好象也有其应用。我<strong>现在</strong>不学习python的原因是它要精通很难，注意是现在不学。后面是一定会学的。</p><blockquote><p>Java是一种优秀的程序设计语言，它具有令人赏心悦目的语法和易于理解的语义。不仅如此，Java还是一个有一系列计算机软件和规范形成的技术体系，这个技术体系提供了完整的用于软件开发和跨平台部署的支持环境，并广泛应用于嵌入式系统、移动终端、企业服务器、大型机等各种场合。 Java是一门面向对象的语言，跨平台性好，可以说是 “一此编译，到处运行”， 入门较简单，安全性高。下面是Java的一些特点。</p></blockquote><ul><li>跨平台性好</li><li>入门较简单  没有指针</li><li>安全性高</li><li>多线程</li><li>面向对象</li></ul><h2 id="Java中main方法"><a href="#Java中main方法" class="headerlink" title="Java中main方法"></a>Java中main方法</h2><p>对于每学习一门新的语言，我们都会写出一个“Hello Word”程序，我们先写出来，我们一步一步分析，来看看Java的特点。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印方法</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>下面我们和C语言的main函数进行对比</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello Word\n"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以看出，Java中的 main方法比C语言中的要复杂的多。这也是后面我们需要学习的。</p><h2 id="mian的命名规则"><a href="#mian的命名规则" class="headerlink" title="mian的命名规则"></a>mian的命名规则</h2><ul><li>main的没有返回值，是 void</li><li>public的类名要与文件名相同，命名规则采用<strong>大驼峰</strong>形式</li><li>public类有且只有一个，我们可以在一个文件中定义很多类（当然，我建议一个类一个文件），但是我们<strong>只有一个public类</strong>，并且一个类可以生成一个字节码文件（class文件）。</li></ul><p><img src="https://s2.51cto.com/images/20211104/1636014736625596.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="问题：如何在JDK中运行一个Java程序"><a href="#问题：如何在JDK中运行一个Java程序" class="headerlink" title="问题：如何在JDK中运行一个Java程序"></a>问题：如何在JDK中运行一个Java程序</h2><p>我建议刚接触Java的人先尝试一下使用JDK，等我们了解了初步了解后，可以换成<strong>集成开发环境IDEA</strong>。关于JDK我建议我们使用1.8版本的，虽然现在有更高的版本，不过我们国内的大厂一般都是1.8版本的。至于怎么安装和配置，网上有很多教程，这里就不浪费大家的时间了。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>我们在磁盘用记事本建立一个文本文件，将文件后缀改为**.java**</p><p><img src="https://s2.51cto.com/images/20211104/1636015807280878.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p>我们打开文本文件就可以进行代码编辑了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>&#x3D;&#x3D;编辑完后记得保存，&#x3D;&#x3D;</p><p>下面按<strong>Home+r</strong>，将出现的空格内打入cmd 回车，打开命令窗口</p><p><img src="https://s2.51cto.com/images/20211104/1636016386102030.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p>下面便简单了</p><ol><li>输入文件所在的存储盘  末尾加上    <strong>：</strong></li><li>cd 绝对路径</li></ol><pre class=" language-html/xml"><code class="language-html/xml">1.d：2.cd D:\java-code\2021Code\JavaCode\2021.11.04</code></pre><p><img src="https://s2.51cto.com/images/20211104/1636016778911443.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span> javac HelloWorld<span class="token punctuation">.</span>java <span class="token operator">-</span>encoding utf<span class="token operator">-</span><span class="token number">8</span>        <span class="token comment" spellcheck="true">//javac  是编译命令，会生成一个 .class 文件</span><span class="token operator">-</span> java HelloWorld                              <span class="token comment" spellcheck="true">//java   是运行命令</span></code></pre><p>看看结果</p><p><img src="https://s2.51cto.com/images/20211104/1636017055727060.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p>这就是如何运行一个Java程序全部过程</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>程序是怎么从一个文本文件，变成一个可执行程序的，下面的图片可以帮助你了解。</p><p><img src="https://s2.51cto.com/images/20211104/1636017753352635.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="Java内8种内置类型"><a href="#Java内8种内置类型" class="headerlink" title="Java内8种内置类型"></a>Java内8种内置类型</h2><p>Java也有自己的内置类型，和C语言差不多。不过有补充的几个。</p><ul><li>整型</li><li>浮点型</li><li>字符类型</li><li>布尔类型</li></ul><h3 id="四种整型"><a href="#四种整型" class="headerlink" title="四种整型"></a>四种整型</h3><p>Java中没有 long long 型，但是补充了一个byte类型</p><ul><li>int</li><li>short</li><li>long</li><li>byte</li></ul><blockquote><p><strong>int：    四个字节  封装在Integer类中</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2147483647</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-2147483648</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>short：  两个字节  封装在Short类中</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Short<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//32767</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Short<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-32768</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>long： 八个字节  封装在Long中</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9223372036854775807</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-9223372036854775808</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>byte： 一个字节  封装在Byte类中</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Byte<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//127</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Byte<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-128</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="两种浮点型"><a href="#两种浮点型" class="headerlink" title="两种浮点型"></a>两种浮点型</h3><ul><li>float</li><li>double</li></ul><blockquote><p>float： 四个字节  封装在Float类中</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Float<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.4028235E38</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Float<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.4E-45</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>double: 八个字节 封装在Double类中</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.7976931348623157E308</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.9E-324</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>char类型占据两个字节，两个字节！两个字节！！</p><ul><li>char</li></ul><blockquote><p>**char ** <strong>两个字节    —-     没有负值</strong></p></blockquote><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>boolean 没有确定的的值，只有false 和 true,也没有规定所占的字节数。我们在进行条件判断的时候结果 都是布尔类型。&#x3D;&#x3D;没有所谓的零为负，非零为正的规定。&#x3D;&#x3D;</p><ul><li>boolean</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flg1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flg2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flg1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flg2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Very Good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="整型提升（重点讲解）"><a href="#整型提升（重点讲解）" class="headerlink" title="整型提升（重点讲解）"></a>整型提升（重点讲解）</h2><blockquote><p>在Java中，像byte char short 的数据类型在进行算术运算是，会发生整型提升 提升为int型</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>        c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ch3 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 是常量</span>        ch3 <span class="token operator">=</span> ch1 <span class="token operator">+</span> ch1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211214/1639487312472388.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="如何提升"><a href="#如何提升" class="headerlink" title="如何提升"></a>如何提升</h3><blockquote><p>有符号添加自己的符号位，补全32个比特位</p><p>无符号数补 0</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211214/1639487581306433.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="Java不会自动进行截断"><a href="#Java不会自动进行截断" class="headerlink" title="Java不会自动进行截断"></a>Java不会自动进行截断</h2><blockquote><p>Java的安全性高，凡是高字节的类型转化到低字节的类型中都报错，不会自行截断</p></blockquote><p><em><strong>Java</strong></em></p><p><img src="https://s2.51cto.com/images/20211214/1639487790518689.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><em><strong>C语言</strong></em></p><p><img src="https://s2.51cto.com/images/20211214/1639487847612688.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Java的跨平台性好，一次编译，到处运行</li><li>Java中main方法比C语言中复杂，里面涉及到很多内容</li><li>建议使用JDK1.8版本</li><li>一个类一个字节码文件</li><li>八种内置类型</li><li>整型提升</li><li>不会自己截断截断</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Java/Head%20First%20Java%20%E4%B8%AD%E6%96%87%E7%89%88/Untitled%201/"/>
      <url>/2022/06/24/Java/Head%20First%20Java%20%E4%B8%AD%E6%96%87%E7%89%88/Untitled%201/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E9%94%99%E9%A2%98%E9%9B%86/%E6%95%B0%E7%BB%84/2022_04_02/"/>
      <url>/2022/06/24/%E9%94%99%E9%A2%98%E9%9B%86/%E6%95%B0%E7%BB%84/2022_04_02/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.nowcoder.com/test/question/done?tid=54743433&qid=1147#summary">链接</a></p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204022036363.png" alt="image-20220402203629288"></p><p>错误原因 : 看错了题目,以为要找一个数组,里面包含10个元素,每个元素时一个函数指针,返回值是int  参数类型是int*</p><p>感悟 : 函数指针这里还不太熟悉,可以分析出来,但是写出来有些困难</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204022050868.png" alt="image-20220402205054811"></p><p>感悟  这个虽然写对了,但是不知道原因</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E9%94%99%E9%A2%98%E9%9B%86/%E4%BD%9C%E4%B8%9A/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2022/06/24/%E9%94%99%E9%A2%98%E9%9B%86/%E4%BD%9C%E4%B8%9A/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>计算叶子节点的个数，这是一道简单的题，但是我现在有些问题</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204081538787.png" alt="image-20220408153848699"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/02%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%89%88%E5%BC%8F/"/>
      <url>/2022/06/24/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/02%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%89%88%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我们都知道，我们使用良好的的代码风格可以给人一种成熟稳重的形象，我们禁止写汉语拼音的风格，也不倡导太过个人化的风格，这会让人看不太懂.好的程序就像人们欣赏书法一样,令人赏心悦目.这个主要依据《高质量C&#x2F;C++编程》,同时也把我这些天自己认为比较好的和大家分享一下.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> pridex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findIndex</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span><span class="token keyword">int</span> inbegin<span class="token punctuation">,</span><span class="token keyword">int</span> inend<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> inbegin<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>inend<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> i<span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> TreeNode <span class="token function">buildTreeChild</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inbegin<span class="token punctuation">,</span><span class="token keyword">int</span> inend<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>inbegin <span class="token operator">></span> inend<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pridex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> rootIndex <span class="token operator">=</span> <span class="token function">findIndex</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>inbegin<span class="token punctuation">,</span>inend<span class="token punctuation">,</span>preorder<span class="token punctuation">[</span>pridex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         pridex<span class="token operator">++</span><span class="token punctuation">;</span>         root<span class="token punctuation">.</span>left <span class="token operator">=</span>   <span class="token function">buildTreeChild</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>inbegin<span class="token punctuation">,</span>rootIndex <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         root<span class="token punctuation">.</span>right <span class="token operator">=</span>  <span class="token function">buildTreeChild</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>rootIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>inend<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> root<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preorder <span class="token operator">==</span> null <span class="token operator">||</span> inorder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> <span class="token function">buildTreeChild</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20106.%20%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20106.%20%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> postIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findIndex</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span><span class="token keyword">int</span> inbegin<span class="token punctuation">,</span><span class="token keyword">int</span> inend<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> inbegin<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>inend<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> i<span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTreeChild</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">,</span><span class="token keyword">int</span> inbegin<span class="token punctuation">,</span><span class="token keyword">int</span> inend<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>inbegin <span class="token operator">></span> inend<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>postIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rootIndex <span class="token operator">=</span> <span class="token function">findIndex</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>inbegin<span class="token punctuation">,</span>inend<span class="token punctuation">,</span>postorder<span class="token punctuation">[</span>postIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        postIndex<span class="token operator">--</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTreeChild</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>postorder<span class="token punctuation">,</span>rootIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inend<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTreeChild</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>postorder<span class="token punctuation">,</span>inbegin<span class="token punctuation">,</span>rootIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>inorder <span class="token operator">==</span> null <span class="token operator">||</span> postorder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        postIndex <span class="token operator">=</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> <span class="token function">buildTreeChild</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span>postorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20110.%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20110.%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> left <span class="token operator">></span> right <span class="token operator">?</span>  left<span class="token operator">:</span>right<span class="token punctuation">;</span>            <span class="token keyword">return</span> ret <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20111.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20111.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode &amp;#123; *     int val; *     struct TreeNode *left; *     struct TreeNode *right; * &amp;#125;; */</span><span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    left <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    right <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">&lt;</span> right <span class="token operator">?</span> left<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">:</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">138. 复制带随机指针的链表</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for a Node. * struct Node &amp;#123; *     int val; *     struct Node *next; *     struct Node *random; * &amp;#125;; */</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span>  cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> curNext <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> newnode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newnode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        newnode<span class="token operator">-></span>random <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        newnode<span class="token operator">-></span>val <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> newnode<span class="token punctuation">;</span>        newnode<span class="token operator">-></span>next <span class="token operator">=</span> curNext<span class="token punctuation">;</span>        cur <span class="token operator">=</span> curNext<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curNext <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            curNext <span class="token operator">=</span> curNext<span class="token operator">-></span>next<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    curNext <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二步  设计  radom</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>random <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            curNext<span class="token operator">-></span>random <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            curNext<span class="token operator">-></span>random <span class="token operator">=</span> cur<span class="token operator">-></span>random<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> curNext<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            curNext <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第三步</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    curNext <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> curNext<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newHead <span class="token operator">=</span> curNext<span class="token punctuation">;</span>            tail <span class="token operator">=</span> newHead<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tail<span class="token operator">-></span>next <span class="token operator">=</span> curNext<span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           curNext <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>java 版本</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node &amp;#123;    int val;    Node next;    Node random;    public Node(int val) &amp;#123;        this.val = val;        this.next = null;        this.random = null;    &amp;#125;&amp;#125;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Node <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Node<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>           map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>random <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>           cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20222.%20%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20222.%20%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode &amp;#123; *     int val; *     struct TreeNode *left; *     struct TreeNode *right; * &amp;#125;; */</span><span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20225.%20%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20225.%20%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> TypeData<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> QueueNode<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    TypeData val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> QueueNode<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>QueueNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Queue<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    QueueNode<span class="token operator">*</span> head<span class="token punctuation">;</span>    QueueNode<span class="token operator">*</span> tail<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Queue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QueueInit</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> pq<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>    pq<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pq<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QueuePush</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> pq<span class="token punctuation">,</span> TypeData x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>    QueueNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span>QueueNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QueueNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> x<span class="token punctuation">;</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token operator">-></span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        pq<span class="token operator">-></span>head <span class="token operator">=</span> node<span class="token punctuation">;</span>        pq<span class="token operator">-></span>tail <span class="token operator">=</span> pq<span class="token operator">-></span>head<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    pq<span class="token operator">-></span>tail<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    pq<span class="token operator">-></span>tail <span class="token operator">=</span> pq<span class="token operator">-></span>tail<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>TypeData <span class="token function">QueueFront</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> pq<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pq<span class="token operator">-></span>head<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QueuePop</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> pq<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token operator">-></span>head <span class="token operator">&amp;&amp;</span> pq<span class="token operator">-></span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token operator">-></span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pq<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        pq<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    QueueNode<span class="token operator">*</span> headNext <span class="token operator">=</span> pq<span class="token operator">-></span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pq<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    pq<span class="token operator">-></span>head <span class="token operator">=</span> headNext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if(pq->head == NULL)</span>    <span class="token comment" spellcheck="true">// &amp;#123;</span>    <span class="token comment" spellcheck="true">//     pq->tail = NULL;</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> pq<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pq<span class="token operator">-></span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">QueueDestroy</span><span class="token punctuation">(</span>Queue<span class="token operator">*</span> pq<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>    QueueNode<span class="token operator">*</span> cur <span class="token operator">=</span> pq<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        QueueNode<span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二件事  销毁队列</span>    pq<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pq<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Queue<span class="token operator">*</span> q1<span class="token punctuation">;</span>    Queue<span class="token operator">*</span> q2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> MyStack<span class="token punctuation">;</span>MyStack<span class="token operator">*</span> <span class="token function">myStackCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MyStack<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span>MyStack<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token operator">-></span>q1 <span class="token operator">=</span> <span class="token punctuation">(</span>Queue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token operator">-></span>q2 <span class="token operator">=</span> <span class="token punctuation">(</span>Queue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QueueInit</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QueueInit</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myStackPush</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">QueuePush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">QueuePush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">myStackPop</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    TypeData val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> <span class="token function">QueueFront</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">QueuePop</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">QueuePush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> <span class="token function">QueueFront</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">QueuePop</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">QueuePush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">myStackTop</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    TypeData val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> <span class="token function">QueueFront</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">QueuePop</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">QueuePush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> <span class="token function">QueueFront</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">QueuePop</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">QueuePush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">myStackEmpty</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myStackFree</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QueueDestroy</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QueueDestroy</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MyStack struct will be instantiated and called as such: * MyStack* obj = myStackCreate(); * myStackPush(obj, x);  * int param_2 = myStackPop(obj);  * int param_3 = myStackTop(obj);  * bool param_4 = myStackEmpty(obj);  * myStackFree(obj);*/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20232.%20%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20232.%20%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> TypeData<span class="token punctuation">;</span><span class="token keyword">struct</span> Stack<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    TypeData<span class="token operator">*</span> elem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//数组的容量</span>    <span class="token keyword">int</span> tail<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//栈顶</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Stack Stack<span class="token punctuation">;</span>bool <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ps<span class="token operator">-></span>tail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>TypeData <span class="token function">pop</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//出栈</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ps<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">(</span>ps<span class="token operator">-></span>tail<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>TypeData <span class="token function">peek</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//数据</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ps<span class="token operator">-></span>elem<span class="token punctuation">[</span>ps<span class="token operator">-></span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>elem <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//free(ps->elem);</span>    ps<span class="token operator">-></span>elem <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">isFull</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ps<span class="token operator">-></span>capacity <span class="token operator">==</span> ps<span class="token operator">-></span>tail<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Stack<span class="token operator">*</span> ps<span class="token punctuation">,</span> TypeData val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TypeData<span class="token operator">*</span> newElem <span class="token operator">=</span> <span class="token punctuation">(</span>TypeData<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>ps<span class="token operator">-></span>elem<span class="token punctuation">,</span> <span class="token punctuation">(</span>ps<span class="token operator">-></span>capacity <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TypeData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>newElem<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">-></span>elem <span class="token operator">=</span> newElem<span class="token punctuation">;</span>        ps<span class="token operator">-></span>capacity <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    ps<span class="token operator">-></span>elem<span class="token punctuation">[</span>ps<span class="token operator">-></span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Stack s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个进</span>    Stack s2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个出</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> MyQueue<span class="token punctuation">;</span>MyQueue<span class="token operator">*</span> <span class="token function">myQueueCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MyQueue<span class="token operator">*</span> myQueue <span class="token operator">=</span> <span class="token punctuation">(</span>MyQueue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myQueue<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myQueue<span class="token operator">-></span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> myQueue<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">myQueueEmpty</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myQueuePush</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">myQueuePop</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myQueueEmpty</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">myQueuePeek</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myQueueEmpty</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myQueueFree</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obj<span class="token operator">-></span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MyQueue struct will be instantiated and called as such: * MyQueue* obj = myQueueCreate(); * myQueuePush(obj, x);  * int param_2 = myQueuePop(obj);  * int param_3 = myQueuePeek(obj);  * bool param_4 = myQueueEmpty(obj);  * myQueueFree(obj);*/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>              TreeNode right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20387.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20387.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode   <a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">387. 字符串中的第一个唯一字符</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>ret<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20575.%20%E5%88%86%E7%B3%96%E6%9E%9C/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20575.%20%E5%88%86%E7%B3%96%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/distribute-candies/">575. 分糖果</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candyType<span class="token punctuation">,</span> <span class="token keyword">int</span> candyTypeSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>candyType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> candyTypeSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> candyTypeSize <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1,1,2,2,3,3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> candyType<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> count <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20606.%20%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20606.%20%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/">606. 根据二叉树创建字符串</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tree2strChild</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        str <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                str <span class="token operator">+=</span><span class="token string">"()"</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            str <span class="token operator">+=</span><span class="token string">"("</span><span class="token punctuation">;</span>            <span class="token function">tree2strChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">+=</span><span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            str <span class="token operator">+=</span><span class="token string">"("</span><span class="token punctuation">;</span>            <span class="token function">tree2strChild</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">+=</span><span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">tree2str</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">tree2strChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20771.%20%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20771.%20%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/jewels-and-stones/">771. 宝石与石头</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numJewelsInStones</span><span class="token punctuation">(</span>String jewels<span class="token punctuation">,</span> String stones<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>Character ch<span class="token operator">:</span>jewels<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Character ch<span class="token operator">:</span>stones<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               count<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20796.%20%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20796.%20%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/rotate-string/">796. 旋转字符串</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token function">assert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span><span class="token operator">*</span> left <span class="token operator">=</span> s<span class="token punctuation">;</span>     <span class="token keyword">char</span><span class="token operator">*</span> right <span class="token operator">=</span> s<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">char</span> ret <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>         <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>         <span class="token operator">*</span>right <span class="token operator">=</span> ret<span class="token punctuation">;</span>         left<span class="token operator">++</span><span class="token punctuation">;</span>         right<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myReserve</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reserve</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reserve</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reserve</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">rotateString</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> goal<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>s <span class="token operator">&amp;&amp;</span> goal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//交换一个</span>        <span class="token function">myReserve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>goal<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20917.%20%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20917.%20%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode.cn/problems/reverse-only-letters/">917. 仅仅反转字母</a></p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span>         <span class="token operator">||</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span><span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    string <span class="token function">reverseOnlyLetters</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        string<span class="token operator">::</span>iterator beg <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         string<span class="token operator">::</span>iterator end <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>beg <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>beg <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token operator">*</span>beg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                beg<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>beg <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isLetter</span><span class="token punctuation">(</span><span class="token operator">*</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span>beg<span class="token punctuation">,</span><span class="token operator">*</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            beg<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%201920.%20%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%201920.%20%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/build-array-from-permutation/">1920. 基于排列构建数组</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">buildArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Leetcode<a href="https://leetcode-cn.com/problems/concatenation-of-array/">1929. 数组串联</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">getConcatenation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>i <span class="token operator">+</span> numsSize<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/">1480. 一维数组的动态和</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">runningSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/decode-xored-array/">1720. 解码异或后的数组</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> encoded<span class="token punctuation">,</span> <span class="token keyword">int</span> encodedSize<span class="token punctuation">,</span> <span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>encodedSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> encodedSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> encoded<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> encodedSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%202011.%20%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%80%BC/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%202011.%20%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode.cn/problems/final-value-of-variable-after-performing-operations/">2011. 执行操作后的变量值</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> ret<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断  是  +   还是   -</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token operator">*</span>ret<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token operator">*</span>ret <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">finalValueAfterOperations</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> operations<span class="token punctuation">,</span> <span class="token keyword">int</span> operationsSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>operationsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">func</span><span class="token punctuation">(</span>operations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86(%E9%80%92%E5%BD%92%E5%92%8C%E9%9D%9E%E9%80%92%E5%BD%92)/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86(%E9%80%92%E5%BD%92%E5%92%8C%E9%9D%9E%E9%80%92%E5%BD%92)/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> left <span class="token operator">=</span>  <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> right <span class="token operator">=</span>  <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            TreeNode top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> top<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> left <span class="token operator">=</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> right <span class="token operator">=</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            TreeNode top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> top<span class="token punctuation">.</span>right<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> left <span class="token operator">=</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> right <span class="token operator">=</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        TreeNode cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">==</span> null <span class="token operator">||</span> cur<span class="token punctuation">.</span>right <span class="token operator">==</span> prev<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span>  stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E5%89%91%E6%8C%87%20Offer%2058%20-%20II.%20%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E5%89%91%E6%8C%87%20Offer%2058%20-%20II.%20%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>left<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> len<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E9%93%BE%E8%A1%A8OJ%E9%9B%86%E5%90%88/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E9%93%BE%E8%A1%A8OJ%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个博客主要是我这几天做的链表题，这两天想给自己加一个强训。这篇只有代码，没有任何讲解。下面这些代码都是在OJ上跑过的。有些代码可能比较挫。后面我看看自己能不能优化优化。由于代码没有注释，理解起来可能有些吃力，后面等我做够了题目选择典型的题和大家分享一下啊。要是对代码有疑惑的同学也可以私信我.</p></blockquote><p>除了一些需要会员和题目与二叉树以及哈希相关的，下面大该是Leetcode中链表容易的部分的全部的内容了。大家可以看看</p><p>[toc]</p><h3 id="Leetcode-19-删除链表的倒数第-N-个结点"><a href="#Leetcode-19-删除链表的倒数第-N-个结点" class="headerlink" title="Leetcode 19. 删除链表的倒数第 N 个结点"></a>Leetcode <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    prev<span class="token operator">-></span>next <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    slow<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-剑指-Offer-06-从尾到头打印链表"><a href="#Leetcode-剑指-Offer-06-从尾到头打印链表" class="headerlink" title="Leetcode 剑指 Offer 06. 从尾到头打印链表"></a>Leetcode <a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">*</span>returnSize <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-83-删除排序链表中的重复元素"><a href="#Leetcode-83-删除排序链表中的重复元素" class="headerlink" title="Leetcode 83. 删除排序链表中的重复元素"></a>Leetcode <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">!=</span> prev<span class="token operator">-></span>val<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>           prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    prev<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-剑指-Offer-18-删除链表的节点"><a href="#Leetcode-剑指-Offer-18-删除链表的节点" class="headerlink" title="Leetcode 剑指 Offer 18. 删除链表的节点"></a>Leetcode <a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur <span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-剑指-Offer-24-反转链表-amp-剑指-Offer-II-024-反转链表"><a href="#Leetcode-剑指-Offer-24-反转链表-amp-剑指-Offer-II-024-反转链表" class="headerlink" title="Leetcode 剑指 Offer 24. 反转链表 &amp; 剑指 Offer II 024. 反转链表"></a>Leetcode <a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a> &amp; <a href="https://leetcode-cn.com/problems/UHnkqh/">剑指 Offer II 024. 反转链表</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>            newHead<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>            newHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-剑指-Offer-25-合并两个排序的链表"><a href="#Leetcode-剑指-Offer-25-合并两个排序的链表" class="headerlink" title="Leetcode 剑指 Offer 25. 合并两个排序的链表"></a>Leetcode <a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">剑指 Offer 25. 合并两个排序的链表</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                newHead <span class="token operator">=</span> l1<span class="token punctuation">;</span>                tail <span class="token operator">=</span> newHead<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                tail <span class="token operator">=</span> l1<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                newHead <span class="token operator">=</span> l2<span class="token punctuation">;</span>                tail <span class="token operator">=</span> newHead<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                tail <span class="token operator">=</span> l2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-面试题-02-07-链表相交-amp-剑指-Offer-52-两个链表的第一个公共节点-amp-剑指-Offer-II-023-两个链表的第一个重合节点"><a href="#Leetcode-面试题-02-07-链表相交-amp-剑指-Offer-52-两个链表的第一个公共节点-amp-剑指-Offer-II-023-两个链表的第一个重合节点" class="headerlink" title="Leetcode 面试题 02.07. 链表相交 &amp; 剑指 Offer 52. 两个链表的第一个公共节点  &amp; 剑指 Offer II 023. 两个链表的第一个重合节点"></a>Leetcode <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a> &amp; <a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点 </a> &amp; <a href="https://leetcode-cn.com/problems/3u1WK4/">剑指 Offer II 023. 两个链表的第一个重合节点</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>headA <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> headB <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lenA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lenB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span> curA  <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span> curB  <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>curA<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lenA<span class="token operator">++</span><span class="token punctuation">;</span>        curA <span class="token operator">=</span> curA<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>curB<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lenB<span class="token operator">++</span><span class="token punctuation">;</span>        curB <span class="token operator">=</span> curB<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span> longNode <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span> shortNode <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> lenA <span class="token operator">-</span> lenB<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lenA <span class="token operator">&lt;</span> lenB<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        longNode <span class="token operator">=</span> headB<span class="token punctuation">;</span>        shortNode <span class="token operator">=</span> headA<span class="token punctuation">;</span>        len <span class="token operator">=</span> <span class="token operator">-</span>len<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         longNode <span class="token operator">=</span>  longNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>longNode <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> shortNode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>longNode <span class="token operator">==</span> shortNode<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> longNode<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        longNode <span class="token operator">=</span> longNode<span class="token operator">-></span>next<span class="token punctuation">;</span>        shortNode <span class="token operator">=</span> shortNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-剑指-Offer-II-027-回文链表-amp-234-回文链表-amp-面试题-02-06-回文链表"><a href="#Leetcode-剑指-Offer-II-027-回文链表-amp-234-回文链表-amp-面试题-02-06-回文链表" class="headerlink" title="Leetcode 剑指 Offer II 027. 回文链表 &amp; 234. 回文链表 &amp; 面试题 02.06. 回文链表"></a>Leetcode <a href="https://leetcode-cn.com/problems/aMhZSa/">剑指 Offer II 027. 回文链表</a> &amp; <a href="https://leetcode-cn.com/problems/palindrome-linked-list/">234. 回文链表</a> &amp; <a href="https://leetcode-cn.com/problems/palindrome-linked-list-lcci/">面试题 02.06. 回文链表</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            pHead<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> n <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        pHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> mid <span class="token operator">=</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>val <span class="token operator">!=</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-面试题-02-02-返回倒数第-k-个节点"><a href="#Leetcode-面试题-02-02-返回倒数第-k-个节点" class="headerlink" title="Leetcode 面试题 02.02. 返回倒数第 k 个节点"></a>Leetcode <a href="https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/">面试题 02.02. 返回倒数第 k 个节点</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">int</span> <span class="token function">kthToLast</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slow<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Leetcode-面试题-02-03-删除中间节点-amp-237-删除链表中的节点"><a href="#Leetcode-面试题-02-03-删除中间节点-amp-237-删除链表中的节点" class="headerlink" title="Leetcode 面试题 02.03. 删除中间节点 &amp; 237. 删除链表中的节点"></a>Leetcode <a href="https://leetcode-cn.com/problems/delete-middle-node-lcci/">面试题 02.03. 删除中间节点</a> &amp; <a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">237. 删除链表中的节点</a></h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cur<span class="token operator">-></span>val <span class="token operator">=</span> next<span class="token operator">-></span>val<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        next <span class="token operator">=</span> next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/remove-duplicate-node-lcci/">面试题 02.01. 移除重复节点</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">int</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> tail<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">removeDuplicateNodes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>            tail <span class="token operator">=</span> newHead<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>newHead<span class="token punctuation">,</span> tail<span class="token punctuation">,</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>                tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E9%9D%A2%E8%AF%95%E9%A2%98%2017.04%20%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20%E9%9D%A2%E8%AF%95%E9%A2%98%2017.04%20%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>Leetcode 面试题 17.04 <a href="https://leetcode-cn.com/problems/missing-number-lcci/">消失的数字</a></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret <span class="token operator">^</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ret <span class="token operator">^</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203051442612.png" alt="image-20220305144206486"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%202.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%202.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/add-two-numbers/">2. 两数相加</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span><span class="token operator">*</span> ppHead<span class="token punctuation">,</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur<span class="token punctuation">,</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span><span class="token operator">*</span> ptail<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>ppHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">*</span>ppHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token operator">*</span>ptail <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>ptail<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token operator">*</span>ptail <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token operator">-></span>val <span class="token operator">=</span> x<span class="token punctuation">;</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret1 <span class="token operator">=</span> l1<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token keyword">int</span> ret2 <span class="token operator">=</span> l2<span class="token operator">-></span>val<span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">+</span> ret1 <span class="token operator">+</span> ret2<span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token function">buy</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span>cur<span class="token punctuation">,</span><span class="token operator">&amp;</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>        l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>        l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token function">buy</span><span class="token punctuation">(</span>sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span>cur<span class="token punctuation">,</span><span class="token operator">&amp;</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> l1<span class="token operator">-></span>val<span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">+</span> ret<span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token function">buy</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span>cur<span class="token punctuation">,</span><span class="token operator">&amp;</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>        l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> l2<span class="token operator">-></span>val<span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">+</span> ret<span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token function">buy</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span>cur<span class="token punctuation">,</span><span class="token operator">&amp;</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>        l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span>cur<span class="token punctuation">,</span><span class="token operator">&amp;</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203172238908.png" alt="image-20220317223754815"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2024.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2024.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode &amp;#123; *     int val; *     struct ListNode *next; * &amp;#125;; */</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> curNext <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curNext <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>newHead <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tail <span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            tail <span class="token operator">=</span>  tail <span class="token operator">-></span>next<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              newHead <span class="token operator">=</span> cur<span class="token punctuation">;</span>              tail <span class="token operator">=</span> newHead<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newHead <span class="token operator">=</span> curNext<span class="token punctuation">;</span>            tail <span class="token operator">=</span> newHead<span class="token punctuation">;</span>            curNext <span class="token operator">=</span> curNext<span class="token operator">-></span>next<span class="token punctuation">;</span>            tail<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tail<span class="token operator">-></span>next <span class="token operator">=</span> curNext<span class="token punctuation">;</span>            tail <span class="token operator">=</span>tail<span class="token operator">-></span>next<span class="token punctuation">;</span>            curNext <span class="token operator">=</span> curNext<span class="token operator">-></span>next<span class="token punctuation">;</span>            tail<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            tail <span class="token operator">=</span>tail<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> curNext<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2034.%20%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2034.%20%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> numsSize <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>        array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2035.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2035.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span> target<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> numsSize<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2051%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2051%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode 51 <a href="https://leetcode-cn.com/problems/length-of-last-word/">最后一个单词的长度</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lengthOfLastWord</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2066.%20%E5%8A%A0%E4%B8%80/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%2066.%20%E5%8A%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode  <a href="https://leetcode-cn.com/problems/plus-one/">66. 加一</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Note: The returned array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> digits<span class="token punctuation">,</span> <span class="token keyword">int</span> digitsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>digits <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> digitsSize<span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">memcpy</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>digits<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>digitsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     cur<span class="token punctuation">[</span>digitsSize<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>digitsSize<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> cur<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> digitsSize<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             cur<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token operator">*</span>returnSize<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">int</span><span class="token operator">*</span> curNext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             curNext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             curNext<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>curNext<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>digitsSize<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>             cur <span class="token operator">=</span> curNext<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/Leetcode%20102.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Leetcode <a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 TreeNode cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                 size<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A3%EF%BC%881%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A3%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%AF%A6%E8%A7%A3">toc</a></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>这里的内容虽然有些多，不过整体较为简单，我总结了一些相对有些难度的的知识点。</p></blockquote><h2 id="操作符（部分）"><a href="#操作符（部分）" class="headerlink" title="操作符（部分）"></a>操作符（部分）</h2><ul><li>算术操作符</li><li>移位操作符</li><li>位操作符</li><li>赋值操作符</li></ul><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><blockquote><p>＋    -     *   &#x2F;    %</p></blockquote><p>这里的加减乘除都比较简单，我在这里就谈谈 % 这个操作符，详细的解释请看 <a href="https://blog.51cto.com/15132397/4558636">负数取整和取余</a></p><ul><li>商决定余</li><li>只有整数可以取余</li></ul><p><img src="https://s2.51cto.com/images/20211115/1636977183475608.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><blockquote><p>谈下面几个操作符时，我先说一下数据在内存中的存储形式   — 补码</p></blockquote><p>正数</p><blockquote><p>  原码 反码 补码相同</p></blockquote><p>负数  </p><blockquote><p> 反码 &#x3D; 原码除符号位外其他按位取反<br> 补码 &#x3D; 反码 + 1</p></blockquote><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><ul><li>左移 &gt;&gt;</li><li>右移 &lt;&lt;  (算数右移 逻辑右移)</li></ul><p><strong>左移</strong><br>二进制向左移动 空缺位补 0（移动一位相当于 × 2）</p><p><img src="https://s2.51cto.com/images/20211115/1636979266474423.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211115/1636979438723343.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><strong>右移</strong><br>右移分为逻辑右移和算术右移</p><ul><li>逻辑右移 二进制向右移动  空缺位补 0</li><li>算术右移 二进制向右移动  空缺位补 符号位<br><img src="https://s2.51cto.com/images/20211115/1636980208556372.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"><blockquote><p>对于正数来说，右移时逻辑右移还是算术右移都一样，但是负数就不一样了，大多数编译器支持算术右移，下面我们看看VS怎么样</p></blockquote></li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211115/1636979976554927.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><blockquote><p>位操作符能够直接改变数字的二进制，下面我就以两个例题来总结位操作符的用法，注意，他们的操作数必须是整数。</p></blockquote><ul><li>按位与   &amp;</li><li>按位或   |</li><li>按位异或 ^</li><li>按位取反 ~</li></ul><blockquote><p>这个地方我先写两道例题，后面可以看看我后期更新的相关博客。<br><a href="https://blog.51cto.com/15132397/4640906">位操作符相关题目</a></p></blockquote><h4 id="例题一-判断-N-是否是2的幂"><a href="#例题一-判断-N-是否是2的幂" class="headerlink" title="例题一 判断 N 是否是2的幂"></a>例题一 判断 N 是否是2的幂</h4><p>如何判断一个数是不是2的n次幂，我们看看下面数的特点<br><img src="https://s2.51cto.com/images/20211115/1636980893343132.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p>你会发现，凡是2的n次幂的数 ，他的二进制一定只有一个数字为 1 （不考虑负数了），那么这就带来一种思路，我们是否可以通过位操作符进行判断。<br>&amp; 是否可以？ ** n &amp;（n-1）**  </p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211115/1636981404374066.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h4 id="例题二-交换a，b，不出现第三个变量"><a href="#例题二-交换a，b，不出现第三个变量" class="headerlink" title="例题二 交换a，b，不出现第三个变量"></a>例题二 交换a，b，不出现第三个变量</h4><p>这里直接就给思路了 我们发现 n ^ n &#x3D;&#x3D;0  n ^ 0 &#x3D;&#x3D; n<br>看下面代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Before a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把 b 赋给 a</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把 a 赋给 b</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"After  a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211115/1636981739532672.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><blockquote><p>这里的赋值操作符就是 &#x3D;  比较简单，这里就提一下 允许连续赋值</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//我们不建议 代码风格不好</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>由于能力有限，今天就先总结到这里，剩下的另一半在后面我会一一总结。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/scanf%EF%BC%88%EF%BC%89%E8%BE%93%E5%85%A5%E4%BE%8B%E9%A2%98/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/scanf%EF%BC%88%EF%BC%89%E8%BE%93%E5%85%A5%E4%BE%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>这个是为了解释这道例题，原理可以去看这个:point_right:<a href="https://blog.51cto.com/u_15132397/5072152#_237">scanf原理</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%f%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将  1-20.3-4.0e3换行 输入进出</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j = %d\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y = %f\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032104678.png" alt="image-20220303210422627"></p><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><blockquote><p>在这之前，我们先看一种现象</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  输入 .1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032132891.png" alt="image-20220303213226851"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032114091.png" alt="image-20220303211429053"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032119311.png" alt="image-20220303211903276"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032123119.png" alt="image-20220303212343086"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032129374.png" alt="image-20220303212900327"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/02%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/02%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>这一章主要说一下我们学习C语言的基础知识，了解变量、常量和宏宏定义的基础知识，后面有会分章节具体解释这些内容的详细知识，这也是《C语言程序设计现代方法》使用的格式，我们就依照这种，后面要是那位有兴趣看这本书的话，也可以更好理解。</p></blockquote><h1 id="编写一个简单的C语言程序"><a href="#编写一个简单的C语言程序" class="headerlink" title="编写一个简单的C语言程序"></a>编写一个简单的C语言程序</h1><p>我们先来看看，一个知名的程序书里面给的是“双关语”，这里避免重复，就用Hello Word程序，这几乎是每一程序员接触的第一个程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>    </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello Word\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><blockquote><p>这里做些简单的简绍</p></blockquote><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>   </span></code></pre></blockquote><p>表示我们要使用 stdio.h 里面的函数，也就是printf函数</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello Word\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></blockquote><p>里面的&#x3D;&#x3D;\n&#x3D;&#x3D;表示打印后要换一行</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   </code></pre></blockquote><p>表示结束程序，并向操作系统返回一个  0  值</p><h2 id="程序编译和链接"><a href="#程序编译和链接" class="headerlink" title="程序编译和链接"></a>程序编译和链接</h2><p>&#x3D;&#x3D;首先，我说一下，要是你没有接触过C语言，编译和连接就先放一放，后面有一定基础了，看的会更加容易一些，要是学过，就当我没说&#x3D;&#x3D;</p><blockquote><p>一个代码要变成可执行程序要经过以下若干步骤，我先列出来，在Linux的环境下给大家演示，有些命令看不太懂没有关系，就看文件的变化就可以了</p></blockquote><ol><li><p>预处理</p></li><li><p>编译</p></li><li><p>汇编</p></li><li><p>链接</p></li></ol><h3 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h3><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714990.png" alt="image-20220303192233788"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>    </span>    <span class="token macro property">#<span class="token directive keyword">define</span> M 10    </span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714052.png" alt="image-20220303192654091"></p><h3 id="预处理（预编译）"><a href="#预处理（预编译）" class="headerlink" title="预处理（预编译）"></a>预处理（预编译）</h3><pre class=" language-powershell"><code class="language-powershell">gcc <span class="token operator">-</span>E test<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>i     </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714032.png" alt="image-20220303192744271"></p><blockquote><p>这里是将#include&lt;stdio.h&gt;等库展开，将宏定义替换好</p></blockquote><p>作用</p><ul><li>展开库</li><li>替换宏</li></ul><blockquote><p>我们打开test.i看看</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714080.png" alt="image-20220303192817098"></p><p>看看，代码一下子变成了800多行，这是库函数的展开，并且我们看到宏M已经被替换成了10，此时仍旧是C语言代码</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class=" language-powershell"><code class="language-powershell">gcc <span class="token operator">-</span>S test<span class="token punctuation">.</span>i <span class="token operator">-</span>o test<span class="token punctuation">.</span>s</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714093.png" alt="image-20220303192844879"></p><blockquote><p>作用</p></blockquote><ul><li>将C语言编译成汇编代码</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714096.png" alt="image-20220303192935928"></p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><pre class=" language-powershell"><code class="language-powershell">gcc <span class="token operator">-</span>c test<span class="token punctuation">.</span>s <span class="token operator">-</span>o test<span class="token punctuation">.</span>o</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714749.png" alt="image-20220303192959944"></p><blockquote><p>作用</p></blockquote><ul><li>将汇编语言变成二进制</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203211714794.png" alt="image-20220303193258808"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote><p>这里我没办法具体演示，就说一下吧，我们在代码中使用了printf函数，这里链接的便是printf函数，存在printf.o中</p></blockquote><h1 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h1><p>我们学习C语言，前期可以使用集成开发环境，这里我推荐一个VS，官网:point_right:<a href="https://visualstudio.microsoft.com/zh-hans/vs/">点我</a>, 这里也分享一个安装教程  :point_up_2:   <a href="https://www.bilibili.com/video/BV11R4y1s7jz?spm_id_from=333.999.0.0">鹏哥C语言</a>,这里我先不说指令，这些指令都是基于Linux系统下的，现在还不太适合我们使用</p><h1 id="程序的一般形式"><a href="#程序的一般形式" class="headerlink" title="程序的一般形式"></a>程序的一般形式</h1><p>这个很简单，只要该开始跟着书本写就可以了，我就主要说一下一些常用的名字</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>一个以英文分号 &#x3D;&#x3D;;&#x3D;&#x3D;    结尾的称为一条语句，下面就是一条语句</p><pre class=" language-c"><code class="language-c"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>和我们理解的那个函数差不多，只是用代码表示出来了而已，后面会专门讲述。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释就是我们对代码写的解释，注释的内容编译器不会把他当作代码，<strong>当作空格</strong> 。C语言注释有两种，这些不用记，用用就会了</p><ol><li>以 &#x2F;&#x2F; 开头</li><li>以&#x2F;*       *&#x2F;</li></ol><h1 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h1><p>这些都是先说说，后面都会一一详细的说明</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>可以变化的量叫做变量，不过每一个变量都会从属一种类型。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>我们都知道数有整数和小数之分，我们要是说 2 &#x3D;&#x3D; 2.0  不能说是错误的，但绝对不太合适，C语言也是如此。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/09%20%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%87%BD%E6%95%B0/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/09%20%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/14%20%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%20%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/14%20%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%20%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>很抱歉，之前说了两天左右一篇的，却拖到现在。这篇博客零零散散耗费的大概十天时间，我一直想和大家分享一个更加完整的博客，同时也提高一下我的编写能力。我看了《C语言程序设计现代方法》中的这一章大概有三遍，其中粗读一遍，精度两遍。有用了一天时间看看比特蛋哥的讲解视频，最终出了这篇博客。我的能力有限，很多时候都是重复观看，也不知道从哪个角度很大家分享。这里面可能会存在一些错误，还请各位原谅。</p><h1 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h1><h2 id="什么是预处理器"><a href="#什么是预处理器" class="headerlink" title="什么是预处理器"></a>什么是预处理器</h2><p>我们可能会感觉到很疑惑，什么是预处理器，它和编译器有什么区别？都先不要着急，请听我慢慢道来。<strong>预处理器是一个小软件</strong>，它在程序编译前处理程序，比如说展开头文件，宏定义中等等，这些就是它的功能。</p><h2 id="预处理器的原理"><a href="#预处理器的原理" class="headerlink" title="预处理器的原理"></a>预处理器的原理</h2><p>谈到原理，我们就不得不说一下，代码是如何变成一个可执行程序的？由于前面我们已经分享过相关的内容，这里就不浪费大家的时间了。我们在之前的学习种看到了这两种情况  &#x3D;&#x3D;#include &lt;stdio.h&gt;&#x3D;&#x3D; 和 &#x3D;&#x3D;#define&#x3D;&#x3D; ,这两个才是我们今天的主菜。我们会发现，无论是那种情况，我们都会看到&#x3D;&#x3D;#&#x3D;&#x3D;，它就是预处理指令的开头。</p><ul><li>#include  是告诉编译器打开一个特定的文件，把它的内容<strong>包含</strong>到我们的代码中</li><li>#define    是定义一个 <strong>宏</strong></li></ul><blockquote><p>注意,当程序经过预处理器后,这些预处理指令都被去掉了,是替换成了空格,不是简单的删除</p></blockquote><h1 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h1><p>多数预处理指令都从属下面三种类型,我们先来看看。后面我都会说到</p><ol><li>宏定义     #define</li><li>条件编译  #ifndef 、#if等等</li><li>文件包含  #include</li></ol><h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><p>宏定义是一个很简单的东西，我们先来了解一下什么是<strong>宏</strong>，所谓的宏就是一种<strong>文本替换</strong>的模式，没有什么神秘的。我们分两个模块说一下宏的知识点。</p><h2 id="为何要有宏"><a href="#为何要有宏" class="headerlink" title="为何要有宏"></a>为何要有宏</h2><p>这个就是十分简单了，有时候我们会写很多一摸一样的数据，但是修改这些数据时要一个一个寻找，代码要是多了，我们不可能每次都保证准确无误的修改完比，还有这个情况，我们写圆周率，有可能有会敲出呢给3.14156926、3.1415681…等等，这也是常见的，所以我们与需要宏。</p><h2 id="简单的宏"><a href="#简单的宏" class="headerlink" title="简单的宏"></a>简单的宏</h2><p>说了这么多，我们来正式看看吧，很简单。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.14159f</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311309890.png" alt="image-20220331130947697"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>宏很好使用，但是我们也需要看看他的一些要求,</p><ul><li>和 define 之间可以存在<strong>任意个空格字符</strong></li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#      <span class="token directive keyword">define</span> PI 3.14159f</span></code></pre><ul><li>要是我们定义的宏过于长，定义时需要换行的话必须加上 *<em>\*</em></li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PI \ 3.14159f</span></code></pre><ul><li>我们允许使用一个宏来定义另一个宏,下面是允许的</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.14159f</span><span class="token macro property">#<span class="token directive keyword">define</span> TWOPI 2*PI</span></code></pre><ul><li>允许只定义宏,不给它替换的结果</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> A          </span><span class="token comment" spellcheck="true">// 允许</span></code></pre><ul><li>不建议在宏后面加上&#x3D;&#x3D;;&#x3D;&#x3D;，预处理器会把分号当成宏对额一部分</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> A 10;         </span><span class="token comment" spellcheck="true">// 禁止</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">==</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错 </span></code></pre><ul><li>我定义的的宏的名字和大部分程序员一样，都使用了大写，建议大家使用，这样更加醒目</li></ul><h3 id="宏的作用"><a href="#宏的作用" class="headerlink" title="宏的作用"></a>宏的作用</h3><p>谈起宏的作用，永远逃不过<strong>注释和替换</strong>的关系，后面我要先谈一谈什么是注释。</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>宏的替换是很简单的，就是一个简单的文本替换，发生在预处理阶段。这一点我们没有什么可以疑惑的，不过我还是用图片表示一下吧，方便大家理解。</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021010532.png" alt="image-20220402101018414"></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>所谓的注释就是我们给代码一个解释，解释变量的命名或者函数的作用等等，这些我们是都知道的，在C语言中存在两种注释的方法</p><ol><li>行注释  <strong>&#x2F;&#x2F;</strong>           C++风格</li><li>块注释   <strong>&#x2F;*   *&#x2F;</strong></li></ol><p>这里我用图片表示一下就可以了，下面也是他们的区别</p><ul><li>行注释只能注释一行</li><li>块注释可以注释多行</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204020954732.png" alt="image-20220402095438589"></p><h5 id="注释的内容经过预处理后变成了什么？"><a href="#注释的内容经过预处理后变成了什么？" class="headerlink" title="注释的内容经过预处理后变成了什么？"></a>注释的内容经过预处理后变成了什么？</h5><p>这个才是我们希望关注的问题，究竟是被删除了？还是有其他的方法？我们是不是可以按照下面的写代码呢？，这都是我们需要解决的问题。我们在Linux环境下演示。</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> par<span class="token comment" spellcheck="true">/*a*/</span>ent <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021004026.png" alt="image-20220402100429914"></p><p>从这里我们就可以看出，&#x3D;&#x3D;所谓的注释，就是把我们解释的内容变成一个空格&#x3D;&#x3D;，这一点是非常重要的。</p><h3 id="注释和宏替替换哪个先开始"><a href="#注释和宏替替换哪个先开始" class="headerlink" title="注释和宏替替换哪个先开始"></a>注释和宏替替换哪个先开始</h3><p>我们可能会有一些疑惑，既然注释和宏都会发生替换，那么他们哪个是先执行的呢？</p><p>这里我们直接给出结论，是&#x3D;&#x3D;先发生去注释 ,后执行宏替换&#x3D;&#x3D;，下面都是举例子来证明这个结论的</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> BSC </span><span class="token comment" spellcheck="true">//      </span>      <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        BSC <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello word\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello word\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                                                              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                                                </code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021032795.png" alt="image-20220402103236721"></p><blockquote><p>注意我们开始分析了，要是先发生宏替换，后注释就是应该是下面的结果</p></blockquote><ol><li>宏BSC　发生替换，变成　／／</li><li>第一行hello word由　BSC printf(“Hello word\n”);  　变成　／／ printf(“Hello word\n”);  </li><li>发生注释，注释被替换成一个空格</li></ol><p>所以这个方法的结论，和我们我们得到结果不一样，那么只能是我们所说的结论”先发生注释替换 后执行宏替换”是正确的,有些人可能还会对这个感到疑惑,我们按照这个结论再来一遍.</p><ol><li>#define BSC &#x2F;&#x2F;    发生注释,&#x3D;&#x3D;&#x2F;&#x2F;&#x3D;&#x3D;,后面的注释是空的而已,BSC是一个不带替换结果的宏,这是允许的</li><li>后面发生宏替换,结果就和我们的一样了</li></ol><blockquote><p>刚才我们验证了C++风格的注释,我们是否可以使用 &#x2F;* &#x2F;*这样的风格来完成我们的注释呢?</p></blockquote><p>眼尖的我们一眼就可以看出,是先发生了去注释</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021053965.png" alt="image-20220402105344880"></p><h2 id="带参数的宏"><a href="#带参数的宏" class="headerlink" title="带参数的宏"></a>带参数的宏</h2><p>带参数的宏就有些麻烦了，我们先来看看例子。</p><blockquote><p>定义一个两个整数最大值的宏</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX(a,b) (a) > (b) ? (a) : (b)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311348358.png" alt="image-20220331134806315"></p><p>我们对宏的部分有自己的命名</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311354691.png" alt="image-20220331135414657"></p><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>带参数的宏也有一些要注意的地方,我们要来看看.</p><ol><li>标识符和替换列表之间一定要有空格</li><li>可以没有参数，</li><li>标识符最好带上括号,我下面重点说</li></ol><p>运算符的优先级一直是一个大问题,有时候我们不能确定用户传入什么样的参数,优先级的高低可能会造成巨大为错误,而且编译器还检测不出来</p><blockquote><p>我们想要的结果是 15,可惜了</p></blockquote><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MUL(a,b) a * b</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">MUL</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//代码  2 + 1 * 2 + 3 = 7</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311506697.png" alt="image-20220331150615650"></p><h2 id="宏定义中的运算符"><a href="#宏定义中的运算符" class="headerlink" title="宏定义中的运算符"></a>宏定义中的运算符</h2><p>这里我来简绍一下宏定义中的两个运算符,这两运算符有很大的作用</p><ol><li>#       字符串化运算符</li><li>##    粘合运算符</li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="# 运算符"></a># 运算符</h3><p>#是字符串化运算符,它可以将数据字符串化,在宏中我们使用#1 可以把1转化成字符串 “1”.下面有一个例子</p><blockquote><p>我们希望得到这样的结果,&#x3D;&#x3D;每输入一个变量,既能打印出变量的值,也能显示变量名&#x3D;&#x3D;</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311515050.png" alt="image-20220331151523009"></p></blockquote><p>要是我们要求的数据多了,一点一点写可能不是一个好办法,函数也完不成我们想要的任务,但是借助 <strong>#</strong> 我们是可以的</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PRINT(n) printf(#n " is value %d\n",n)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token function">PRINT</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PRINT</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PRINT</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311517800.png" alt="image-20220331151523009"></p><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="## 运算符"></a>## 运算符</h3><p>名如其人,##就是一个可以粘合多个字符的运算符</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> A(n) n##n</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311523468.png" alt="image-20220331152314428"></p><blockquote><p>注意一下,##好象不支持嵌套</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> A(n) n##n</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">A</span> <span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311527028.png" alt="image-20220331152703993"></p><blockquote><p>参数可以为空或者少一点</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> N(a,b,c) a##b##c</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> <span class="token function">N</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> <span class="token function">N</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> <span class="token function">N</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"===============\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> <span class="token function">N</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> <span class="token function">N</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> <span class="token function">N</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021932065.png" alt="image-20220402193254988"></p><h1 id="宏的优缺点"><a href="#宏的优缺点" class="headerlink" title="宏的优缺点"></a>宏的优缺点</h1><p>我虽然很推崇宏,但是很少使用宏的特点,一般就是就是定义一个数组的容量.不过大家还是要知道这些优点和缺点,以便我们未来可能会使用到</p><blockquote><p>优点</p></blockquote><ol><li>相对于函数,宏的速度可能更快一点,函数需要开辟栈帧</li><li>宏容易修改数据</li><li>宏可以出现在代码的任何位置</li><li>宏不像变量一样有作用域,,他的作用范围是在被定义之后</li></ol><blockquote><p>宏可以出现在代码的任何位置</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">define</span> A 10</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311501958.png" alt="image-20220331150117914"></p><blockquote><p>作用范围</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021115417.png" alt="image-20220402111537356"></p><blockquote><p>缺点</p></blockquote><ol><li>编译后代码可能会变大，每次使用宏，都会发生替换</li><li>无法使用一个指针指向宏</li><li>宏没有参数类型检查</li><li>宏可能会不止一次计算它的参数</li></ol><blockquote><p>这里重点说一下第四条.我们使用一下代码,计算两个数的最大值</p></blockquote><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX(a,b) (a) > (b) ? (a) : (b)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311454966.png" alt="image-20220331145443926"></p><p>是不是很奇怪,我们得到了最大值,但是i的值却不是我们想要的,实际上代码经过预处理后面,编程了下面的代码</p><p>i被错误的执行了两次++</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h1><p>C语言也自己定义了一部分宏,这些我们是可以直接使用的</p><table><thead><tr><th align="center">名字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">_<em>FILE</em>_</td><td align="center">打印文件位置</td></tr><tr><td align="center">_<em>LINE</em>_</td><td align="center">打印这一行代码所在的行数</td></tr><tr><td align="center">_<em>DATE</em>_</td><td align="center">编译的日期</td></tr><tr><td align="center">_<em>TIME</em>_</td><td align="center">编译的时间</td></tr><tr><td align="center">_<em>STDC</em>_</td><td align="center">如果编译器符合C标准(C89&#x2F;C99) ,就是 1,否则就是 就是未定义</td></tr></tbody></table><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf("%d\n", __STDC__); //　VS2020 支持部分C语言</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311553208.png" alt="image-20220331155358112"></p><h2 id="C99增加的几个预定义宏"><a href="#C99增加的几个预定义宏" class="headerlink" title="C99增加的几个预定义宏"></a>C99增加的几个预定义宏</h2><p>除此之外C99标准下有增加了几个宏,简单简绍一下，了解就可以了。</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203311609135.png" alt="image-20220331160926955"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>我们要是知道这些代码会出现什么现象，就可以理解宏了</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// demo1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> X 3</span><span class="token macro property">#<span class="token directive keyword">define</span> Y X * 2</span><span class="token macro property">#<span class="token directive keyword">undef</span> X</span><span class="token macro property">#<span class="token directive keyword">define</span> X 2</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> Y<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021754319.png" alt="image-20220402175436206"></p><blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// demo2</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token macro property">#<span class="token directive keyword">define</span> X 3</span>    <span class="token comment" spellcheck="true">//#undef X</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021755736.png" alt="image-20220402175519645"></p><blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// demo3</span><span class="token macro property">#<span class="token directive keyword">define</span> X 3</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token macro property">#<span class="token directive keyword">undef</span> X</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021755431.png" alt="image-20220402175552333"></p><h1 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h1><p>总算来到这里,要是你看累了,可以稍微休息你会,我下面接着分享,关于条件编译我们还要说很多.</p><h2 id="什么是条件编译"><a href="#什么是条件编译" class="headerlink" title="什么是条件编译"></a>什么是条件编译</h2><p>所谓的条件编译就是我们根据预处理的结果来修改代码,就像我们手持一把手术刀,看到哪里由顽疾,就把它切除一样.</p><h2 id="为何要有条件编译"><a href="#为何要有条件编译" class="headerlink" title="为何要有条件编译"></a>为何要有条件编译</h2><p>我们通过条件编译的本质是可以完成代码的裁剪工作,这就意味着我们可以通过裁剪代码来使程序可以在不同的环境下运行,也可以使一些功能开放给用户,一些开放给付费用户</p><ol><li>可以只保留当前最需要的代码逻辑，其他去掉。可以减少生成的代码大小</li><li>可以写出跨平台的代码，让一个具体的业务，在不同平台编译的时候，可以有同样的表现</li></ol><blockquote><p>关于使用条件编译,举一个例子吧.<br>我们经常听说过，某某版代码是完全版&#x2F;精简版，某某版代码是商用版&#x2F;校园版，某某软件是基础版&#x2F;扩展版等。<br>其实这些软件在公司内部都是项目，而项目本质是有多个源文件构成的。所以，所谓的不同版本，本质其实就是功能的有<br>无，在技术层面上，公司为了好维护，可以维护多种版本，当然，也可以使用条件编译，你想用哪个版本，就使用哪种条件<br>进行裁剪就行。  </p></blockquote><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>我们大该会有两组指令要谈.</p><ol><li>#if 和 #endif</li><li>#ifdef  和 #ifndef</li></ol><h3 id="if-和-endif"><a href="#if-和-endif" class="headerlink" title="#if 和 #endif"></a>#if 和 #endif</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span>   常量表达式1</span>      <span class="token operator">&lt;</span>代码块<span class="token number">1</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">elif</span> 常量表达式2</span>      <span class="token operator">&lt;</span>代码块<span class="token number">2</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">else</span> </span>      <span class="token operator">&lt;</span>代码块<span class="token number">2</span><span class="token operator">></span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>我们直接来看看它的作用吧,一目了然.</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> M 10</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> M</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M已经被定义\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021142716.png" alt="image-20220402114209649"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>**这里和 if else判断语句作用差不多,我们也可以添加#elif, #else等指令,使用的方法和作用都是和 if else一样.**不过它们是在预处理阶段进行的,我先翻译一下.</p><blockquote><p>我们是不是定义了宏 M ,要是执行printf函数,并且把指令删除  ,要是没有定义M,就把这部分代码删除</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> M</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M已经被定义\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021319872.png" alt="image-20220402131940722"></p><p>我们假设一个不存定义的宏</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021321270.png" alt="image-20220402132130134"></p><blockquote><p>这里我想说一下,<strong>只要宏被定义了并且给了值才可以才可以进行替换</strong>,&#x3D;&#x3D;这个命令的本质是判断#if 后面的值,0 就是假,非零就是真&#x3D;&#x3D;</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021325142.png" alt="image-20220402132551958"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021340778.png" alt="image-20220402134059676"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021341515.png" alt="image-20220402134125418"></p><h3 id="运算符-defined"><a href="#运算符-defined" class="headerlink" title="运算符  defined"></a>运算符  defined</h3><p>我们前面说了# 和##运算符,不过那是在宏中使用的,现在这个运算符defined,是在条件编译中作用.我们一起俩看看他的作用.我们上面的指令是有一定的缺陷的,他的本质是替换,而我们下面所所说就可以很好的区别开来</p><p>它会判断我们的宏是不是定义了,不管有没有值,也不管值是多少,只要定义了就是1,否则就是0</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021344666.png" alt="image-20220402134414563"></p><h3 id="ifdef-和-ifndef"><a href="#ifdef-和-ifndef" class="headerlink" title="#ifdef  和 #ifndef"></a>#ifdef  和 #ifndef</h3><p>这是另一组条件编译,我们可以认为它是上面的简写,我翻译一下就可以了</p><ul><li>ifdef  M 如果定义了宏 M  保留它该保留的代码</li><li>#ifndef  如果没有定义宏 M, 保留它该保留的代码.这个主要用于 防止头文件被重复引用</li></ul><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><ol><li>宏也可以在命令行中定义</li><li>条件编译支持嵌套,规则和if else一样</li></ol><h1 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h1><p>除了上面的一些,我们还有其他的一些指令,我们来来了解一下，这些指令都是为了预处理服务的,我们平常很少使用</p><h2 id="error"><a href="#error" class="headerlink" title="#error"></a>#error</h2><p>&#x3D;&#x3D;核心作用是可以进行自定义编译报错&#x3D;&#x3D;</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">ifndef</span> __CPP</span><span class="token macro property">#<span class="token directive keyword">error</span> 老铁，你用的不是C++的编译器哦</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021800999.png" alt="image-20220402180036872"></p><h2 id="line"><a href="#line" class="headerlink" title="#line"></a>#line</h2><p>&#x3D;&#x3D;本质其实是可以定制化你的文件名称和代码行号，很少使用&#x3D;&#x3D;</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %d\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">line</span> 60 "hehe.h" </span><span class="token comment" spellcheck="true">//定制化完成</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %d\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021803251.png" alt="image-20220402180336151"></p><h2 id="pragma"><a href="#pragma" class="headerlink" title="#pragma"></a>#pragma</h2><p>&#x3D;&#x3D;#pragma message()作用：可以用来进行对代码中特定的符号(比如其他宏定义)进行是否存在进行编译时消息提醒&#x3D;&#x3D;</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> M 10</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> M</span><span class="token macro property">#<span class="token directive keyword">pragma</span> message("M宏已经被定义了")</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021807467.png" alt="image-20220402180703393"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//#define M 10</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> M</span><span class="token macro property">#<span class="token directive keyword">pragma</span> message("M宏已经被定义了")</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202204021807189.png" alt="image-20220402180750107"></p><h3 id="pragma和-error的区别"><a href="#pragma和-error的区别" class="headerlink" title="#pragma和#error的区别"></a>#pragma和#error的区别</h3><ol><li>#pragma只是提示，程序仍旧执行</li><li>#error是报错，程序中断</li></ol><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>这个挺简单的，就是代码在经过预处理后将文件纳入代码中,关于文件我们有时会出现&#x3D;&#x3D;&lt;&gt;&#x3D;&#x3D;&#x3D;&#x3D;””&#x3D;&#x3D;这两种情况,我们希望能够了解他们的不同</p><ol><li>&lt;&gt;  直接去标准库中寻找头文件                                                 适合标准库</li><li>“”  先去当前目录下寻找,找不到的话再去标准库中寻找           适合自己定义的头文件</li></ol><h3 id="防止头文件被重复引用"><a href="#防止头文件被重复引用" class="headerlink" title="防止头文件被重复引用"></a>防止头文件被重复引用</h3><p>我们避免多次引用头文件,代码块变大,所以使用条件编译来防止头文件被重复引用</p><blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __TEST_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __TEST_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">// 如果没有定义 \__TEST_H__宏,那就定义它,把头文件包含在这一中间</span><span class="token comment" spellcheck="true">// 后面我们要是再次判断这个宏,就会发现已经被定义了,所以就删除</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __TEST_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __TEST_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ5%20%20%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ5%20%20%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 HJ5 <a href="https://www.nowcoder.com/practice/8f3df50d2b9043208c5eed283d1d4da6?tpId=37&tqId=21228&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">进制转换</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203092124220.png" alt="image-20220309212407103"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ7%20%20%E5%8F%96%E8%BF%91%E4%BC%BC%E5%80%BC/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ7%20%20%E5%8F%96%E8%BF%91%E4%BC%BC%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 HJ7 : <a href="https://www.nowcoder.com/practice/3ab09737afb645cc82c35d56a5ce802a?tpId=37&tqId=21230&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">取近似值</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> n <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">-</span>ret<span class="token operator">>=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ret<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203102311682.png" alt="image-20220310231139598"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ9%20%E6%8F%90%E5%8F%96%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B4%E6%95%B0/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ9%20%E6%8F%90%E5%8F%96%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>HJ9</strong> ：<a href="https://www.nowcoder.com/practice/253986e66d114d378ae8de2e6c4577c1?tpId=37&tqId=21232&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">提取不重复的整数</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//12</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ret<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ret<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112337136.png" alt="image-20220311233724045"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ12%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ12%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>HJ12</strong> <a href="https://www.nowcoder.com/practice/e45e078701ab4e4cb49393ae30f1bb04?tpId=37&tqId=21235&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">字符串反转</a></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#include &lt;stdio.h></span><span class="token comment" spellcheck="true">#include &lt;assert.h></span><span class="token comment" spellcheck="true">#include &lt;string.h></span>void MyReserve<span class="token punctuation">(</span>char<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    assert<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> strlen<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    char<span class="token operator">*</span> <span class="token keyword">left</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>    char<span class="token operator">*</span> <span class="token keyword">right</span>  <span class="token operator">=</span> p<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">left</span> <span class="token operator">&lt;</span> <span class="token keyword">right</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        char ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">left</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token keyword">left</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">right</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token keyword">right</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>        <span class="token keyword">left</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>        <span class="token keyword">right</span><span class="token comment" spellcheck="true">--;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">int</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    char arr<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;0&amp;#125;;</span>    scanf<span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    MyReserve<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203122008427.png" alt="image-20220312200830349"></p><blockquote><p>牛客网 <strong>HJ13</strong> <a href="https://www.nowcoder.com/practice/48b3cb4e3c694d9da5526e6255bb73c3?tpId=37&tags=&title=&difficulty=0&judgeStatus=0&rp=1&sourceUrl=/exam/oj/ta?tpId=37">句子逆序</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">MyReserve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> left <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> right <span class="token operator">=</span> p <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ret <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>        <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>        <span class="token operator">*</span>right <span class="token operator">=</span> ret<span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\0'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token function">MyReserve</span><span class="token punctuation">(</span>p <span class="token operator">+</span> j<span class="token punctuation">,</span> i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">MyReserve</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//char* arr = "I am a boy";</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203122035430.png" alt="image-20220312203554367"></p><blockquote><p>牛客网 <strong>HJ15</strong> <a href="https://www.nowcoder.com/practice/440f16e490a0404786865e99c6ad91c9?tpId=37&tqId=21238&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">求int型正整数在内存中存储时1的个数</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//n &amp; (n-1)  会把二进制数列中最右边的1去掉</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203122049259.png" alt="image-20220312204944191"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ21%20%E7%AE%80%E5%8D%95%E5%AF%86%E7%A0%81/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ21%20%E7%AE%80%E5%8D%95%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>HJ21</strong> <a href="https://www.nowcoder.com/practice/7960b5038a2142a18e27e4c733855dac?tpId=37&tqId=21244&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">简单密码</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ch <span class="token operator">=</span> ch <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'f'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'3'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'i'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'4'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'j'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'k'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'5'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'o'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'n'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'6'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'p'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'7'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'u'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'v'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'8'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'w'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'x'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'z'</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> <span class="token string">'9'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203132232296.png" alt="image-20220313223236158"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ22%20%E6%B1%BD%E6%B0%B4%E7%93%B6/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ22%20%E6%B1%BD%E6%B0%B4%E7%93%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>HJ22</strong> <a href="https://www.nowcoder.com/practice/fe298c55694f4ed39e256170ff2c205f?tpId=37&tqId=21245&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">汽水瓶</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token function">func</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161639441.png" alt="image-20220316163915309"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ58%20%E8%BE%93%E5%85%A5n%E4%B8%AA%E6%95%B4%E6%95%B0%EF%BC%8C%E8%BE%93%E5%87%BA%E5%85%B6%E4%B8%AD%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ58%20%E8%BE%93%E5%85%A5n%E4%B8%AA%E6%95%B4%E6%95%B0%EF%BC%8C%E8%BE%93%E5%87%BA%E5%85%B6%E4%B8%AD%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>HJ58</strong> <a href="https://www.nowcoder.com/practice/69ef2267aafd4d52b250a272fd27052c?tpId=37&tqId=21281&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?difficulty=1&page=1&pageSize=50&search=&tpId=37&type=37&difficulty=1&judgeStatus=undefined&tags=&title=">输入n个整数，输出其中最小的k个</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> </span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> e1<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>e1 <span class="token operator">-</span> <span class="token operator">*</span>e2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">qsort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20KY11%20%20%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20KY11%20%20%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>KY11</strong>  <a href="https://www.nowcoder.com/practice/4b91205483694f449f94c179883c1fef?tpId=60&&tqId=29483&rp=1&ru=/activity/oj&qru=/ta/tsing-kaoyan/question-ranking">二叉树遍历</a> </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode left<span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TreeNode <span class="token function">createTree</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> null <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20%20HJ2%20%E8%AE%A1%E7%AE%97%E6%9F%90%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20%20HJ2%20%E8%AE%A1%E7%AE%97%E6%9F%90%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <a href="https://www.nowcoder.com/practice/a35ce98431874e3a820dbe4b2d0508b1?tpId=37&tqId=21225&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title="><strong>HJ2</strong> <strong>计算某字符出现次数</strong></a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ret2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203042008536.png" alt="image-20220304200855407"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20%20JZ36%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20%20JZ36%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网  JZ36 <a href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&&tqId=11179&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking">二叉搜索树与双向链表</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**public class TreeNode &amp;#123;    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) &amp;#123;        this.val = val;    &amp;#125;&amp;#125;*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TreeNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConvertChild</span><span class="token punctuation">(</span>TreeNode pRootOfTree<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRootOfTree <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">ConvertChild</span><span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印</span>        pRootOfTree<span class="token punctuation">.</span>left <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>right <span class="token operator">=</span> pRootOfTree<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> pRootOfTree<span class="token punctuation">;</span>        <span class="token function">ConvertChild</span><span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> TreeNode <span class="token function">Convert</span><span class="token punctuation">(</span>TreeNode pRootOfTree<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRootOfTree <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">ConvertChild</span><span class="token punctuation">(</span>pRootOfTree<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode head  <span class="token operator">=</span> pRootOfTree<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20%20%E6%97%A7%E9%94%AE%E7%9B%98%E6%89%93%E5%AD%97/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20%20%E6%97%A7%E9%94%AE%E7%9B%98%E6%89%93%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网  <a href="https://www.nowcoder.com/questionTerminal/f88dafac00c8431fa363cd85a37c2d5e">旧键盘打字)</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  String <span class="token function">func</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span>String str2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Character ch<span class="token operator">:</span> str2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Character ch<span class="token operator">:</span>str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   str3<span class="token operator">+=</span>ch<span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str3<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20BM33%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20BM33%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20CM7%20%EF%BC%9A%E5%88%86%E6%9D%A1%E4%BB%B6%E5%87%BA%E6%A0%88/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20CM7%20%EF%BC%9A%E5%88%86%E6%9D%A1%E4%BB%B6%E5%87%BA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 CM7 ：<a href="https://www.nowcoder.com/practice/6235a76b1e404f748f7c820583125c50?tpId=8&&tqId=11010&rp=3&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking">分条件出栈</a> </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CatDogAsylum</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> y<span class="token punctuation">;</span> i <span class="token operator">></span>head <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">asylum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ope<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ope <span class="token operator">==</span>null<span class="token operator">||</span>ope<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>ope<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ope<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//add</span>                elem<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> ret <span class="token operator">=</span> elem<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>                    head<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span>head<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tail<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">int</span> ret <span class="token operator">=</span> elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//  从  head  将其覆盖</span>                            <span class="token function">func</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span>head<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                            head<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>tail<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ope<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span>head<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tail<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">int</span> ret <span class="token operator">=</span> elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//  从  head  将其覆盖</span>                            <span class="token function">func</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span>head<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                            head<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>tail<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// write code here</span>        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031947967.png" alt="image-20220303194736883"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ3%20%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ3%20%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每日一题   牛客网 HJ3 <a href="https://www.nowcoder.com/practice/3245215fffb84b7b81285493eae92ff0?tpId=37&tqId=21226&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">明明的随机数</a></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1001</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061956728.png" alt="image-20220306195643647"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ4%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E9%9A%94/"/>
      <url>/2022/06/24/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91%20HJ4%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E9%9A%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牛客网 <strong>HJ4</strong> <a href="https://www.nowcoder.com/practice/d9162298cb5a437aad722fccccaae8a7?tpId=37&tqId=21227&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">字符串分隔</a> </p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203082054205.png" alt="image-20220308205439086"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%AF%A6%E8%A7%A3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%EF%BC%882%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%AF%A6%E8%A7%A3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>这个主要说一下，**%5d 、%-5d、%2.3f**等这些转换说明的作用和区别，这里面归根到底都是   <strong>%m.pX</strong> 的变体，</p><p>下面我就依次说一下 m、p、X都是什么</p></blockquote><ul><li>X    数据输出格式             </li><li>m   最小字段宽度               :point_right:<a href="#%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AE%B5%E5%AE%BD%E5%BA%A6">最小字段宽度</a></li><li>p    精度                               :point_right:<a href="#%E7%B2%BE%E5%BA%A6">精度</a></li></ul><h2 id="数据输出格式"><a href="#数据输出格式" class="headerlink" title="数据输出格式"></a>数据输出格式</h2><blockquote><p>数据输出的格式与很多，下面我列出一张表</p></blockquote><table><thead><tr><th align="center">X</th><th align="center">例子</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">d</td><td align="center">%d</td><td align="center">打印int型，m默认1</td></tr><tr><td align="center">f</td><td align="center">%f</td><td align="center">打印float型，小数点后默认6位</td></tr><tr><td align="center">e</td><td align="center">%e</td><td align="center">以科学计数法的形式打印,小数点后默认6位</td></tr><tr><td align="center">g</td><td align="center">%g</td><td align="center">以科学计数法或者float型打印，方式看g的大小选择</td></tr></tbody></table><h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><blockquote><p>例子</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1001.0f</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%e\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031848483.png" alt="image-20220303184859452"></p><h3 id="g"><a href="#g" class="headerlink" title="g"></a>g</h3><blockquote><p>例子</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1001.0f</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a == %g\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1000000.132f</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b == %g\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031851760.png" alt="image-20220303185106718"></p><h2 id="最小字段宽度"><a href="#最小字段宽度" class="headerlink" title="最小字段宽度"></a>最小字段宽度</h2><blockquote><p>m 代表我们要输出的数值占据多少字宽，我们先看看例子</p></blockquote><p>这个代码是指我们 为a 分配10个字宽，要是a的数据长度不够10个，用<strong>空格</strong>填充</p><ul><li><strong>+</strong> 表示数据在后</li><li><strong>-</strong> 表示数据在前</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%10d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// + 号省略</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031815841.png" alt="image-20220303181548802"></p><p>或许有人可能会疑惑，当我们数值的长度<strong>大于</strong> m 的值会发生什么，其实从m的名字就可以知道了，m是最小字段宽度，但我们给的数据的长度大于m，会打印出数值的值</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11111111</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031821724.png" alt="image-20220303182119693"></p><blockquote><p>这里要提一句   <strong>%10d</strong> 当中， m &#x3D; 10, p &#x3D; 0 ,X &#x3D; d  当我们将p省略时，逗号也一起省略了</p></blockquote><h2 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h2><blockquote><p>谈到精度就要提到<strong>浮点数</strong>了，也就是我们数学中的小数，我们都知道小数是由精度的，比如说  <em><strong>小数点后保留三位</strong></em>，这在C语言中也可以通过p表示出来</p></blockquote><ul><li><strong>%.2f</strong>  表示 小数点保留2位</li><li><strong>%4.2f</strong>  表示最小字段是4，小数点后保留2位</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%15.2f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031835221.png" alt="image-20220303183512186"></p><blockquote><p><strong>%.2f</strong> 要是我们省略m，逗号不跟着省略 </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E5%8F%96%E6%95%B4%E5%92%8C%E8%B4%9F%E6%95%B0%E5%8F%96%E6%A8%A1/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E5%8F%96%E6%95%B4%E5%92%8C%E8%B4%9F%E6%95%B0%E5%8F%96%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>今天分为两个大模块来具体谈一下取模和负数，顺便说一下取余和取模的差别。</p><h1 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h1><p>我们都知道  5 &#x2F; 2 &#x3D; 2，这是我们记住的，不过我们想过没有，为什么结果是2呢？有人可能这样想在数学中 5 &#x2F; 2 &#x3D; 2.5，结果是整型，去尾，所以是2。那为什么不是四舍五入得到 3 呢？<br>下面我们谈谈取整的几种方式。</p><h2 id="零向取整"><a href="#零向取整" class="headerlink" title="零向取整"></a>零向取整</h2><h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><pre class=" language-c"><code class="language-c">demo1<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2.9</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>看看结果<br><img src="https://img-blog.csdnimg.cn/374ee035db07443b97e4b0f87b7f84ba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>从这里可以看出 一定不是四舍五入，否则-2应该是-3，实际上这就是<strong>零向取整</strong> ， <strong>本质是向0靠近</strong></p><p><img src="https://img-blog.csdnimg.cn/bc436362ec124c02b0ac1bf22d818a5f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这也解决了 5 &#x2F; 2 &#x3D; 2的问题，C语言默认采用零向取整<br>这里有一个函数<br><img src="https://img-blog.csdnimg.cn/f447c4af610e4ab4a6bc23b31451a642.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c">demo2<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/caa5235df0f54c2e9e9774050db2fcaa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="向-∞取整"><a href="#向-∞取整" class="headerlink" title="向-∞取整"></a>向-∞取整</h2><p>这里也是通过一个函数来实现  floor<br><img src="https://img-blog.csdnimg.cn/fc65420c9fbd4a46a722ce3170113edd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="样例代码-1"><a href="#样例代码-1" class="headerlink" title="样例代码"></a>样例代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span> </span><span class="token comment" spellcheck="true">//因为使用了floor函数，需要添加该头文件</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本质是向-∞取整，注意输出格式要不然看不到结果</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-3</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-3</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>看看结果是不是正确的呢。<br><img src="https://img-blog.csdnimg.cn/f6f5f2b5bed54563a4a6c8bd683d558b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> <strong>地板取整的本质是向-∞取整</strong><br> <img src="https://img-blog.csdnimg.cn/ddea5a2991414cc9890be1708f17b1c2.png" alt="在这里插入图片描述"></p><h2 id="向-∞取整-1"><a href="#向-∞取整-1" class="headerlink" title="向 +∞取整"></a>向 +∞取整</h2><p>本质：<br><img src="https://img-blog.csdnimg.cn/82079faa1a0f432e912f24a473876208.png" alt="在这里插入图片描述"></p><h3 id="样例代码-2"><a href="#样例代码-2" class="headerlink" title="样例代码"></a>样例代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本质是向+∞取整，注意输出格式要不然看不到结果</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-2</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-2</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/27912d78402b484c8267a0d0ef712ffd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="四舍五入取整"><a href="#四舍五入取整" class="headerlink" title="四舍五入取整"></a>四舍五入取整</h2><p>我们来到了我们最熟悉的的取整方式了</p><h3 id="样例代码-3"><a href="#样例代码-3" class="headerlink" title="样例代码"></a>样例代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本质是四舍五入</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/36889f0695a248b99bace74208df5ed6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>不同的场景要求不同的取整方式，到这里，四种取整方式已经说完了，下面正式进入我们今天的重点  负数取余</p><h1 id="负数取余"><a href="#负数取余" class="headerlink" title="负数取余"></a>负数取余</h1><h2 id="取模概念："><a href="#取模概念：" class="headerlink" title="取模概念："></a>取模概念：</h2><blockquote><p>如果a和d是两个自然数，d非零，可以证明存在两个唯一的整数 q 和 r，满足 a &#x3D; q*d + r 且0 ≤ r &lt; d。其中，q被称为商，r 被称为余数。</p></blockquote><h2 id="样例代码-4"><a href="#样例代码-4" class="headerlink" title="样例代码"></a>样例代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf("%d\n", a/d); //C语言中是-3，很好理解</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">%</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>在VS中结果是</strong><br><img src="https://img-blog.csdnimg.cn/f97ca38033ed4305adcb5941226e9497.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>Linux中</strong><br><img src="https://img-blog.csdnimg.cn/2d9a99ef1b20416b90b8fa876ad0f3f9.png" alt="在这里插入图片描述"><br>我们不是说余数大于0吗？是不是定义错了<br>实际上</p><blockquote><p>因为在C中，现在-10%3出现了负数，根据定义：满足 a &#x3D; q<em>d + r 且0 ≤ r &lt; d，C语言中的余数，是不满足定义的，<br>因为，r&lt;0了。<br>故，大家对取模有了一个修订版的定义：<br>如果a和d是两个自然数，d非零，可以证明存在两个唯一的整数 q 和 r，满足 a &#x3D; q</em>d + r , q 为整数，且0 ≤ |r|<br>&lt; |d|。其中，q 被称为商，r 被称为余数。</p></blockquote><p>*<em><strong>那在python中呢</strong>？</em>*</p><p><img src="https://img-blog.csdnimg.cn/b8fc2d8831454d69afaa4fb5532149cb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>原因是：我们取整的方式不同  采用向-∞取整<br><img src="https://img-blog.csdnimg.cn/52f39429c7ed46919a9e5db6e83bf070.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="取余和取模的区别"><a href="#取余和取模的区别" class="headerlink" title="取余和取模的区别"></a>取余和取模的区别</h2><ul><li>取余：尽可能让商，进行向0取整。</li><li>取模：尽可能让商，向-∞方向取整</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>同一个代码，在不同的语言中的取余结果有可能不同</li><li>方式决定商，商决定余数</li><li>取整是整数 向零取整和 +∞取整是一样的  所以余数也一样</li><li>参与取整的两个数字同号，取模等价于取余</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%89%AB%E9%9B%B7%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%89%AB%E9%9B%B7%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E6%89%AB%E9%9B%B7">TOC</a></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>这是一个关于扫雷小游戏的初级版本，后面我会加上更高的版本</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>先看看我的成果，让我们知道大概这个程序的结构<br><img src="https://img-blog.csdnimg.cn/ea19b0738fcb4abda9081b04ac4515cb.png" alt="在这里插入图片描述"></p><h2 id="思索"><a href="#思索" class="headerlink" title="思索"></a>思索</h2><blockquote><p>我们棋盘的数据类型布置为哪种？<br>int 和 char 都可以，这里建议使用char</p></blockquote><blockquote><p>我们为什么要布置两个棋盘？<br>当格子周围只有一个雷时，我们将‘ 1 ’放入其中，下一次排雷时会将其当作雷计算</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>我们和写三子棋一样，依旧通过多文件的方式来写代码</p><blockquote><p>头文件    :                   game.h<br>测试文件 :                   test.c<br>函数实现文件:             game.c</p></blockquote><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">define</span> ROW 9</span><span class="token macro property">#<span class="token directive keyword">define</span> COL 9</span><span class="token macro property">#<span class="token directive keyword">define</span> ROWS ROW + 2</span><span class="token macro property">#<span class="token directive keyword">define</span> COLS COL + 2</span><span class="token macro property">#<span class="token directive keyword">define</span> MINE 10</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token comment" spellcheck="true">//初始化棋盘</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Init_board</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印棋盘</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置雷</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Setmine</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排查雷</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Searchmine</span><span class="token punctuation">(</span><span class="token keyword">char</span> boardmine<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> boardshow<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里解释一下为什么定义  ROWS COLS  这个两个宏</p></blockquote><blockquote><p>对于扫雷游戏，假如我们要进行排雷，我们点的那个格子没有雷，就会显示周围有几个雷。但对于四边的的格子无法进行很好的查找，到时候最边上我们不布置雷就可以。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e5355196282e4a519c4702bf081326c5.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/bd667f666a064361a502ad30c5a6bb57.png" alt="在这里插入图片描述"></p><h3 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"game.h"</span></span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***********************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****   0.exit    *****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****   1.play    *****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***********************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> mine<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//雷盘</span>    <span class="token keyword">char</span> show<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//打印棋盘</span>    <span class="token comment" spellcheck="true">// 初始化棋盘</span>    <span class="token function">Init_board</span><span class="token punctuation">(</span>mine<span class="token punctuation">,</span>ROWS<span class="token punctuation">,</span>COLS<span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Init_board</span><span class="token punctuation">(</span>show<span class="token punctuation">,</span>ROWS<span class="token punctuation">,</span>COLS<span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印棋盘</span>    <span class="token comment" spellcheck="true">/*Display(mine, ROW, COL);    Display(show, ROW, COL);*/</span>    <span class="token comment" spellcheck="true">//设置雷</span>    <span class="token function">Setmine</span><span class="token punctuation">(</span>mine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Display(mine, ROW, COL);</span>    <span class="token function">Display</span><span class="token punctuation">(</span>show<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排查雷</span>    <span class="token function">Searchmine</span><span class="token punctuation">(</span>mine<span class="token punctuation">,</span>show<span class="token punctuation">,</span>ROW<span class="token punctuation">,</span>COL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="函数实现文件"><a href="#函数实现文件" class="headerlink" title="函数实现文件"></a>函数实现文件</h3><p><strong>初始化函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Init_board</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>雷盘初始化为<strong>‘ 0 ’</strong><br>打印初始化为<strong>‘ * ’</strong> </p></blockquote><p><strong>打印棋盘</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里有一部分打印第几行第几列的代码，让玩家更快找到自己的要排查的位置</p></blockquote><p><strong>布置雷</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Setmine</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MINE<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> ROW <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> COL <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>我们将雷都布置为‘ 1 ’</p></blockquote><p><strong>查找周围雷的个数</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Findmine</span><span class="token punctuation">(</span><span class="token keyword">char</span> boardmine<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  boardmine<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> boardmine<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> boardmine<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> boardmine<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>        boardmine<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> boardmine<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> boardmine<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> boardmine<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>雷都为‘ 1 ’，所以只需要查找周围的和就行</p></blockquote><p><strong>排查雷</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Searchmine</span><span class="token punctuation">(</span><span class="token keyword">char</span> boardmine<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> boardshow<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> ROW<span class="token operator">*</span>COL<span class="token operator">-</span>MINE<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你的坐标："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> row <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> col<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>boardmine<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"很遗憾你被炸死了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">Findmine</span><span class="token punctuation">(</span>boardmine<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                boardshow<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> ret <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token function">Display</span><span class="token punctuation">(</span>boardshow<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入坐标错误,请重新输入\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//endofwhile</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> ROW <span class="token operator">*</span> COL <span class="token operator">-</span> MINE<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你赢了!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>游戏结束只会有两种情况</p><ul><li>炸死</li><li>找出所有雷</li></ul><blockquote><p>所以当 count &#x3D;&#x3D; ROW * COL - MINE满足时也会退出</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C1/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C1/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>这个模块很少使用，今天就稍微的谈一谈</p></blockquote><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><blockquote><p>在计算机中，根据数据的组织形式，数据文件被称为文本文件或者二进制文件</p></blockquote><ul><li>文本文件      ASCII码组成     人们能够看懂</li><li>二进制文件  01组成  人看不懂</li></ul><h2 id="打开-amp-关闭文件"><a href="#打开-amp-关闭文件" class="headerlink" title="打开&amp;关闭文件"></a>打开&amp;关闭文件</h2><blockquote><p>在C语言中，我们通过代码来打开一个文件，这也是C语言强大的表现之一</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打开一个名为test.txt的文件</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关闭文件</span>    pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/a7d456b1e3f8419cbafe135fe265b059.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8e20ec8470764746a030848e6294910d.png" alt="在这里插入图片描述"></p><h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><blockquote><p>fopen是一个打开文件的函数，有两个参数，返回值是一个指向文件类型的指针</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3cf64cd770124153bc735ca1419e8e71.png" alt="在这里插入图片描述"></p><blockquote><p>下面我来解释一下，FILE* pf &#x3D; fopen(“test.txt”, “w”)</p></blockquote><h4 id="test-txt"><a href="#test-txt" class="headerlink" title="test.txt"></a>test.txt</h4><blockquote><p>test.txt是一个文件名和文件的类型，要是我们不给它指定文件的位置，计算机默认是在该代码所在的目录下，当然我们也可以指定目录</p></blockquote><pre class=" language-c"><code class="language-c">    FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"D:\\码云库\\2022:test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><img src="https://img-blog.csdnimg.cn/68cef47df2c8404e930c4928561e987e.png" alt="在这里插入图片描述"></p><h4 id="w"><a href="#w" class="headerlink" title="w"></a>w</h4><blockquote><p>这里的w是以 写 文件的形式打开的，要是该目录下没有这个文件，计算机就会自动创建一个，这里有很多打开方式，我就不一一说了，大家看一下就可以了</p></blockquote><p>当我们以 r 的形式打开，要是没有这个文件，会返回一个NULL指针<br><img src="https://img-blog.csdnimg.cn/443010fed0604940a46471a975202324.png" alt="在这里插入图片描述"></p><blockquote><p>注意，我们每一次以 w 的形式打开文件，文件里面的内容会自动清空</p></blockquote><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><blockquote><p>打开文件后，我们就可以进行往文件里面写入内容了，这会用到一些函数，不要着急，我会仔细的解释</p></blockquote><p><img src="https://img-blog.csdnimg.cn/602e7e9108bd4edbb90078bde94d5974.png" alt="在这里插入图片描述"></p><h3 id="fgetc函数"><a href="#fgetc函数" class="headerlink" title="fgetc函数"></a>fgetc函数</h3><blockquote><p> fgetc函数从文件中读取一个字符，并且文件指针往后走一个，返回的是这个字符的ASCII码值，当读取到文件尾是返回EOF</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6baed39696a842ed8aa6877eb802d23a.png" alt="在这里插入图片描述"></p><p>我们先在test.txt中存储几个字符</p><p><img src="https://img-blog.csdnimg.cn/61f395a391ec40ff94cf859f68983a72.png" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以读的的形式打开一个名为test.txt的文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写文件</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关闭文件</span>    pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="fputc函数"><a href="#fputc函数" class="headerlink" title="fputc函数"></a>fputc函数</h3><blockquote><p>这个往文件中写入的函数</p></blockquote><p><img src="https://img-blog.csdnimg.cn/23210acb0dcc41269ecb3b931fcee0a2.png" alt="在这里插入图片描述"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写文件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> ch<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关闭文件</span>    pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/f3b6fa9ed41f478fa160d038c96657c8.png" alt="在这里插入图片描述"></p><h3 id="欲知后事如何，请听下回分解"><a href="#欲知后事如何，请听下回分解" class="headerlink" title="欲知后事如何，请听下回分解"></a>欲知后事如何，请听下回分解</h3><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token comment" spellcheck="true">//把test.c 的内容拷贝到 test.txt中</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> wpf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> rpf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.c"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>wpf<span class="token punctuation">)</span><span class="token punctuation">;</span>        wpf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拷贝</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>rpf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> wpf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭文件</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>rpf<span class="token punctuation">)</span><span class="token punctuation">;</span>      rpf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>wpf<span class="token punctuation">)</span><span class="token punctuation">;</span>    wpf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/c2cbb8c4b25847b997f28ee209a3a438.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C2/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C2/</url>
      
        <content type="html"><![CDATA[<p>文件操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%AF%A6%E8%A7%A3%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%AF%A6%E8%A7%A3%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>在C语言中，我们经常使用数组，但是当我们使用数组时，我们在内存中开辟的大小已经固定下来的，所以这就引出今天的内容  – 动态内存开辟</p></blockquote><h1 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h1><h2 id="什么是动态内存开辟"><a href="#什么是动态内存开辟" class="headerlink" title="什么是动态内存开辟"></a>什么是动态内存开辟</h2><blockquote><p>说的简单点就是我们可以任意开辟我们的空间，即使后期我们发现内存不够用了也可以继续增加</p></blockquote><h2 id="动态内存的特点是什么"><a href="#动态内存的特点是什么" class="headerlink" title="动态内存的特点是什么"></a>动态内存的特点是什么</h2><blockquote><p>数组是在栈区上开辟空间，而动态内存是在堆区上开辟空间</p></blockquote><h2 id="如何进行动态内存开辟"><a href="#如何进行动态内存开辟" class="headerlink" title="如何进行动态内存开辟"></a>如何进行动态内存开辟</h2><blockquote><p>在这里C语言提供了三个函数，这些函数都在标准库stdlib.h，他们分别有各自的作用，我这里先让大家认识一下，后面细说</p></blockquote><ol><li>malloc 函数</li><li>calloc 函数</li><li>realloc 函数</li></ol><h3 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h3><blockquote><p>malloc 所执行的内存分配基于字节数而不是类型，其返回类型为 void 指针（void *），表示该指针所指向区域的数据类型未知。C++ 由于其强类型系统，实际使用该指针时需要进行强制类型转换，而 C 语言中则不必进行。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4ebd606fac67411fb6b5a0ca6a5b9e8c.png" alt="在这里插入图片描述"></p><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p> 开辟一个40个字节的空间，将1-10放到空间中</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6df0f8dc302045c7a9bc08d04ed57e3d.png" alt="在这里插入图片描述"></p><blockquote><p>这里我们会发现一些和我们期望不太一样的东西，我们一点点说</p></blockquote><h3 id="判断开辟的空间是不是空指针"><a href="#判断开辟的空间是不是空指针" class="headerlink" title="判断开辟的空间是不是空指针"></a>判断开辟的空间是不是空指针</h3><blockquote><p>实际上如果我们开辟的空间太大，我们是开辟不出来的，而且编译器会给我们返回一个NULL</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1000000000000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"开辟的空间太大，无法开辟\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/91637202cba1439180a0be5e72050e7c.png" alt="在这里插入图片描述"></p><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><blockquote><p>正所谓有借有还，内存也是如此，我们开辟的了空间后，要是不再使用了应该将他释放掉，要不然这块空间被占据着，无法被其他人使用</p></blockquote><blockquote><p>free的作用就是将它的空间释放掉</p></blockquote><h4 id="将释放的变量置为NULL"><a href="#将释放的变量置为NULL" class="headerlink" title="将释放的变量置为NULL"></a>将释放的变量置为NULL</h4><blockquote><p>当我们free掉内存空间后，p仍旧指向这片空间，要是我们不小心再次使用，就会发生非法访问，就像你的前女&#x2F;男友一样，你或许记者她&#x2F;他的号码，要是你再骚扰她&#x2F;他，这就很不地道</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/9dbe72ea11554e6a94c5a42da19f66e1.png" alt="在这里插入图片描述"></p><h3 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h3><blockquote><p>calloc函数和malloc函数作用差不多，不过参数有些不同</p></blockquote><h4 id="参数不同"><a href="#参数不同" class="headerlink" title="参数不同"></a>参数不同</h4><blockquote><p>void *calloc( size_t num, size_t size );</p></blockquote><ul><li>size_t num 表示要开辟的个数</li><li>size_t size表示开辟一个占据的字节数</li></ul><blockquote><p>int* p &#x3D; (int*)calloc(4,4)表示开辟四个，每个占据4个字节</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a2e0139f88954522ab86153426d67c00.png" alt="在这里插入图片描述"></p><h4 id="作用有些差异"><a href="#作用有些差异" class="headerlink" title="作用有些差异"></a>作用有些差异</h4><ul><li>malloc开辟的空间里面是随机值</li><li>calloc开辟的空间并且初始化了，初始化为0</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/b1578bb36fe543fbbfce2be6c341b11d.png" alt="在这里插入图片描述"></p><h3 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h3><blockquote><p>要是前面两个函数是开辟，纳么realloc函数可以理解为追加，要是我们第一次开辟的空间太小，我们就可以使用realloc函数进行扩大</p></blockquote><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><blockquote><p>void *realloc( void *memblock, size_t size );</p></blockquote><ul><li>void *memblock 第一次开辟空间的地址，要是没有第一次开辟，可以写成NULL  相当于第一次开辟了</li><li>size_t size 开辟空间的总大小  &#x3D;&#x3D; 第一次的 + 追加的</li></ul><h5 id="首次开辟"><a href="#首次开辟" class="headerlink" title="首次开辟"></a>首次开辟</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h5><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="realloc重新开辟"><a href="#realloc重新开辟" class="headerlink" title="realloc重新开辟"></a>realloc重新开辟</h4><blockquote><p>要是我们追加的空间太大，编译器会自动开辟一块新的内存，并且将第一次开辟的值赋到新空间中，要是够了，就在后面追加</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> p<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"为重新开辟\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"重新开辟了了一块新内存\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/b935a4cd490144e69cf8b02a97c9c32e.png" alt="在这里插入图片描述"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>每次开辟后不用了一定要free掉</li><li>三个函数的返回值都是void* ，参数不同</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%AF%A6%E8%A7%A3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%EF%BC%881%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%AF%A6%E8%A7%A3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这个博客就是为了更好的学习printf和scanf函数，更好的避免踩坑，不过大家要注意，一般情况很多专业的程序员会避免使用这两个函数</p><h1 id="输出：printf-函数"><a href="#输出：printf-函数" class="headerlink" title="输出：printf()函数"></a>输出：printf()函数</h1><blockquote><p>printf()函数是我们经常使用的的函数之一，他的作用就是将我们想要的数据输出到指定位置，这里的指定位置包含屏幕，我们先使用一下</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031716802.png" alt="image-20220303171640754"></p><p>这里我们可以看到，我们使用了printf()函数</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里有几点要说一下</p></blockquote><ul><li><strong>%</strong> 被称为 **”转换说明”**，所谓的转换说明就是将数据按指定的格式的方法,详细的解说         :point_right:<a href="https://blog.csdn.net/m0_61334618/article/details/123261550">转换说明</a></li><li><strong>%d</strong>是指将a的值以十进制的形式打印来,例如 <strong>%o</strong>  :打印八进制、**%x** 打印十六进制…..</li><li>这里没有指定打印的位置，可是却输出到屏幕中，实际上printf()函数默认的输出就是该窗口</li></ul><h3 id="prinft-错误的使用"><a href="#prinft-错误的使用" class="headerlink" title="prinft()错误的使用"></a>prinft()错误的使用</h3><blockquote><p>C语言不会检测转换说明的数量和我们要输出的数据的个数是不是匹配的，但我们不小心写错的时候，程序任就会执行，这就给我们代码带来了隐患，我们一定要小心</p></blockquote><h4 id="转换说明-lt-数据个数"><a href="#转换说明-lt-数据个数" class="headerlink" title="转换说明 &lt; 数据个数"></a>转换说明 &lt; 数据个数</h4><blockquote><p>只会从左向右打印相互匹配的数据，没有配的不打印</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只打印 a</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031740273.png" alt="image-20220303174012219"></p><h4 id="转换说明-gt-数据个数"><a href="#转换说明-gt-数据个数" class="headerlink" title="转换说明 &gt; 数据个数"></a>转换说明 &gt; 数据个数</h4><blockquote><p>从左向右依次打印，没有匹配的打印随机数</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203031744413.png" alt="image-20220303174438371"></p><h1 id="输入：scanf-函数"><a href="#输入：scanf-函数" class="headerlink" title="输入：scanf()函数"></a>输入：scanf()函数</h1><blockquote><p>和printf() 一样，scanf()也是存在特定的格式读入，这里先给出个例子，我们一起来看看</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032010512.png" alt="image-20220303201025477"></p><blockquote><p>这些都太简单了，我们来见识一下scanf()的经常出现的问题</p></blockquote><h2 id="scanf原理"><a href="#scanf原理" class="headerlink" title="scanf原理"></a>scanf原理</h2><blockquote><p>先看看下面这张图片</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032019252.png" alt="image-20220303201936155"></p><p>我总结一下</p><ul><li>scanf从左向有读取数据</li><li>对于每一个转换说明，scanf从输入数据中定位到<strong>合适</strong>类型数据，可以跳过空格，在不可能位置处停止这个转移字符的读取，接着下一个</li><li>对于上一步骤不可能的那个字符，作为下一次读取的起始点</li><li>要是中间不能读取成功，停止读取</li></ul><h3 id="可以跳过空白字符"><a href="#可以跳过空白字符" class="headerlink" title="可以跳过空白字符"></a>可以跳过空白字符</h3><blockquote><p>可以跳过<a href="#%E6%8B%93%E5%B1%95">空白字符</a>是为了找到数值的起始位置</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032025039.png" alt="image-20220303202509002"></p><h3 id="停止读入"><a href="#停止读入" class="headerlink" title="停止读入"></a>停止读入</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032027242.png" alt="image-20220303202718211"></p><h2 id="读入字符串"><a href="#读入字符串" class="headerlink" title="读入字符串"></a>读入字符串</h2><blockquote><p>前面我们读取的都是int型，下面以读取字符串为例</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032032803.png" alt="image-20220303203243766"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>scanf读入字符串时，遇见空白字符会自动停止，我们用的时候一定要小心</p></blockquote><h2 id="读入整型"><a href="#读入整型" class="headerlink" title="读入整型"></a>读入整型</h2><blockquote><p>我直接说过程</p></blockquote><ol><li>寻找 正负号</li><li>读取数值</li><li>遇到一个非数字的字符停止</li></ol><h2 id="读入浮点数"><a href="#读入浮点数" class="headerlink" title="读入浮点数"></a>读入浮点数</h2><blockquote><p>我直接说过程</p></blockquote><ol><li>寻找 正负号</li><li>读取数值（可能会包含小数点）</li><li>读取指数e或者E（可选）</li></ol><h2 id="例题（重要）"><a href="#例题（重要）" class="headerlink" title="例题（重要）"></a>例题（重要）</h2><p>讲解 ：:point_right:<a href="https://blog.csdn.net/m0_61334618/article/details/123264619">例题讲解</a></p><p>你要是把这道题弄懂了，可以说是对于这个知识点完全理解了</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%f%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把   1-20.3-4.0e3换行  输入进出</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j = %d\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y = %f\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203032104678.png" alt="image-20220303210422627"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>空白字符分为下面几类</p><ol><li>空格符</li><li>水平和垂直制表符</li><li>换页符</li><li>换行符</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BC%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p> 序言<br>这是一个用C语言写的多文件小游戏，代码的判断函数只适合三子棋的规则，后面我会一一补充。</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img src="https://img-blog.csdnimg.cn/fbaf6a4859fb4dc7b9b66a50f2efbf5a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>我们写代码一定要看我们的要求是什么，上图我们可以看出，我们打印的是3 × 3的棋盘，数据类型是char，而且玩家用的是 <strong>‘ * ’</strong>，电脑是 <strong>‘ #’</strong>。 </p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="第一步-–-创建文件"><a href="#第一步-–-创建文件" class="headerlink" title="第一步  –  创建文件"></a>第一步  –  创建文件</h3><p>这里我们会定义三个文件，一个头文件和一个用于函数实现的文件和一个测试文件。<br><strong>头文件</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ROW 3       </span><span class="token macro property">#<span class="token directive keyword">define</span> COL 3</span><span class="token comment" spellcheck="true">//初始化棋盘</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Init_board</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印棋盘</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Show_board</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家走</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">PlayerMove</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//电脑走</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">ComputerMove</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断输赢</span><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token function">Is_win</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里的函数我们都会一个个实现</p></blockquote><h3 id="第二步-–-搭建框架（测试文件）"><a href="#第二步-–-搭建框架（测试文件）" class="headerlink" title="第二步  –  搭建框架（测试文件）"></a>第二步  –  搭建框架（测试文件）</h3><p><strong>写出一个主函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"game.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>在写程序的时候我们很少在main函数内书写，那样会显得嘈杂。</p></blockquote><p><strong>test函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面会说</span>    <span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//目录函数</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择：>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"下棋\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">PlayGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"退出游戏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新选择\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>do while的作用是当你运行这个程序时，首先打印出目录，选择0才会退出程序</p></blockquote><p><strong>menu函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"********************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****  1.paly  *****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****  0.exit  *****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"********************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这个大家都知道，没什么可以说的，记住打印美观就好</p></blockquote><p><strong>玩游戏</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PlayGame</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">Init_board</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Show_board</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//printf("玩家走>\n");</span>        <span class="token function">PlayerMove</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Show_board</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">Is_win</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//玩家 *</span>          <span class="token comment" spellcheck="true">//电脑 #</span>          <span class="token comment" spellcheck="true">//平局 Q</span>          <span class="token comment" spellcheck="true">//继续 C</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token string">'C'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// printf("电脑走>\n");</span>        <span class="token function">ComputerMove</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Show_board</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">Is_win</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> ROW<span class="token punctuation">,</span> COL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token string">'C'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"玩家赢\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"电脑赢\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"平局\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>到这里框架就搭建的差不多了，第二步的代码全部放到测试文件内</p><h3 id="第三步-–-函数实现"><a href="#第三步-–-函数实现" class="headerlink" title="第三步  –  函数实现"></a>第三步  –  函数实现</h3><p><strong>初始化棋盘</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Init_board</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化为空字符</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这一步很简单</p></blockquote><p><strong>打印棋盘</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Show_board</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %c "</span><span class="token punctuation">,</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>我们一步一步分析</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//模块1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %c "</span><span class="token punctuation">,</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2b5a9308f3f54ca9986cb3a7b5b513ce.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5puy6L2p5aKo,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>我们将红色框内但做一个整体，最左侧没有 <strong>‘ | ’</strong> ，代码中<br>if (j &lt; col - 1)<br>                printf(“|”)；</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//模块2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        </code></pre><blockquote><p>这里是有与由于最后一行没有<strong>‘—’</strong>，所以加上了 if (i &lt; row - 1) 语句</p></blockquote><p><strong>玩家走</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PlayerMove</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"玩家走>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你的坐标 ："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> row <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> col<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断合法不合法</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//是空字符才可以将‘*’放进去</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                board<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"该坐标被占用，请重新输入！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你的坐标 ："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"坐标非法，请重输入!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你的坐标 ："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里使用<code>board[x - 1][y - 1] = &#39;*&#39; </code> 是因为用户不知道数组是从0开始的，他只会知道第几行第几列，我们要考虑用户的感受。</p></blockquote><p><strong>电脑走</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ComputerMove</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"电脑走>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> ROW<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0 ~ ROW-1</span>        y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> COL<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0 ~ COL-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这个函数写的很不好，电脑是在随机生成数字，没有竞争意识，后面我会写一个好一点的来完善它<br>rand是一个生成随机数函数，不过之前要引用<code>srand((unsigned int)time(NULL))；</code>这就是他在测试文件的作用</p></blockquote><p><strong>判断输赢</strong></p><blockquote><p>实际上，每走一步，我们都需要判断一下输赢和打印初棋盘</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">Is_win</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断 行</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>  board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>  board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断对角线</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断满了没有  满了 1  未满 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">Is_full</span><span class="token punctuation">(</span>board <span class="token punctuation">,</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'C'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'Q'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这个函数已经被写死了，只能判断3×3的棋盘。其中该函数内部有调用了<strong>Is_ful</strong>l函数，这个函数我没在主文件列出来，是因为用户不需要知道这个函数。</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Is_full</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>现在整个程序我们都写好了，自己可以尝试一下把。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/Linux/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2022/06/24/Linux/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在文前"><a href="#写在文前" class="headerlink" title="写在文前"></a>写在文前</h1><blockquote><p>今天我们实现一个进度条的小玩意儿，很简单，我们先看看成果</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203052030726.gif" alt="进度条"></p><h1 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h1><p>在学习计算机时，你在很多地方有可能看到到<strong>缓冲区</strong>的字样，那什么是缓冲区啊？，我们先看一下现象</p><p>我是在Linux环境下演示，window环境下演示可能会没有效果。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>    </span>        <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好，缓冲区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在Linux环境下sleep的单位 秒                                                                                                                                                        </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203042230460.gif" alt="缓冲区"></p><p>你会发现当我们执行程序时，会有大概几秒的延迟，可我们不是先执行的printf函数吗，后面才是sleep，实际上这也是事实，只不过当我执行printf后，我们想要输出的内容被放到一个缓冲区里面了，后面才会被打印出来，下面我将仔细的说一下什么缓冲区</p><p>本质上 缓冲区就是一块内存，我们将想要输出的数据放到缓冲区中，当我们<strong>刷新缓冲区</strong>的时候会把他打印出来，我们可以把数据当成一个水池，缓冲区看作打水的的木桶，当水桶满了的时候或者我们就是想要一半的水，就把水倒出来。</p><blockquote><p>什么情况下缓冲区会刷新</p></blockquote><ul><li><strong>全缓冲</strong>      缓冲区满了，会刷新</li><li><strong>行缓冲</strong>      我们使用换行符，缓冲区也会刷新</li><li><strong>函数缓冲</strong>  我们使用某个函数强制刷新</li><li>程序退出，自动刷新</li></ul><p>下面我们一一演示</p><h2 id="全缓冲"><a href="#全缓冲" class="headerlink" title="全缓冲"></a>全缓冲</h2><blockquote><p>我们演示一下，大家就懂了</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203051718061.gif" alt="Inked缓冲区满了"></p><p>由于时间有些长，我们就不等了，结果是当缓冲区满了后，屏幕上会出现<strong>一屏幕</strong>的 hello world</p><h2 id="行缓冲"><a href="#行缓冲" class="headerlink" title="行缓冲"></a>行缓冲</h2><p>我们这里的换行是指的 <strong>\n</strong>,它可以是缓冲区刷新</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203051719414.gif" alt="换行"></p><h2 id="函数缓冲"><a href="#函数缓冲" class="headerlink" title="函数缓冲"></a>函数缓冲</h2><p>在C语言中提供了一个函数，它可以强制刷新缓冲区，这就是 <a href="http://www.cplusplus.com/reference/cstdio/fflush/?kw=fflush">fflush()</a>,它是stdio.h中的库函数，在一个C程序中，编译器会默认打开 3 个标准输入输出流，分别是下面的，这一点知道就可以了</p><ol><li>stdin     </li><li>stdout</li><li>stderr</li></ol><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203051721361.gif" alt="刷新"></p><h1 id="n-和-r"><a href="#n-和-r" class="headerlink" title="\n 和 \r"></a>\n 和 \r</h1><p>有很多人都搞不懂这两个有什么区别，我们今天重点说一下</p><ul><li><strong>\n</strong>   叫做 换行</li><li><strong>\r</strong>    叫做 回车</li></ul><p>我们举一个写文章的例子，当我们在“我叫张三，外号法外狂徒。”这句话再开一行时，看看他们之间的区别 </p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203051831600.png" alt="image-20220305183128541"></p><p>有人可能会感到疑惑，这和我们用的不对啊，我们之前使用下面的代码时，都是再下一行的开头直接打印，实际上这是C语言的编译器默认将<strong>换行回车</strong>这两个浓缩到 \n了</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="演示效果-r"><a href="#演示效果-r" class="headerlink" title="演示效果 \r"></a>演示效果 \r</h2><p>我们先演示一下效果</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ProcBar.h"</span>    </span>        <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello word\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203052035896.gif" alt="效果gif"></p><p>注意看，我们没有打印出9，8，7，6，5这样的数据，原因是缓冲区的因素，我们使用函数刷新一下缓冲区看看效果</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ProcBar.h"</span>    </span>        <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello word\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203052050472.gif" alt="刷新缓冲区"></p><h1 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h1><blockquote><p>有了上面的知识点，我们就可以写出自己的进度条了，由于多文件情况下阅读的体验不太好，我把代码写在一个文件中</p></blockquote><ul><li><p>usleep()      和 sleep()的作用一样，不过它的单位是  毫秒</p></li><li><p>memset()   是 string.h库的一个函数，它可以把数组内部都初始化指定的 数据</p></li><li><p>%-100s       设置100的字段，**-**  表示 左对齐</p></li><li><p>%d%%        是为了了打印 百分比   %是转换说明，所以用 <strong>两个%代替一个%   %% -&gt; %</strong>     详细的请:point_right:<a href="https://blog.csdn.net/m0_61334618/article/details/123264736">转换说明</a></p></li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __INCLUDE_H__  </span><span class="token comment" spellcheck="true">//防止头文件被重复引用</span><span class="token macro property">#<span class="token directive keyword">define</span> __INCLUDE_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">proBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">"|/-\\"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%-100s][%d%%][%c]\r"</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">80000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">proBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这样，你的进度条就完成了，我们也可以给进度条添加颜色，C语言是支持的，不过这就要你自己去处理了</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203191350918.png" alt="image-20220319135019707"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203191351469.png" alt="image-20220319135102358"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(2)/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>今天这个是一个大工程，主要说的就是函数指针相关的知识，以及我们自己写一写qsort函数</p></blockquote><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><blockquote><p>在写这个之前，我们先做一下铺垫</p></blockquote><h2 id="函数有地址吗"><a href="#函数有地址吗" class="headerlink" title="函数有地址吗"></a>函数有地址吗</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/3ddca949d7dc410193a4671553c790b9.png" alt="在这里插入图片描述"></p><blockquote><p>看来函数是有地址的，而且和数组类似，&amp;函数名 和函数名的地址一样</p></blockquote><h2 id="如何定义函数地址"><a href="#如何定义函数地址" class="headerlink" title="如何定义函数地址"></a>如何定义函数地址</h2><blockquote><p>这个很难用文字只管描述出来，我们是例子来辅助</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> Add<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Add<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">pf1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6ff04cc6ee52429bb20ff7084b226cbe.png" alt="在这里插入图片描述"></p><blockquote><p>这里我们得出一些个结论</p></blockquote><ul><li>*pf1 和 pf1是一样的</li><li>&amp;函数名和函数名类型是一样的</li></ul><blockquote><p>我来解释一下<br>int(*pf1)(int, int) &#x3D; Add;</p></blockquote><ol><li>pf1先和*结合，表明pf1是一个指针</li><li>其次和后面的（int，int）中的（）结合，表明pf1指向的是一个函数</li><li>（int，int）表名函数的参数有两个，都是int型</li><li>最前面的int表示返回值是int型</li></ol><h1 id="函数指针的数组"><a href="#函数指针的数组" class="headerlink" title="函数指针的数组"></a>函数指针的数组</h1><blockquote><p>我们都知道数组是相同类型元素的集合，既然函数指针也是一种指针类型，那么它也可以构成数组，不过要求他们参数和返回类型一摸一样</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Add<span class="token punctuation">,</span>Sub<span class="token punctuation">,</span>Mul<span class="token punctuation">,</span>Div <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里我也解释一下，int(*pf[4])(int, int) &#x3D; { Add,Sub,Mul,Div };</p></blockquote><ol><li>pf先和[4]结合，表明是一个数组，数组里面有4 的元素</li><li>去掉pf[4]，得到int(* )(int, int) ，这是一个函数指针，所以说4个元素每个都是是一个函数指针</li></ol><h1 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h1><blockquote><p>首先说一下，我也不想套娃，不过知识点在这，我也没办法，这是最后一个了，</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Add<span class="token punctuation">,</span>Sub<span class="token punctuation">,</span>Mul<span class="token punctuation">,</span>Div <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>ppf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>pf<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>解释吧 int(*(*ppf)[4])(int, int) &#x3D; &amp;pf;</p></blockquote><ol><li>ppf和*结合，标明是指针</li><li>去掉*ppf,得到的 int(*[4])(int, int)表示是一个数组</li></ol><h1 id="自己定义实现qsort"><a href="#自己定义实现qsort" class="headerlink" title="自己定义实现qsort"></a>自己定义实现qsort</h1><blockquote><p>我们先看看qsort的参数</p></blockquote><p><img src="https://img-blog.csdnimg.cn/cb30207941b746948bda03707aac79fa.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h1><p>程序的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(1)/"/>
      <url>/2022/06/24/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>指针这个模块我一直都在疑惑，不知道究竟该如何写，自己写不好倒是小事，要是这篇误导了各位就是大罪了，我尽最大的努力让各位满意。</p></blockquote><h2 id="指针是什么"><a href="#指针是什么" class="headerlink" title="指针是什么"></a>指针是什么</h2><p>在这里，我确实没有找到指针的准确定义，找到的好像都是一些总结性的语言，我这里就依次来解释一下究竟什么是指针。<br>我们都知道，内存的的最小单元是字节，我们给每一个字节都编上序号，就像是房间的门牌号一样，我们得知门牌号就可以找到那个空间。<br><img src="https://s2.51cto.com/images/20211204/1638629562158653.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><blockquote><p>，这里的门牌号就是我们说的地址，也就是指针，我们仔细验证一下</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211204/1638629877615036.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="指针和指针变量"><a href="#指针和指针变量" class="headerlink" title="指针和指针变量"></a>指针和指针变量</h2><blockquote><p>这个话题可能很少有人谈到，我们在看一些编程语言的书籍时会发现一会儿说指针，一会儿说指针变量，那么他们究竟有什么区别</p></blockquote><ul><li>地址就是指针，指针就是地址</li><li>指针变量是一个变量，里面存储的是地址。</li><li>二者有区别，不过我们一般将指针变量说成指针</li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//&amp;a就是指针   p就是指针变量</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><blockquote><p>这里面我就简略的说一下，左值就是常量，右值就是变量</p></blockquote><p><img src="https://s2.51cto.com/images/20220118/1642474349109640.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="为什么定义指针"><a href="#为什么定义指针" class="headerlink" title="为什么定义指针"></a>为什么定义指针</h2><blockquote><p>这个问题非常好，指针这么难理解，我们为什么还要定义这个东西呢，不是自找麻烦吗？这里我给出两个原因，我这里就解释第二个。</p></blockquote><ul><li>简化代码</li><li>参数传递</li></ul><blockquote><p>参数传递确保我们可以找到需要改变的变量的空间</p></blockquote><p><strong>问题：写一个函数交换两个变量的值</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pa<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pb<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>    <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>    <span class="token operator">*</span>pb <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前：a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//swap2(&amp;a, &amp;b);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后：a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638682022497781.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><img src="https://s2.51cto.com/images/20211205/1638682054613103.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><blockquote><p>概念： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p></blockquote><blockquote><p>原因：</p></blockquote><ul><li>未初始化</li><li>未释放</li><li>访问越界</li></ul><blockquote><p>这里说一下，我们在应用层面是检测不出野指针的，只有在运行时编译器有可能给我们报错，所以对于我们不在用的指针我们让他变成NULL。这样就可以减少野指针的出现概率。</p></blockquote><h2 id="指针类型和大小"><a href="#指针类型和大小" class="headerlink" title="指针类型和大小"></a>指针类型和大小</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><blockquote><p>指针既然是变量，那么他也有一些类型，其他的我会单独出一个博客</p></blockquote><ul><li>char  *pc &#x3D; NULL;</li><li>int   *pi &#x3D; NULL;</li><li>short *ps &#x3D; NULL;</li><li>long  *pl &#x3D; NULL;</li><li>float *pf &#x3D; NULL;</li><li>double *pd &#x3D; NULL;</li></ul><h3 id="指针的大小"><a href="#指针的大小" class="headerlink" title="指针的大小"></a>指针的大小</h3><blockquote><p>这里我想大家应该都知道</p></blockquote><ul><li>32位平台   4 个字节</li><li>64位平台   8个字节</li></ul><h2 id="指针类型的作用"><a href="#指针类型的作用" class="headerlink" title="指针类型的作用"></a>指针类型的作用</h2><blockquote><p>我们都知道了无论是char* 还是 int*在32平台下都是4个字节，那么指针的类型又有什么意义</p></blockquote><ul><li>指针类型决定 +1 可以走几步</li><li>指针类型决定解引用可以访问几个字节</li></ul><h3 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 = %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 = %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638682974167874.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 = %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 = %p\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638683053309852.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>指针类型 +1 跳过他解引用的数据类型所占的字节数</li></ul><h3 id="指针的解引用"><a href="#指针的解引用" class="headerlink" title="指针的解引用"></a>指针的解引用</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#x"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638683499250851.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><img src="https://s2.51cto.com/images/20211205/1638683535108129.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><ul><li>指针的类型决定了，对指针解引用的时候有多大的权限（能操作几个字节）<br>比如： char* 的指针解引用就只能访问一个字节，而 int* 的指针的解引用就能访问四个字节。</li></ul><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><h3 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针 - 指针"></a>指针 - 指针</h3><blockquote><p>指针-指针得到的是两个指针之间元素的个数</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p2 <span class="token operator">-</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://s2.51cto.com/images/20211205/1638683980776240.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><p><img src="https://s2.51cto.com/images/20211205/1638684123253036.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=" alt="image.png"></p><h3 id="指针比较"><a href="#指针比较" class="headerlink" title="指针比较"></a>指针比较</h3><blockquote><p>指针比较这个知识点我就说一下，我们一般谈的是高地址、<br>低地址，也可以说成大地址、小地址。这就可以比较打大小了。这个知识点主要用在双指针的题目中</p></blockquote><h4 id="逆置字符串"><a href="#逆置字符串" class="headerlink" title="逆置字符串"></a>逆置字符串</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">resreval</span><span class="token punctuation">(</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> left <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> right <span class="token operator">=</span> arr <span class="token operator">+</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>        <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>        <span class="token operator">*</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>序章</title>
      <link href="/2022/06/21/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/00%20%E5%BA%8F%E7%AB%A0/"/>
      <url>/2022/06/21/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/00%20%E5%BA%8F%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>从今天开始，我要开启一个新的模块，C语言的基础知识我已经学的差不多了，但是还有一些边边角角的内容存在。这个模块主要以《C语言程序设计现代方法》(第二版)这本书为主要依据，用《高质量C&#x2F;C++编成》作为辅助。主要就是加大我对语言的理解和运用，扩展我的深度和广度。由于这几天还在学数据结构同时开了一个Java的基础模块，所以更新的速度有些慢。大概是两天一章。希望大家谅解。:dog: </p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="https://blog.csdn.net/m0_61334618/article/details/123640297">第一章 C语言概述</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《C语言程序设计现代方法》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 C语言概述</title>
      <link href="/2022/06/21/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01%20%E7%AC%AC%E4%B8%80%E7%AB%A0-C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/06/21/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95/01%20%E7%AC%AC%E4%B8%80%E7%AB%A0-C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这章没有什么知识点，不过为了知识的完整性以及让我们认识C语言，还是把这章给加上吧。主要是提高大家的兴趣.这篇主要以趣味性为主.更加详细的内容还请我们阅读官方网站.</p><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><blockquote><p>大家好，我叫C语言，或许大家已经对我很熟悉了，不过我还是想要简绍一下我自己，这该死的表现欲。我是20世纪70年代诞生的，具体那一年我自己也不知道。我的前身是B语言，我的创造者也就是我的“父亲们”Ken Thompson、D.M.Ritchie觉得B语言这个号练废了，想要重新开一个号。就想开发一个<strong>NB语言</strong>（意为：“<strong>New B语言</strong>”），可惜我越长越歪，只能该名叫C语言了，我的成熟大概在1973年。现在已经49岁了，也就40来岁。</p></blockquote><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><p>犹记得那时的我臃肿不堪，很多程序员都让我来替他们编写程序，可是他们的标准有各不相同，导致我带了一大堆重物，也出现一些问题。那时的我想要是有人可以帮我减轻一点负担就好了。1983年，我的愿望成真了。在美国国家标准协会（ASNI）推动下，美国开始指定标准。1990年国际标准化组织（ISO）通过了这项标准，人们给他们命名为C89或者是C90，由于标准的出现，我有可以十足的精力帮助人解决问题了。</p><h2 id="成熟"><a href="#成熟" class="headerlink" title="成熟"></a>成熟</h2><p>现在的我已经是一个大人了，已经帮助人们解决了很多问题。不过1999年又推出了一些标准，也叫做C99，我更加完善了，可惜C99的没有得到人们的认可，而且后面出现了很多语言,不过他们身上都有我的痕迹,在一些功能上,我远远不足他们,不过我是不会灰心的，会一直帮人们处理问题的.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211411050.png" alt="image-20220321164011198"></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>我知道我是一门底层语言,我提供了机器级的概念,这是其他语言千方百计想要避开的.我的包容性很强,这就意味着我出现错误的可能性会增大.</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>这里我不自己说,看看人类是怎么说的,嘿嘿🤭</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211411042.png" alt="image-20220321164640781"></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>我并不完美,我是知道的,但是我也不会隐藏我的不足</p><ul><li>我更易隐藏错误</li><li>我可能难以理解</li><li>我可能难以修改</li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《C语言程序设计现代方法》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Linux</title>
      <link href="/2022/06/21/Linux/00%20%E5%88%9D%E8%AF%86Linux/"/>
      <url>/2022/06/21/Linux/00%20%E5%88%9D%E8%AF%86Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>不知道大家在学习完C语言、C++&#x2F;Java等语言后，你会不会感觉到自己好象什么都不会做，像小程序、网站啊自己好象也没有自己的想法，今天正式开始的Linux课程就是为了解决这类问题的。我们学习Linux环境的认识、Linux系统的编程、后面的网络编程…这些都是很难的.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206192233686.png" alt="image-20220619223307569"></p><h1 id="认识历史"><a href="#认识历史" class="headerlink" title="认识历史"></a>认识历史</h1><p>我想给大家讲一些有趣的小故事,这样有助于我们呢消除我们的恐惧感和无从下手的感觉,来点好康的.</p><h2 id="计算机的历史"><a href="#计算机的历史" class="headerlink" title="计算机的历史"></a>计算机的历史</h2><p>我们先来看一些Linux的小故事,帮助我们消除距离感.</p><h3 id="为何出现计算机"><a href="#为何出现计算机" class="headerlink" title="为何出现计算机"></a>为何出现计算机</h3><p>我们需要先来回答个问题，先有计算机还是先有操作系统？历史的进程告诉我们，只有鲜有硬件，才会有软件.故事就开始了，在1946年的2月14号，人类历史上出现了第一台计算机–埃尼亚克，这是一个划时代的产品，主要用于计算导弹的弹道轨迹.大家都知道美苏冷战,所谓的冷战,可以理解为内卷,其中军事力量就是衡量一个国家很重要的一个指标,科技上也是.计算机出现的时间点,也就是美苏冷战的时间点,这也是计算机的原因.</p><h3 id="技术的迭代"><a href="#技术的迭代" class="headerlink" title="技术的迭代"></a>技术的迭代</h3><p>我们都是知道,技术是随着时间不断进步的,计算机也是,刚开始的计算机占据几个房间,现在我们可以使用掌上电脑,由此出现了一个摩尔定律,每隔18个月便会增加一倍，性能也将提升一倍.不过现在可能有点失效了.</p><p>现在我要问一问,技术的进步要不要花钱?这是肯定要花钱的,这笔钱刚开始是由国家来出的,而且投入成本很高,如果出了成品却没有人用就很让人恶心了?回不了本.所以美国把这个计算机这种技术买个社会,所以出现了硅谷和华尔街.硅谷是技术和商业结合,华尔街是融资的.微软,inter…都是这个时代出现的.</p><h3 id="民用级产品"><a href="#民用级产品" class="headerlink" title="民用级产品"></a>民用级产品</h3><p>像微软这些互联网巨头,要钱有钱,要人有人,技术更新非常快,逐渐出现的民用级的产品,我们用来购买产品的钱用来作为公司的利润.</p><h2 id="操作系统的历史"><a href="#操作系统的历史" class="headerlink" title="操作系统的历史"></a>操作系统的历史</h2><p>我们按照大致的时间来看操作系统的历史.</p><h3 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h3><p>现在我们开始出现了问题,我们只有计算机,最初的埃尼亚克都是裸漏的硬件,我们操作计算机的成本实在是太高了,所以出现了操作系统,用来整合计算机的功能,提高用户体验,所以出现了一大批的人来研究操作系统(OS)</p><p>我们简述一个大佬,肯汤普森,这位大佬用了汇编语言写了一个操作系统,叫做Unix,那时候还没有开源的概念,所以是闭源的,随着Unix的广泛发展,Unix进入了高校,这个时期又出现了一位大佬,C语言之父–丹尼斯里奇,他和肯汤普森是好友,他们有合力用C语言讲Unix经行的重构,买给了一些公司,其中有IBM,所以Unix商业化了.</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>历史的洪流下，Unix这款操作系统流进了一个芬兰大学生的眼中，他试玩了一把Unix，他想的是Unix怎么做的，他按照Unix交互方式给模仿了一个，做了一个小的,但是功能却该有的都有,还把代码给开源了，这是一个新篇章.有一些大佬看到了这个代码,慢慢的这些人把这些代码自愿的、无偿的补充扩展这些代码,这就是Linux.这款操作系统在这些大佬里面不断的更新迭代.</p><p>开源就意味着一些公司有了更高的选择，它免费而且由于大佬共同参与，可能效率会更高,我么的安卓就是基于Linux开发的,随着参与的人数过多,出现了不同版本的Linux内核,所谓内核就是操作系统.</p><p>我们可以从两个方面来理解Linux发行版</p><ul><li>技术角度  Linux内核的发行版   由大佬更新</li><li>商业化角度 企业在Linux嵌套了一层,由企业更新</li></ul><h4 id="理解开源"><a href="#理解开源" class="headerlink" title="理解开源"></a>理解开源</h4><p>我们必须要理解开源,所谓的开源就是把源代码公开,我们需要对比一些开源和闭源</p><ul><li>开源   更加高效   错误更少,有问题立马解决,更加安全</li><li>闭源   商业公司内部维护的,版本的更新慢,不稳定</li></ul><h4 id="Linux应用场景"><a href="#Linux应用场景" class="headerlink" title="Linux应用场景"></a>Linux应用场景</h4><p>主要有下面几种</p><ul><li>服务器后台</li><li>嵌入式</li><li>智能家电,车载系统</li><li>物联网</li></ul><p>为何这么选择了Linux了,因为它开源,而且还更安全,最关键是免费,这么好的一款,我们为什不用.</p><h1 id="Linux环境准备"><a href="#Linux环境准备" class="headerlink" title="Linux环境准备"></a>Linux环境准备</h1><p>我们学习Linux需要借助Linux系统,这里我给出两个方案</p><ol><li>安装Linux虚拟机</li><li>使用云服务器</li></ol><p>我极力推荐使用云服务器,今天开始,我的环境都是Linux中的Centos７.６　６４位．作为一个未来的程序员,有自己的一台服务器是一个很酷的事情,非常自豪.</p><p>我们学习Linux这款系统,在企业中用的非常多,它是开源的,也是免费的,面试过程中遇到的相关问题非常多.</p><h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><p>我们需要理解一下什么是云服务器，所谓的云服务器就是一些公司在他们自己的服务器（硬件）预留一块空间供我们个人使用,我们购买了云覅服务器之后,可以通过一些软件来远程操作这块空间.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211630417.png" alt="image-20220621162956227"></p><p>我们这里购买的是腾讯云的服务器,下面我来带着大家一起看看如何购买一台属于自己的云服务器.</p><p>在浏览器里面搜索腾讯云,认准官网,或者点击<a href="https://cloud.tencent.com/act/campus">腾讯云</a>,使用微信或者是QQ登录,然后一次完成实名认证.</p><p>我们点击链接后,会跳出这个页面,我们用步骤来.</p><ul><li>首先你要做的就是完成<strong>学生认证</strong>,这样折扣会很大.</li><li>点击立即购买,选择自己要的型号,建议Centos７.６　６４位．</li></ul><p>到这里我们就购买好了服务器了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211640458.png" alt="image-20220621164049286"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211649924.png" alt="image-20220621164903675"></p><h2 id="更改云服务器密码"><a href="#更改云服务器密码" class="headerlink" title="更改云服务器密码"></a>更改云服务器密码</h2><p>现在我们已经购买好了自己的服务器了,我们需要修改一些root密码等等,我用的是阿里云的,这里就用阿里云的来演示,前面之所以推荐的腾讯云,是因为它们对学生有优惠,最近阿里云把这个优惠给下架了,我们本着便宜来购买,不过大家不要担心,这些公司的操作大致都是一样的,按照步骤一步一步来就可以了.</p><p>我们先登录阿里云的官方网站.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211712677.png" alt="image-20220621171218456"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211713543.png" alt="image-20220621171303473"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211713889.png" alt="image-20220621171323785"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211713947.png" alt="image-20220621171353825"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211715942.png" alt="image-20220621171523802"></p><blockquote><p>到这里我们就可以修改自己的密码了</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211718169.png" alt="image-20220621171837080"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211721165.png"></p><h2 id="下载XShell"><a href="#下载XShell" class="headerlink" title="下载XShell"></a>下载XShell</h2><p>大家购买好了云服务器后,我们如何链接它呢,这里推荐使用XShell软件有免费版本的 ,点击右侧链接就可以进入<a href="https://www.xshell.com/zh/free-for-home-school/">XShell</a>,由于是国外的服务器,速度可能有点慢,甚至崩溃,我们多试几次.我们把页面往下滑,看到这个就可以了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211729875.png" alt="image-20220621172915776"></p><p>随后我们会在自己的邮箱中收到一个信息,里面有一个链接,点开后下载就可以了,这里我们就不多说了,一路next</p><h2 id="XShell链接云服务器"><a href="#XShell链接云服务器" class="headerlink" title="XShell链接云服务器"></a>XShell链接云服务器</h2><p>我们开始环境的最后一步,链接服务器.</p><p>我们这一步就需要复制公网的IP</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211738304.png" alt="image-20220621173854161"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211743604.png" alt="image-20220621174329488"></p><p>当你点击链接后,可能有跳出一个窗口,选择接受就可以了.</p><p>后面一次的出现输入用户名和密码的窗口,我们来看下面的步骤.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211747018.png" alt="image-20220621174730926"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211751627.png" alt="image-20220621175146509"></p><blockquote><p>到这里就完成了.我们就可以通过指令的形式来使用Linux了</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211739421.png" alt="image-20220621173950371"></p><h3 id="添加普通用户"><a href="#添加普通用户" class="headerlink" title="添加普通用户"></a>添加普通用户</h3><p>但是这个用户是root用户,也就是超级管理员,权限很大,一些文件可以被轻松删除,我们需要缩小权限.我们一般不在这个用户下使用下面我们开始配置普通用户.</p><p>在root用户下,输入这样的指令</p><pre class=" language-shell"><code class="language-shell">adduser 用户名passwd  用户名</code></pre><p>我们输入自己想要的密码,不用太过复杂,等待一下,再次输入密码,这样就可以了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211805247.png" alt="image-20220621180509115"></p><blockquote><p>关闭XShell,再次打开,看到下面的结果,随便点击一个.</p></blockquote><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211809277.png"></p><p>我们一次输入用户名和密码就可以了.</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211811744.png" alt="image-20220621181130658"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202206211812066.png" alt="image-20220621181216988"></p><p>这样我们就可以正式来玩Linux了.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window环境下MySQL的安装与配置</title>
      <link href="/2022/06/21/MySQL/01%20window%E7%8E%AF%E5%A2%83%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/06/21/MySQL/01%20window%E7%8E%AF%E5%A2%83%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>现在的我们日常使用的最多的数据库MySQL，今天说一下MySQL的安装步骤，很简单，一路next就行，我建议大家安装在C盘，这样后面我们出错的可能性低</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://dev.mysql.com/downloads/installer/">MySQL Installer</a></p><p><img src="https://img-blog.csdnimg.cn/a3548520b54640abb3d4b2c3415ee64b.png" alt="在这里插入图片描述"></p><blockquote><p>这里我是通过离线安装的方式，官网下载速度有些慢，这里提供一个链接，可以减少点时间<br><a href="https://pan.baidu.com/s/1_-SOF0BvtPGHgRqHNYQE5A">提取码：qtm5</a></p></blockquote><blockquote><p>下载成功后就是这样，双击进入下载</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9351b2fd5a354320b22a5e49a7a9ca30.png" alt="在这里插入图片描述"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>一路next就行，不用管太多</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e4f86f99d83e4a4eb6f83933e080327b.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/d6e848fa39954cb8aaf1ff88a8ded662.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2b246cf2ca30488396b3c6667618d950.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d88394130f054cfa88c65f0fd141f2b7.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/40a66123ee1843ec8bb5ff38d6427ada.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/76b863826839463a824c61f7f2a09b48.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4141250dcbc6426286567a1840f38242.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/935196c01cd646569b87398685b02431.png" alt="在这里插入图片描述"></p><h3 id="设置密码-不用太复杂"><a href="#设置密码-不用太复杂" class="headerlink" title="设置密码 不用太复杂"></a>设置密码 不用太复杂</h3><p><img src="https://img-blog.csdnimg.cn/54549c21ce9a414b888d097c8a90cc3e.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/db19535b2a0a441580a0efc8246813f4.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/6eafa66138b5476280fb315bc8eb7907.png" alt="在这里插入图片描述"></p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p><img src="https://img-blog.csdnimg.cn/236d55ef227946cfadea8e556037a924.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ade0acef52ba4dd39d816c2bf78ba8db.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ad171dcbcf8d4f97b5be8a5eeefcf442.png" alt="在这里插入图片描述"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>假设你要在cmd窗口使用MySQL，我们就需要一点配置了，只需添加一个PATH就行</p></blockquote><h3 id="寻找安装路径"><a href="#寻找安装路径" class="headerlink" title="寻找安装路径"></a>寻找安装路径</h3><blockquote><p>我们一直使用的是next，可以很轻易的得到路经位置</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d8d2edc5e51a4081bf8e09c0544a02bd.png" alt="在这里插入图片描述"></p><h3 id="配置Path"><a href="#配置Path" class="headerlink" title="配置Path"></a>配置Path</h3><p><img src="https://img-blog.csdnimg.cn/413f38f7beff436982c9ae4c7c982914.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a9ee6bdf16e1412bba5caa4c7b90dfd5.png" alt="在这里插入图片描述"></p><h3 id="配置成功"><a href="#配置成功" class="headerlink" title="配置成功"></a>配置成功</h3><p><img src="https://img-blog.csdnimg.cn/e7cce867222a4e6582ced7ba8ccd23d0.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL下表的创建于销毁</title>
      <link href="/2022/06/21/MySQL/03%20%E8%AF%A6%E8%A7%A3MySQL%E4%B8%8B%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%94%80%E6%AF%81/"/>
      <url>/2022/06/21/MySQL/03%20%E8%AF%A6%E8%A7%A3MySQL%E4%B8%8B%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%94%80%E6%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>我在上一篇博客写了如何创建一个数据库,今天我们就来看看数据库是如何使用的:tomato:</p></blockquote><h1 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h1><p>我们刚开始进入数据库是在主页面中,我们需要进入到某一个数据库</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061629733.png" alt="image-20220306162913603"></p><p>我们使用下面语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> <span class="token operator">&lt;</span>数据库名<span class="token operator">></span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061630228.png" alt="image-20220306163058142"></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>我们要使用数据库,还要创建数据表,而创建数据表就需要学习SQL语言的中的数据类型</p><blockquote><p>我们学过很多语言，里面都有关数据类型的分类，SQL语言自然也是有的，它分为三大类。</p></blockquote><ul><li>数值类型</li><li>字符串类型</li><li>日期类型</li></ul><h2 id="为何要有数据类型"><a href="#为何要有数据类型" class="headerlink" title="为何要有数据类型"></a>为何要有数据类型</h2><blockquote><p>这是一个很好很基本的问题 ，它放映了存在的原因，想一想当我们在表格中会输入什么</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8df344374a3e4cffb60bafd3a5a585b0.png" alt="在这里插入图片描述"></p><h2 id="数据类型怎么用"><a href="#数据类型怎么用" class="headerlink" title="数据类型怎么用"></a>数据类型怎么用</h2><blockquote><p>我们都知道每一中数据类型都有它的范围，这个范围指的是表格中数据的大小，那我们应该怎么使用，这个可能和我们之前的理解不太一样,下面我们一一来说</p></blockquote><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><blockquote><p>这个简单，我们知道int 、float、 double在这里都有，不过它也添加了许多其他的，下面我就一一给出，由于它是规定的，我们也没有太多话可以说</p></blockquote><blockquote><p>我们给出数值类型是为了可以进行<strong>算数运算</strong>(，比如说年龄 ，我们是可以将它定义为字符类型的，但是我们知道每过人一个生日，我们的年龄 + 1，可以看出数据类型比较好处理</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>这些种类的名字很奇怪，原因是因为SQL语言很久之前就出现了，后面的名字就没有修改</p><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">说明</th><th align="center">对应Java类型</th></tr></thead><tbody><tr><td align="center">tinyint</td><td align="center">1字节</td><td align="center"></td><td align="center">Byte</td></tr><tr><td align="center">smallint</td><td align="center">2字节</td><td align="center"></td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">4字节</td><td align="center"></td><td align="center">Integer</td></tr><tr><td align="center">bigint</td><td align="center">8字节</td><td align="center"></td><td align="center">Long</td></tr><tr><td align="center">float(M,D)</td><td align="center">4字节</td><td align="center">单精度,M指定长度,D指定小数点后几位，会有精度损失</td><td align="center">Float</td></tr><tr><td align="center">double(M,D)</td><td align="center">8字节</td><td align="center"></td><td align="center">Double</td></tr><tr><td align="center">decimal(M,D)</td><td align="center">M&#x2F;D最大 值+2</td><td align="center">双精度，M指定长度,D指定小数点后几位，精确值</td><td align="center">BigDecimal</td></tr></tbody></table><p>注意也可以加上 unsigned 变成无符号的，不过不推荐</p><blockquote><p>常用的数值类型</p></blockquote><ul><li>整型 int</li><li>浮点型 double(M,D) 和 decimal(M,D)</li></ul><h3 id="说一下decimal"><a href="#说一下decimal" class="headerlink" title="说一下decimal"></a>说一下decimal</h3><blockquote><p>我们知道，当我们使用double型时，有时候会带有很多位小数，比如说3.900000，很不舒服，所以就出现了decimal，它只会有2位小数，decimal的精度很高，我们用于更正确的计算</p></blockquote><blockquote><p>decimal（10，2）表示 数值位 有10位，小数位有2位</p></blockquote><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><blockquote><p>这里的字符类型有些多，我们只需记住几个常用的就行，后面遇到可以查表</p></blockquote><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th>类型</th><th>大小</th><th>说明</th><th>对应Java类型</th></tr></thead><tbody><tr><td>char</td><td>0 ~ 255字节</td><td>定长字符串，char（n）n&lt;&#x3D;255</td><td>String</td></tr><tr><td>varchar(SIZE)</td><td>0 ~ 65536字节</td><td>变长字符串</td><td>String</td></tr><tr><td>blob</td><td>0 ~65536字节</td><td>存储二进制字符串</td><td>byte[]</td></tr><tr><td>mediumblob</td><td>0 ~16777215字节</td><td>存储二进制字符串</td><td>String</td></tr><tr><td>text</td><td>0 ~65536字节</td><td>长文本数据</td><td>String</td></tr></tbody></table><h3 id="char-10-和varchar-10-的区别"><a href="#char-10-和varchar-10-的区别" class="headerlink" title="char(10)和varchar(10)的区别"></a>char(10)和varchar(10)的区别</h3><ul><li>char(10)表示我们只能输入10个字符，如果输入小于10，则自动补充’\u0000’至10个字符</li><li>varchar(10)表示我们可以输入&lt;&#x3D;10的字符，不够的空格自动补齐</li></ul><h2 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h2><blockquote><p>我们要说一下，日期类型不是也可以用字符串来表示吗？实际上可以的，不过存在一个问题，在数据库中，我们有时候要求基于时间字段进行查询，这就不太好了，所以特地出现了日期类型</p></blockquote><h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th>类型</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td>date</td><td>只能存储年月日</td><td>2021-01-23</td></tr><tr><td>time</td><td>只能存储时分秒</td><td>11：23：56</td></tr><tr><td>year</td><td>只能存储年份</td><td>2021</td></tr><tr><td>datetime</td><td>能存储年月日，也可以存储时分秒，空格隔开</td><td>2021-01-23 11：23：56</td></tr><tr><td>timestamp</td><td>能存储年月日，也可以存储时分秒  时间戳</td><td>20210123 112356</td></tr></tbody></table><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><blockquote><p>我们正式开始如何创建一个表格</p></blockquote><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><blockquote><p>下面我写一行伪代码，解释一下没有出现过的名词</p></blockquote><p>注意我们创建数据表时，字段名在前，类型在后, 要是我们的表名于SQL语句冲突，我们使用 反引号 将其括起来，就可以了</p><p>反引号 位于tab健上面，Esc健下面 1的左面</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> students<span class="token punctuation">(</span> stu_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> stu_sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> stu_age <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> stu_tele char<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/3279f6b4fc2b4af7a20944439507315c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/402b64f5b0be412fbdc48796d8382fae.png" alt="在这里插入图片描述"></p><blockquote><p>下面我要解释一下我们的名词，他们都是约束条件，这两个约束我们也可以不写，就是没有了我们想要的限制，这只是其中的两个约束，后面还有其他的的约束</p></blockquote><h3 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束 not null"></a>非空约束 not null</h3><blockquote><p>not null意味着这列是必填项，不能为空</p></blockquote><h3 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束 unique"></a>唯一约束 unique</h3><blockquote><p>unique表示这一列的数据两两不同</p></blockquote><h2 id="查询数据表"><a href="#查询数据表" class="headerlink" title="查询数据表"></a>查询数据表</h2><p>我们可以使用下面的语句查询一个数据库下所有的表</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/91a12c71462241f69ab693eba966f0de.png" alt="在这里插入图片描述"></p><h2 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/725f40523fd0497a8f9550ca8da43acb.png" alt="在这里插入图片描述"></p><h1 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h1><p>当我们突然意识到我们的一张表创建有一些问题时，除了删除外，我们也可以在原来的基础上进行修改</p><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">rename</span> <span class="token keyword">to</span> stu_test<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- to 也可以省略</span></code></pre><p><img src="https://img-blog.csdnimg.cn/f4b5e240c0f1416a8f34d791f8fbfb97.png" alt="在这里插入图片描述"></p><h2 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h2><blockquote><p>数据表也是有字符集的，默认和数据库一置</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> stu_test <span class="token keyword">character set</span> utf8<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/0d977ff04c8d4e458d3ed5ea849fdc33.png" alt="在这里插入图片描述"></p><h2 id="增加一个字段"><a href="#增加一个字段" class="headerlink" title="增加一个字段"></a>增加一个字段</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> stu_test <span class="token keyword">add</span> stu_qq char<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/e702f2c68bab41cab3f2fbde1a7933a0.png" alt="在这里插入图片描述"></p><h2 id="删除一个字段"><a href="#删除一个字段" class="headerlink" title="删除一个字段"></a>删除一个字段</h2><blockquote><p>alter table 数据表名 drop 字段名</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> students <span class="token keyword">drop</span> stu_num<span class="token punctuation">;</span></code></pre><blockquote><p>删除前</p></blockquote><p><img src="https://img-blog.csdnimg.cn/b181a37008f940a69345740d7e8595c8.png" alt="在这里插入图片描述">删除</p><blockquote><p>删除后</p></blockquote><p><img src="https://img-blog.csdnimg.cn/c0d99ffe88eb4cceac78e6cc93c9b713.png" alt="在这里插入图片描述"></p><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> stu_test<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6b888f536ddf47e0b4aa4e445662baa4.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL中数据库的创建</title>
      <link href="/2022/06/21/MySQL/02%20%E8%AF%A6%E8%A7%A3MySQL%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2022/06/21/MySQL/02%20%E8%AF%A6%E8%A7%A3MySQL%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>这是我开始新学的模块，今天开始也算是见证自己的历程</p></blockquote><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><blockquote><p>  数据库，又称为<strong>数据管理系统</strong>，简而言之可视为<strong>电子化的文件柜</strong>——存储电子文件的处所，用户可以对文件中的资料执行新增、截取、更新、删除等操作。 所谓“数据库”是以一定方式储存在一起、能予多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。一个数据库由多个表空间构成。（来源：维基百科）</p></blockquote><p>说人话，数据库 就是一个存储物品的柜子，就像我们电脑的硬盘，只不过我们可以通过远程来操作里面的数据罢了，没什么可神秘的，那有人可能会疑惑，既然有文件里面可以存储数据了，我们为何还要使用数据库呢，实际上文件储存有一定的缺陷</p><ul><li>文件存储的安全性不够高</li><li>文件存储不利于管理和查询</li><li>文件不利于海量存储</li></ul><h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><blockquote><p>数据库有很多种类，有免费的，也有收费的，不过都大通小异，我们选择哪一个都可以，下面我就仔细说一下数据库的种类和历史</p></blockquote><p>数据库大致可以分为两大类，以后的工作中都有可能会用到</p><ol><li>关系型数据库</li><li>非关系型数据库</li></ol><h3 id="关系型数据库（SQL）"><a href="#关系型数据库（SQL）" class="headerlink" title="关系型数据库（SQL）"></a>关系型数据库（SQL）</h3><p>数据形式使用 <strong>表</strong> 作为结构，类似 excel，对于数据的约束比较强，所谓的<strong>约束</strong>就是对数据的合法性的校验，这种数据库适应于大部分场景</p><h4 id="关系型数据库的组成"><a href="#关系型数据库的组成" class="headerlink" title="关系型数据库的组成"></a>关系型数据库的组成</h4><p>这里我说的简单一点，我们都知道excel表格，数据库就是一个文件，而一个excel表文件中的一个个表单</p><p><img src="https://img-blog.csdnimg.cn/8759cf1f0e9746f4b5e598c6b2cd3176.png" alt="在这里插入图片描述"></p><h3 id="非关系型数据库（NoSQL）"><a href="#非关系型数据库（NoSQL）" class="headerlink" title="非关系型数据库（NoSQL）"></a>非关系型数据库（NoSQL）</h3><p>数据组织形式使用<strong>键值对</strong>作为结构，类似于Map，存储时都要指定key 和 value。对于数据的约束比较低。效率和水平拓展能力比较强，适合分布式系统</p><h3 id="数据库的代表"><a href="#数据库的代表" class="headerlink" title="数据库的代表"></a>数据库的代表</h3><ul><li>关系型  MySＱL 、Oracle 、SQL Serve 、SQLite</li><li>非关系  Redis、MongoDB、HBase</li></ul><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><p>学习数据库，我们就必须对SQL语言有一定的了解，SQL是一门<strong>结构化</strong>的语言，实际就是一门编程语言，操作数据库主要就是使用这个语言，注意下面</p><ul><li>所有的关系型数据库都支持SQL语言，部分的语言细节可能有所差异，不过整体一样</li><li>非关系型数据库也支持，但不仅支持SQL，所以非关系型数据库也叫 <strong>NoSQL</strong></li></ul><h4 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h4><ol><li>SQL语言中存在特定的术语</li><li>SQL语言<strong>不会识别大小写</strong></li><li>一个SQL语言是以<strong>英文分号</strong>  <strong>‘ ；’</strong>结尾的，绝大部分的不见到分号绝对不会执行</li><li>SQL的注释  是  <strong>–</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/77939e45b1924b1aa214274af79a32c3.png" alt="在这里插入图片描述"></p><h2 id="为何选择-MySQL数据库"><a href="#为何选择-MySQL数据库" class="headerlink" title="为何选择 MySQL数据库"></a>为何选择 MySQL数据库</h2><p>我们可能会感到疑惑，这么多数据库,我们为何选择MySQL,我们使用一个工具,那么肯定是这个工具好用,MySQL也是如此,就像Java和C++一样</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>开源,也就意味着免费</li><li>原理和其他数据库差不多</li></ul><h3 id="最好的数据库-Oracle"><a href="#最好的数据库-Oracle" class="headerlink" title="最好的数据库 Oracle"></a>最好的数据库 Oracle</h3><p>毫无争议,最好的数据库就是Oracle,但是最好就意味着他很贵,普通的学生使用不起的,甚至一些中小型公司也用不起,能够用的起的不多,当然银行用的起,他不差钱,而且数据很宝贵</p><h4 id="Oracle贵的理由"><a href="#Oracle贵的理由" class="headerlink" title="Oracle贵的理由"></a>Oracle贵的理由</h4><ul><li>贵在服务上</li><li>贵在安全性</li><li>贵在放心</li><li>Oracle不是拿来就可以用,需要搭配小型机才可以发挥 十成 效果</li></ul><h1 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h1><p>查看数据的的语言很简单,只需要一个语句就可以</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 注意 databases 是负数形式</span></code></pre><p><img src="https://img-blog.csdnimg.cn/3972527a783f4893991d6a01e0075c6b.png" alt="在这里插入图片描述"></p><p>你可能会发现我们查看的数据库不太一样,这是因为我之前创建过其他的数据库</p><h1 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h1><p><strong>MySQL是一个软件</strong>,它可以去维护很多逻辑上的数据库,也就是说我们可以创建多个数据库,所谓的数据库就是若干张表的集合,我们开始创建一个数据库,使用SQL语言</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> db_test<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- db_test 数据库名  </span></code></pre><p><img src="https://img-blog.csdnimg.cn/a580e9047889457f9d241359f7e6f738.png" alt="在这里插入图片描述"></p><blockquote><p>我们再创建数据库的时候可能会出现一些问题</p></blockquote><h3 id="数据库名字错误"><a href="#数据库名字错误" class="headerlink" title="数据库名字错误"></a>数据库名字错误</h3><blockquote><p>名字要求  数字字母下划线 , 数字不开头,中间不能带空格</p></blockquote><h3 id="数据库创建时数据库已存在"><a href="#数据库创建时数据库已存在" class="headerlink" title="数据库创建时数据库已存在"></a>数据库创建时数据库已存在</h3><p><img src="https://img-blog.csdnimg.cn/205c3ac0adf347128f7fcc5f4c750696.png" alt="在这里插入图片描述"></p><blockquote><p>当你不知道你要创建的数据库是否已经存在时，你可以使用下面的语句</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> db_test<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 如果db_test数据库不存在，就创建它</span></code></pre><p><img src="https://img-blog.csdnimg.cn/a27ecaa61cf74de7aaed99fefd2eac19.png" alt="在这里插入图片描述"></p><h1 id="创建数据库时指定编码集"><a href="#创建数据库时指定编码集" class="headerlink" title="创建数据库时指定编码集"></a>创建数据库时指定编码集</h1><blockquote><p>对于编码集这个名词，我也不是太明白，不过我们要明白，当创建数据库时，有时候可能不支持中文，这时候就需要我们来指定编码集了<br>当我们不指定编码集的时候，它采用默认的</p></blockquote><h2 id="查看数据库编码集"><a href="#查看数据库编码集" class="headerlink" title="查看数据库编码集"></a>查看数据库编码集</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> db_test<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2ca48eab4f394f2c894aaf2bf02df15a.png" alt="在这里插入图片描述"></p><h2 id="指定编码集"><a href="#指定编码集" class="headerlink" title="指定编码集"></a>指定编码集</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> db_fmsc <span class="token keyword">character set</span> utf8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 指定以utf8编码集进行创建</span></code></pre><p><img src="https://img-blog.csdnimg.cn/76aa18acb45c451ea454f34ede825354.png" alt="在这里插入图片描述"></p><h2 id="修改编码集"><a href="#修改编码集" class="headerlink" title="修改编码集"></a>修改编码集</h2><blockquote><p>我们创建的数据的编码集也是可以修改的，</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> db_fmsc2<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> db_fmsc2<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> db_fmsc2 <span class="token keyword">character set</span> utf8<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/b01e72386d5e411eaa83a157ae818304.png" alt="在这里插入图片描述"></p><h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><blockquote><p>我们将不要数据库进行删除</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> db_fmsc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- if exists 也可以没有，不过要保证数据库 db_fmsc 存在</span></code></pre><p><img src="https://img-blog.csdnimg.cn/e35addb4dc3d4c9096d9823d90f3e077.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL中数据库数据的插入与删除</title>
      <link href="/2022/06/21/MySQL/04%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4/"/>
      <url>/2022/06/21/MySQL/04%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>很久没有更新了，新年第一篇文章，写的要是有什么疏漏的的地方，可以在下面留言，我会及时修改，今天我们看看如何进行对表增加和删除数据</p></blockquote><p> 我先创建一个数据表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> exam_result<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>chinese <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>math <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>english <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/02b48071cd404d8bbe1f6ebdf4fa6b79.png" alt="在这里插入图片描述"></p><p>查看一下表结构 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> exam_result<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203061859569.png" alt="image-20220306185947533"></p><h1 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h1><p>增加数据是后面几个操作的基础，我们一定要学好这个部分</p><h2 id="全部列插入"><a href="#全部列插入" class="headerlink" title="全部列插入"></a>全部列插入</h2><p>我们往表里面插入数据的的话，需要依托下面几行代码</p><h3 id="单行插入"><a href="#单行插入" class="headerlink" title="单行插入"></a>单行插入</h3><blockquote><p>要是我们每一个列都要有数据，可以这么做，这里我们先提一下在sql语言中，字符串用单引号来标识</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>插入的数据<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">-- 全部插入  其中into可以省略</span></code></pre><blockquote><p>往表里面插入一个数据  —   0,’孙仲谋’,89.0,34,32</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> exam_result <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'孙仲谋'</span><span class="token punctuation">,</span><span class="token number">89.0</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/6427e7c615584e85be6bd4a8f33cb4a2.png" alt="在这里插入图片描述"></p><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><blockquote><p>这个先在这里说一下，我们后面仔细地谈一谈，放在这主要是为了看一看我们插入的结果</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">*</span> <span class="token keyword">from</span>  exam_result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 查看所有数据</span></code></pre><p><img src="https://img-blog.csdnimg.cn/17287996fa774f35b607d323686dabc7.png" alt="在这里插入图片描述"></p><h3 id="多行插入"><a href="#多行插入" class="headerlink" title="多行插入"></a>多行插入</h3><blockquote><p>要是我们嫌一行一行插入太麻烦的话，我们可以一次性插入多个数据，</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>数据<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>数据<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>数据<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">--  多行插入 数据与数据之间有 逗号 隔开</span></code></pre><blockquote><p>看一下例子</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> exam_result <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'唐三藏'</span><span class="token punctuation">,</span><span class="token number">67.8</span><span class="token punctuation">,</span><span class="token number">78.9</span><span class="token punctuation">,</span><span class="token number">89.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token number">50.5</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">99.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">60.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'沙和尚'</span><span class="token punctuation">,</span><span class="token number">69.0</span><span class="token punctuation">,</span><span class="token number">77.2</span><span class="token punctuation">,</span><span class="token number">88.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'曹孟德'</span><span class="token punctuation">,</span><span class="token number">65.2</span><span class="token punctuation">,</span><span class="token number">85.0</span><span class="token punctuation">,</span><span class="token number">99.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'关云长'</span><span class="token punctuation">,</span><span class="token number">66.0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'李七夜'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">79.0</span><span class="token punctuation">,</span><span class="token number">78.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/1a77b2ee8393438898eade88de8a080f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f23c16ebf1c94690b53b877f2374a7e6.png" alt="在这里插入图片描述"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>我们会发现null这个字样，这代表这这个数据为空</li><li>各个数据之间用英文的逗号隔开</li></ul><h2 id="部分列插入"><a href="#部分列插入" class="headerlink" title="部分列插入"></a>部分列插入</h2><blockquote><p>和全部的插入差不太多，我们只需要在values前面加上我们要插入的列名就可以了，后面的数据匹配上就行</p></blockquote><h3 id="单行插入-1"><a href="#单行插入-1" class="headerlink" title="单行插入"></a>单行插入</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token punctuation">(</span>插入的列名<span class="token number">1</span><span class="token punctuation">,</span>插入的列名<span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">-- 部分插入</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> exam_result <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'帝尊'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/ebd9a417d87c45ee81e307f2d0e4ab33.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b0a9b781b430446994d922e7e09a1849.png" alt="在这里插入图片描述"></p><blockquote><p>注意我们没有进行插入的列是自动置为null的</p></blockquote><h3 id="多行插入-1"><a href="#多行插入-1" class="headerlink" title="多行插入"></a>多行插入</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token punctuation">(</span>插入的列名<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">-- 部分插入</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> exam_result <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'赵云'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/4196f04a2f2a4f94a23f02c894f13f4a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/435995df68c843189b6977386fb9d8fa.png" alt="在这里插入图片描述"></p><h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>我和大家说一下我们<strong>除非是非常有必要，否则一定不要删除数据</strong>，因为我们使用常规的的手段很难将其再恢复出来，我们需要查看bin文件下查看自己之前所有的SQL命令，实际上数据库的内容并不是我们现在学的那么简单，它需要专门的人进行维护，而且要求知识水平很高，不是一般的程序员就可以当任的。</p><blockquote><p>我们使用的是delete语句,这里的where语句大家可以认为是一种判断条件</p></blockquote><h2 id="删除一行"><a href="#删除一行" class="headerlink" title="删除一行"></a>删除一行</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">where</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span></code></pre><blockquote><p>看一看例子</p></blockquote><p><img src="https://img-blog.csdnimg.cn/cdec26d6d61b4e3fa1f673b86d578669.png" alt="在这里插入图片描述"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 删除 id = 0 的这一行</span></code></pre><p><img src="https://img-blog.csdnimg.cn/c0d073ab0a2c486fa0a691edc847ae94.png" alt="在这里插入图片描述"></p><h2 id="删除全部"><a href="#删除全部" class="headerlink" title="删除全部"></a>删除全部</h2><blockquote><p>要是我们后面不带有where判断语句，我们删除的是整个表的内容</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> exam_result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 删除表里的所有内容</span></code></pre><p><img src="https://img-blog.csdnimg.cn/f3a71f1a2d9b48a29466143ed8cf4f60.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL中数据库之数据查找与修改</title>
      <link href="/2022/06/21/MySQL/05%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BF%AE%E6%94%B9/"/>
      <url>/2022/06/21/MySQL/05%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>数据库的<strong>增删改查</strong>里查找数据是我们经常使用的操作，关于查找这里面有很多需要仔细研究的细节，今天我们先说一下简单的，后面复杂的查找方法我们用到的时候再说。由于修改数据的内容较少，我们一起说了吧。</p><p>我们先为今天的内容提供一个背景</p><p>创建一个表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> exam_result <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>chinese <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>math <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>english <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>插入一部分数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> exam_result <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span> chinese<span class="token punctuation">,</span> math<span class="token punctuation">,</span> english<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'唐三藏'</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">87.5</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'猪悟能'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'曹孟德'</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'刘玄德'</span><span class="token punctuation">,</span> <span class="token number">55.5</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'孙权'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">78.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'宋公明'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101333798.png" alt="image-20220310133351724"></p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>查询的操作有很多，我们先给他们分一下类</p><ul><li>全列查询</li><li>指定列查询</li><li>查询字段为表达式  </li><li>指定别名</li><li>去重查找</li><li>排序</li><li>条件查询</li><li>模糊匹配</li></ul><h2 id="全列查询"><a href="#全列查询" class="headerlink" title="全列查询"></a>全列查询</h2><p>说实话，全列查询我们最好不要做，对于我们个人来说，这种查询方式不会耗费多长时间，但是对于公司的数据而言，这中方式查询的列越多，意味着需要传输的数据量越大  ，而且可能会影响<strong>索引</strong>的使用。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span>   </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101344308.png" alt="image-20220310134417265"></p><h2 id="指定列查询"><a href="#指定列查询" class="headerlink" title="指定列查询"></a>指定列查询</h2><p>我们可以指定列查询，这种方式很不错</p><h3 id="指定一列"><a href="#指定一列" class="headerlink" title="指定一列"></a>指定一列</h3><p>我们可以指定一列来查询数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>列名<span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101349784.png" alt="image-20220310134915742"></p><h3 id="指定多列"><a href="#指定多列" class="headerlink" title="指定多列"></a>指定多列</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- 列名于列名之间要用 , 隔开</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101352075.png" alt="image-20220310135216035"></p><h2 id="查询字段为表达式"><a href="#查询字段为表达式" class="headerlink" title="查询字段为表达式"></a>查询字段为表达式</h2><p>我们可以对查询的字段进行算术运算，下面我以多列的形式来表现一下,我们先看看现象，后面在好好分析一下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span> <span class="token operator">+</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101358369.png" alt="image-20220310135811325"></p><blockquote><p>分析一下</p></blockquote><ul><li>我们看到表是一张<strong>临时表</strong>，<strong>原表的内容不会改变</strong></li><li>临时表的字段名和我们的表达式的形式一样</li><li>我们会看到，之前我们创建的表的math字段是这样，<strong>math DECIMAL(3,1),<strong>，我们都可以知道math的有效数据是三位，有一位是小数。但是我们 <strong>math+100</strong>,都超出了这个模式，实际上我们的临时表不遵循原表的限制，尽可能使得</strong>数据精确</strong>。</li></ul><h2 id="指定别名"><a href="#指定别名" class="headerlink" title="指定别名"></a>指定别名</h2><p>我们在看表达式查询的时候，出现了 <strong>id + id</strong>这样的字段名，看着很不舒服，我们想要对他指定别名</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">as</span> 别名<span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span> <span class="token operator">+</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span>  <span class="token comment" spellcheck="true">-- as 不写也可以</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101409252.png" alt="image-20220310140933212"></p><h2 id="去重查找"><a href="#去重查找" class="headerlink" title="去重查找"></a>去重查找</h2><p>我们再插入一个数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> exam_result <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span> chinese<span class="token punctuation">,</span> math<span class="token punctuation">,</span> english<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'宋公明'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'吴用'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101414956.png" alt="image-20220310141452911"></p><h3 id="指定单列去重"><a href="#指定单列去重" class="headerlink" title="指定单列去重"></a>指定单列去重</h3><p>现在我们开始进行去重</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">&lt;</span>字段名<span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- distinct 理解为关键字</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101417329.png" alt="image-20220310141713287"></p><blockquote><p>我们去重得到的表也是临时表</p></blockquote><h3 id="指定多列去重"><a href="#指定多列去重" class="headerlink" title="指定多列去重"></a>指定多列去重</h3><p>我们也可以多列去重，但是我们也要知道要求</p><ul><li>所有的 列名 在distinct后面</li><li>只有 当我们指定多列全部相同时，才会去重</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">&lt;</span>字段名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字段名<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101421381.png" alt="image-20220310142146335"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>排序很简单，我们看几个例子就可以了</p><ul><li>NULL不是0，是最小的 NULL ，<strong>加上任何数都是 NULL</strong></li><li><strong>asc 是升序    desc 是 降序</strong>，默认是升序</li><li>排序支持指定别名</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">order</span> <span class="token keyword">by</span> math <span class="token keyword">asc</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--  按照 math 的大小进行 升序</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101447538.png" alt="image-20220310144716493"></p><blockquote><p>按照总成绩   支持别名</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>chinese <span class="token operator">+</span> math <span class="token operator">+</span> english total <span class="token keyword">from</span> exam_result <span class="token keyword">order</span> <span class="token keyword">by</span> total <span class="token keyword">asc</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101452156.png" alt="image-20220310145234104"></p><blockquote><p>支持 多列来排序 </p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">asc</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 字段1 的优先级高</span></code></pre><ul><li>只有 字段1 相同时，才会比较 字段 2</li></ul><blockquote><p>升序和降序可以混合使用，但是也有优先级的</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询同学各门成绩，依次按 数学降序，英语升序，语文升序的方式显示</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> math<span class="token punctuation">,</span> english<span class="token punctuation">,</span> chinese <span class="token keyword">FROM</span> exam_result<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">DESC</span><span class="token punctuation">,</span> english<span class="token punctuation">,</span> chinese</code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101456678.png" alt="image-20220310145627630"></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>条件查询才是今天的正菜，我们用的是<strong>where判断语句</strong>，里面有条件表达式，我们先看一下条件查询的语句格式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>字段名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字段名<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">where</span> <span class="token operator">&lt;</span>判断语句<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;</td><td align="center">大于，大于等于，小于，小于等于</td></tr><tr><td align="center">&#x3D;</td><td align="center">等于，NULL 不安全，例如 NULL &#x3D; NULL 的结果是 NULL</td></tr><tr><td align="center">&lt;&#x3D;&gt;</td><td align="center">等于，NULL 安全，例如 NULL &lt;&#x3D;&gt; NULL 的结果是 TRUE(1)</td></tr><tr><td align="center">!&#x3D;, &lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">between A and B</td><td align="center">[A,B]</td></tr><tr><td align="center">int(a,b,c)</td><td align="center">数据只要是a，b，c中的一个就是 true</td></tr><tr><td align="center">is not null</td><td align="center">不是NULL 是 true</td></tr><tr><td align="center">is null</td><td align="center">是NULL 为true</td></tr><tr><td align="center">like</td><td align="center">模糊匹配 （下面细说）</td></tr></tbody></table><h3 id="算数运算符之-比较相等-x3D-amp-lt-x3D-gt"><a href="#算数运算符之-比较相等-x3D-amp-lt-x3D-gt" class="headerlink" title="算数运算符之 比较相等 (  &#x3D; &amp; &lt;&#x3D;&gt;  )"></a>算数运算符之 比较相等 (  &#x3D; &amp; &lt;&#x3D;&gt;  )</h3><p>我们来稍微说一下这两个的区别，大家一看就i明白了</p><h4 id="NULL-安全-lt-x3D-gt"><a href="#NULL-安全-lt-x3D-gt" class="headerlink" title="NULL 安全    &lt;&#x3D;&gt;"></a>NULL 安全    &lt;&#x3D;&gt;</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">&lt;=></span> <span class="token boolean">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- null 是安全的</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101859420.png" alt="image-20220310185912325"></p><h4 id="NULL不安全-x3D"><a href="#NULL不安全-x3D" class="headerlink" title="NULL不安全  &#x3D;"></a>NULL不安全  &#x3D;</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101901416.png" alt="image-20220310190121386"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>这里逻辑运算符和我们学的语言中的作用一样，我们一起来看看，</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">逻辑与</td></tr><tr><td align="center">or</td><td align="center">逻辑或</td></tr><tr><td align="center">not</td><td align="center">逻辑非</td></tr></tbody></table><h3 id="条件语句的使用"><a href="#条件语句的使用" class="headerlink" title="条件语句的使用"></a>条件语句的使用</h3><blockquote><p>后面的运算符我一一使用一下，很简单，我们没有用全部，他们的原理都是一样的</p></blockquote><h4 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">></span> math<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 语文成绩 大于 数学成绩 </span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101903834.png" alt="image-20220310190356797"></p><h4 id="between-A-and-B"><a href="#between-A-and-B" class="headerlink" title="between A and B"></a>between A and B</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">between</span> <span class="token number">70</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 语文成绩 在 70到100之间的，包括 70和100</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101906018.png" alt="image-20220310190616980"></p><h4 id="in-a，b，c，d．．．"><a href="#in-a，b，c，d．．．" class="headerlink" title="in(ａ，ｂ，ｃ，ｄ．．．)"></a>in(ａ，ｂ，ｃ，ｄ．．．)</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">70.0</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 语文成绩 在等于 67,70.0,88,100 几个中的一个</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101913539.png" alt="image-20220310191313497"></p><h4 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203102003609.png" alt="image-20220310200327568"></p><h4 id="and"><a href="#and" class="headerlink" title="and"></a>and</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> chinese <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">70.0</span><span class="token punctuation">,</span><span class="token number">88.0</span><span class="token punctuation">)</span> <span class="token operator">and</span> chinese <span class="token operator">></span> math<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101917010.png" alt="image-20220310191742967"></p><h3 id="模糊匹配-like"><a href="#模糊匹配-like" class="headerlink" title="模糊匹配 like"></a>模糊匹配 like</h3><p>模糊匹配的意思是看字符串是不是<strong>相似</strong>，我们需要搭配下面的通配符</p><ul><li>%  看作任意个 字符</li><li>_   看作一个字符</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'宋%'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--  只要是 以 宋 开头的</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101926961.png" alt="image-20220310192654918"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'宋_'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--  以 宋 头的 并且要有两个字符组成</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101928675.png" alt="image-20220310192811639"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>我们使用条件语句的时候，由于符号的<strong>优先级问题</strong>，最好加上括号，并且<strong>where语句后面不能使用别名</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>chinese <span class="token operator">+</span> math <span class="token operator">+</span> english total <span class="token keyword">from</span> exam_result <span class="token keyword">where</span> total <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--错误</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203102003077.png" alt="image-20220310200310042"></p><blockquote><p>我们查找的时候遵循 <strong>最左原则</strong>  也就是第一次除去数据最多的，后面的 依次减少，使得我们查找数据所用的时间最短</p></blockquote><h2 id="分页查找"><a href="#分页查找" class="headerlink" title="分页查找"></a>分页查找</h2><p>有时候我们就是只想要一个数据表一部分，比如要求要求考试的前三名，这就要使用 分页查找</p><p>分页的查找的关键字是 **limit **</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>math<span class="token operator">+</span>chinese<span class="token operator">+</span>english <span class="token keyword">as</span> total <span class="token keyword">from</span> exam_result <span class="token keyword">order</span> <span class="token keyword">by</span> total <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101935156.png" alt="image-20220310193526114"></p><p>我们也可以查找 第 4，5，6名同学的总成绩</p><p>使用  offset N  从下标为N的位置开始查找   下标从  0 开始</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>math<span class="token operator">+</span>chinese<span class="token operator">+</span>english <span class="token keyword">as</span> total <span class="token keyword">from</span> exam_result <span class="token keyword">order</span> <span class="token keyword">by</span> total <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token keyword">offset</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p> <img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101938046.png" alt="image-20220310193826003"></p><blockquote><p>这里有些注意的地方</p></blockquote><ul><li>limit A offset B ;  A 过大超出数据的数量  相当于 全部查找</li><li>limit A offset B ;  B过大 查找的数据为空</li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101941706.png" alt="image-20220310194133654"></p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>修改表中的数据我们也是比较常用的，这是真正修改原始表中数据的方法，这部分知识点较少</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">set</span> <span class="token operator">&lt;</span>字段名<span class="token number">1</span><span class="token operator">></span> <span class="token operator">=</span> 新数据 <span class="token punctuation">,</span> <span class="token operator">&lt;</span>字段名<span class="token number">2</span><span class="token operator">></span> <span class="token operator">=</span> 新数据 <span class="token keyword">where</span> 语句<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- where 语句 省略修改的是整张表</span></code></pre><p>我们使用一下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> exam_result <span class="token keyword">set</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> chinese <span class="token operator">=</span> <span class="token number">90</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'吴_'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101956089.png" alt="image-20220310195617013"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 将总成绩倒数前三的 3 位同学的数学成绩加上 30 分</span><span class="token keyword">update</span> exam_result <span class="token keyword">set</span> math <span class="token operator">=</span> math <span class="token operator">+</span> <span class="token number">30</span> <span class="token keyword">order</span> <span class="token keyword">by</span> chinese <span class="token operator">+</span> math <span class="token operator">+</span> english <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203101958157.png" alt="image-20220310195844098"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> exam_result <span class="token keyword">set</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--  把所有的 id 置为 0 </span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203102002095.png" alt="image-20220310200229044"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL字段约束</title>
      <link href="/2022/06/21/MySQL/06%20%E8%AF%A6%E8%A7%A3MySQL%E5%AD%97%E6%AE%B5%E7%BA%A6%E6%9D%9F/"/>
      <url>/2022/06/21/MySQL/06%20%E8%AF%A6%E8%A7%A3MySQL%E5%AD%97%E6%AE%B5%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>我们已经会创建数据表了，不过有时候会看到not null等字样，这些便是字段约束的内容，我们好好看一看什么是约束，又有哪些约束，这份博客时纯理论的，我们自己要理解这里面的内容</p></blockquote><h1 id="什么是字段约束"><a href="#什么是字段约束" class="headerlink" title="什么是字段约束"></a>什么是字段约束</h1><blockquote><p>简而言之，字段约束就是将字段的内容定一个规则，我们要按照规则办事，常见的字段约束有下面几个</p></blockquote><h2 id="约束的分类"><a href="#约束的分类" class="headerlink" title="约束的分类"></a>约束的分类</h2><ul><li><strong>not nul</strong>l  –  指示某列不能存储 NULL 值  </li><li><strong>unique</strong>   –  保证某列的每行必须有唯一的值  </li><li><strong>default</strong>   –  规定没有给列赋值时的默认值  </li><li>**primary key **            –  not null 和 unique 的结合。确保某列（或两个列多个列的结合）有唯一标<br>  识，有助于更容易更快速地找到表中的一个特定的记录  </li><li><strong>foreign key</strong>  – 保证一个表中的数据匹配另一个表中的值的参照完整性  </li><li><strong>check</strong>  – 保证列中的值符合指定的条件。对于MySQL数据库，对check子句进行分析，但是忽略<br>  check子句  ,我们不太常用，就不说了</li></ul><h1 id="为何要有字段约束"><a href="#为何要有字段约束" class="headerlink" title="为何要有字段约束"></a>为何要有字段约束</h1><ul><li>保证数据的完整性</li><li>保证数据的有效性</li></ul><h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><blockquote><p>我们有时候填表会发现有些是必填项，这里就是not null的作用，他要求这个表格不能为空，获取我们完整的信息</p></blockquote><h2 id="有效性"><a href="#有效性" class="headerlink" title="有效性"></a>有效性</h2><blockquote><p>在这里我们假设一个个场景，要是张三的电话号码是123×××××××45，那么李四的电话号码绝对不会和张三一摸一样，这里就体现出unique的作用了</p></blockquote><blockquote><p>我们先创建一个表格，来仔细看看</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> books<span class="token punctuation">(</span>    book_id char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    book_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    book_price <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/7f56b48e45464c6b8ee6199a1d697113.png" alt="在这里插入图片描述"></p><h1 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束  not null"></a>非空约束  <strong>not nul</strong>l</h1><blockquote><p><strong>非空约束</strong>比较简单，就是要求我们不能为空，命令为 <strong>not null</strong></p></blockquote><blockquote><p>在上面我们就看到了这行代码  <strong>book_id char(10) not null,</strong> 这就是说book_id不可以为空</p></blockquote><p><img src="https://img-blog.csdnimg.cn/c51820b9a66a431fbda227e0bdb7a2f7.png" alt="在这里插入图片描述"></p><h1 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束   unique"></a>唯一约束   unique</h1><blockquote><p>这里也很简单，<strong>唯一</strong> 的意思就是各不相同，代码是<strong>book_name varchar(20) unique,</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c4ec11377d864385aea566a045331cf9.png" alt="在这里插入图片描述"></p><h1 id="默认值约束-default"><a href="#默认值约束-default" class="headerlink" title="默认值约束  default"></a>默认值约束  default</h1><p>这个时定义默认值的，要是我们不定义，它是NULL</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203111936760.png" alt="image-20220311193658720"></p><p>我们先测试一下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">types</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203111949895.png" alt="image-20220311194916856"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">types</span> <span class="token punctuation">(</span>type_id<span class="token punctuation">,</span>type_remark<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--  部分列插入</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203111950432.png" alt="image-20220311195017392"></p><p>从这里我们可以看出当我们不进行插入值时，列就会是默认值</p><h1 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束   primary key"></a>主键约束   primary key</h1><blockquote><p>这里的主键约束相当于唯一约束和非空约束的集合，不过也会有一些另外的不同</p></blockquote><ol><li>主键约束 &#x3D; 非空约束 + 唯一约束</li><li>主键约束也是一个标识</li><li>一个表只能有一个主键，一个主键可以包含一个或多个列</li></ol><h2 id="创建主键"><a href="#创建主键" class="headerlink" title="创建主键"></a>创建主键</h2><p>我们最好每一张数据表都创建一个主键，后面我们用到<strong>索引</strong>的时候会说一下原因</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Persons<span class="token punctuation">(</span>per_id char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>per_name char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>per_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>per_tele char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span>  <span class="token comment" spellcheck="true">--  创建字段时指定</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Persons<span class="token punctuation">(</span>per_id char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>per_name char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>per_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>per_tele char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>per_tele char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">--   最后指定</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>看一看结果</p></blockquote><p><img src="https://img-blog.csdnimg.cn/1093001864f1458bb99798704633ae5a.png" alt="在这里插入图片描述"></p><h2 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h2><blockquote><p>这里就体现出主键约束和其他的一些不同，我们删除时就不需要看具体的字段</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Persons <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span>      </code></pre><p><img src="https://img-blog.csdnimg.cn/312d74ac715a4e64b08ba493e2c10804.png" alt="在这里插入图片描述"></p><h2 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Persons <span class="token keyword">modify</span> per_tele char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/4eef23deb4eb4554803ec1637724e6c4.png" alt="在这里插入图片描述"></p><h3 id="不能为空"><a href="#不能为空" class="headerlink" title="不能为空"></a>不能为空</h3><p><img src="https://img-blog.csdnimg.cn/134ef20c350d4b1fbc8864f5603b3cde.png" alt="在这里插入图片描述"></p><h3 id="不能相同"><a href="#不能相同" class="headerlink" title="不能相同"></a>不能相同</h3><p><img src="https://img-blog.csdnimg.cn/3dfeec37b9df4eb9a036062d34cb0a9b.png" alt="在这里插入图片描述"></p><h2 id="主键的自动增长"><a href="#主键的自动增长" class="headerlink" title="主键的自动增长"></a>主键的自动增长</h2><blockquote><p>在实际生活中，我们可能会遇到这么一个问题，很多字段我们不能保证他们不为空或者是两两不同的，我们可以创建出一个额外的字段让他们好寻找，自然而然的就会以1、2、3、…….来标识，不过这也太麻烦了，我们出现了自动增长的形式</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">types</span><span class="token punctuation">(</span>type_id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>type_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>type_remark char<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203111927005.png" alt="image-20220311192655896"></p><blockquote><p>这个代码将type_id设置为自动增长主键</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6dd5de7dff2c41baaef4646f9093b27c.png" alt="在这里插入图片描述"></p><blockquote><p>不过自动增长也有一些缺陷，要是我们删除一行，其他的type_id的值是不变的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/b3b5de43e8674d0baeab5c0a29eb3cd1.png" alt="在这里插入图片描述"></p><blockquote><p>这里我好好解释一下，只要我们添加了一行数据，他就会+1，即使我们后来删除了，它也不会    -1，是一直加的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9bd3c8858ec347e6807e5f03bb841415.png" alt="在这里插入图片描述"></p><h2 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h2><p>这里我先建一个数据表格，这张表中我们会发现，我们学生和课程只有在一起我们才能得到真实的成绩。所以这就出现了联合主键，联合主键，顾名思义就是多个主键联合形成一个主键组合，体现在联合。</p><p><img src="https://img-blog.csdnimg.cn/9c576431afc044278134ff97ddd07824.png" alt="在这里插入图片描述"></p><p>我发现这里的字段都不能作为主键，但是<strong>学生</strong>和<strong>课程</strong>连在一起却可以，这就是<strong>联合主键</strong></p><h3 id="如何定义联合主键"><a href="#如何定义联合主键" class="headerlink" title="如何定义联合主键"></a>如何定义联合主键</h3><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> grades<span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span> stu_name char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> stu_class char<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> stu_grade <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>stu_name<span class="token punctuation">,</span>stu_class<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--  stu_name 和 stu_class 一起 定义主键</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/40f2ed23d7644a35892c1696d62d257f.png" alt="在这里插入图片描述"></p><blockquote><p>这里面提示一下我们很少使用联合主键，我们可以额外提供一个字段作为识别</p></blockquote><h1 id="外键约束-foreign-key"><a href="#外键约束-foreign-key" class="headerlink" title="外键约束   foreign key"></a>外键约束   foreign key</h1><p>我们可能会疑惑什么是外键约束，我直接说一下，外键约束时<strong>联系多张表的约束</strong>，下面我用例子为大家说明一下</p><p>我们先创建两张表</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 班级表</span><span class="token keyword">create</span> <span class="token keyword">table</span> class<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 学生表</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>classId <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112235117.png" alt="image-20220311223532002"></p><blockquote><p>每一个同学肯定是属于一个班级的，我们向往班级表中插入一些数据</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java1班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java2班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java3班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java4班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112242258.png" alt="image-20220311224237207"></p><blockquote><p>下面我们可以假设这样一个场景，<strong>有一名同学叫做 李白，在  java1班学习</strong>，我们可以这么记录</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'李白'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">--   java1班 的id  是1</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112250025.png" alt="image-20220311225017985"></p><blockquote><p>上面的情况很正常，但要是我们下面这么插入数据啊。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'杜甫'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="C:/Users/DELL/AppData/Roaming/Typora/typora-user-images/image-20220311225213787.png" alt="image-20220311225213787"></p><p><strong>我们没有id 是100的班级，但是我们也成功插入了，这就和实际产生了差异，这就引出了外键约束</strong>。外键很简单，要是两张表有联系就可以使用外键约束</p><h2 id="正确使用外键"><a href="#正确使用外键" class="headerlink" title="正确使用外键"></a>正确使用外键</h2><p>我们向把班级表和学生表删除，重新创建、</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">tables</span> class<span class="token punctuation">,</span>student<span class="token punctuation">;</span></code></pre><h3 id="创捷班级表"><a href="#创捷班级表" class="headerlink" title="创捷班级表"></a>创捷班级表</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建班级表     不变</span><span class="token keyword">create</span> <span class="token keyword">table</span> class<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 添加数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java1班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java2班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java3班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span><span class="token string">'java4班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="创捷学生表"><a href="#创捷学生表" class="headerlink" title="创捷学生表"></a>创捷学生表</h3><p>外键的创建有些麻烦，我们先列出格式</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>本表的字段<span class="token punctuation">)</span> <span class="token keyword">references</span> 其他表的表名<span class="token punctuation">(</span>其他表的表名的字段<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">-- ()号是存在的</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>classId <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classId<span class="token punctuation">)</span> <span class="token keyword">references</span> class<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--   解释这句话   我们定义一个外键，是classId，链接 class表中的  id  字段</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112304161.png" alt="image-20220311230413111"></p><p>当我们开始插入数据后，MySQL会自动帮助我们进行校验，我们来几次</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'李白'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'曹操'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'杜甫'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112310379.png" alt="image-20220311231042335"></p><p>但我们插入class中不存在的id时，出现错误</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'错误'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112312579.png" alt="image-20220311231214545"></p><h3 id="外键约束的缺陷"><a href="#外键约束的缺陷" class="headerlink" title="外键约束的缺陷"></a>外键约束的缺陷</h3><p>我们使用外键会有一些小问题的。</p><ul><li>效率有些低，我们插入数据时要查询另一张表的数据</li><li>不太能被关联的表，下面我用代码表示一下</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> class<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203112319534.png" alt="image-20220311231925496"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL数据库之索引</title>
      <link href="/2022/06/21/MySQL/07%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/06/21/MySQL/07%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>一对一   身份证号</p><p>一对多  班级 中N个学生</p><p>多对多 </p><p>书的目录 英文 一样</p><p>加快查找的效率</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL中数据库的的增删改查 进阶</title>
      <link href="/2022/06/21/MySQL/08%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%20%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/06/21/MySQL/08%20%E8%AF%A6%E8%A7%A3MySQL%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%20%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这篇博客主要是数据库增删查改的的进阶，我们在这里要学习聚合查询和联合查询，其中联合查询是我们经常使用的，并且有一定的难度，我们需要经常练习。</p><h1 id="查找到的数据插入到另一张表中"><a href="#查找到的数据插入到另一张表中" class="headerlink" title="查找到的数据插入到另一张表中"></a>查找到的数据插入到另一张表中</h1><p>我们以前使用过select查询一张表中的数据，那么我们是否可以把查到的数据保存到另一张表里面呢，事实上，我们可以做到</p><h2 id="创建一张-原始表"><a href="#创建一张-原始表" class="headerlink" title="创建一张 原始表"></a>创建一张 原始表</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建一张 原始表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>decription <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入一些数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'曹操'</span><span class="token punctuation">,</span><span class="token string">'乱世枭雄'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token string">'仁德之主'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'孙权'</span><span class="token punctuation">,</span><span class="token string">'年轻有为'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121837217.png" alt="image-20220312183736081"></p><h2 id="创建保存表"><a href="#创建保存表" class="headerlink" title="创建保存表"></a>创建保存表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> user2<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>decription <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="开始查找并保存"><a href="#开始查找并保存" class="headerlink" title="开始查找并保存"></a>开始查找并保存</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> user2 <span class="token keyword">select</span> name<span class="token punctuation">,</span>decription <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span> </code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121840361.png" alt="image-20220312184058293"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>子查询得到的 <strong>列顺序</strong> 和 **类型 **要相同</p></li><li><p>列名一不一样没有挂巴西</p></li><li><p>我们查询得到的数据保存时一定要相匹配</p></li></ul><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121843168.png" alt="image-20220312184347126"></p><hr><h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><p>聚合查询很简单，就是借助我们SQL的内置的函数就可以了，我们不关心他们是如何实现的，熟练掌握就可以了。下面我们来看看都有哪些函数。我们就一些例子来说，由于他们使用的方法都是一样的，我们就说一部分就可以了</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>下面是内置函数的分类和说明，我们看一看看就可以了，用着用着就会了。这些内置函数的得到的都是一张<strong>临时表</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">count()</td><td align="center">返回查询到的数据的 数量</td></tr><tr><td align="center">max()</td><td align="center">返回查询到的数据的 最大值，不是数字没有意义</td></tr><tr><td align="center">min()</td><td align="center">返回查询到的数据的 最小值，不是数字没有意义</td></tr><tr><td align="center">avg()</td><td align="center">返回查询到的数据的 平均值，不是数字没有意义</td></tr><tr><td align="center">sum()</td><td align="center">返回查询到的数据的 总和，不是数字没有意义</td></tr></tbody></table><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>count 这个函数很奇怪，我们在使用的的时候一定要小心，下面让我们来看看它的用法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 计算 id  的行数</span></code></pre><blockquote><p>这个是是计算 字段 <strong>id</strong> 所占据的函数，<strong>但是要是 id 的值位 NULL ，这一行就不计算</strong></p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- 计算 所有列  的行数 去最大值</span></code></pre><blockquote><p>一般情况下，得到的值和任意列的行数相同，但是有 NULL 的话就不一定了</p></blockquote><blockquote><p>只要默认值不是NULL 都计算</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">types</span><span class="token punctuation">(</span>type_id <span class="token keyword">int</span><span class="token punctuation">,</span>type_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'unknow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">types</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">types</span> <span class="token punctuation">(</span>type_id<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121919193.png" alt="image-20220312191905128"></p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>count  不计算NULL的值   可以计算其他默认值</li><li>count后不能有空格</li></ul><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>sum 是计算指定列的和，我们也可以使用where语句进行一部分的求和</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>score <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'曹操'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'孙权'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121932941.png" alt="image-20220312193235821"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--  允许指定别名  </span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121934154.png" alt="image-20220312193418066"></p><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121935037.png" alt="image-20220312193554005"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> score <span class="token operator">&lt;</span> <span class="token number">85</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">-- 计算 分数 小于85 的同学的平均数</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203121938501.png" alt="image-20220312193802467"></p><h2 id="group-by-子句"><a href="#group-by-子句" class="headerlink" title="group by 子句"></a>group by 子句</h2><p>group by 子句主要是为了分组,我们指定字段,将字段内容相同的分为一组,这和去重不一样,后面用到是的时候你就会发现</p><blockquote><p>使用 group by 进行分组查询时，select 指定的字段必须是“分组依据字段”，其他字段若想出现在select  中则必须包含在聚合函数中  </p></blockquote><p>我先创建一个环境</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>role <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>name<span class="token punctuation">,</span> role<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'马云'</span><span class="token punctuation">,</span><span class="token string">'服务员'</span><span class="token punctuation">,</span> <span class="token number">1000.20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'马化腾'</span><span class="token punctuation">,</span><span class="token string">'游戏陪玩'</span><span class="token punctuation">,</span> <span class="token number">2000.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'游戏角色'</span><span class="token punctuation">,</span> <span class="token number">999.11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'猪无能'</span><span class="token punctuation">,</span><span class="token string">'游戏角色'</span><span class="token punctuation">,</span> <span class="token number">333.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'沙和尚'</span><span class="token punctuation">,</span><span class="token string">'游戏角色'</span><span class="token punctuation">,</span> <span class="token number">700.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'隔壁老王'</span><span class="token punctuation">,</span><span class="token string">'董事长'</span><span class="token punctuation">,</span> <span class="token number">12000.66</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查询每个角色的最高-最低-平局工资"><a href="#查询每个角色的最高-最低-平局工资" class="headerlink" title="查询每个角色的最高 最低 平局工资"></a>查询每个角色的最高 最低 平局工资</h3><p>这就要使用分组,分组后还可以使用内置函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> role <span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> role<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161256390.png" alt="image-20220316125638348"></p><h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><p>having 和 where语句作用是一样的,只不过它使用与group by 语句中</p><h3 id="查询平均工资大于1000的角色"><a href="#查询平均工资大于1000的角色" class="headerlink" title="查询平均工资大于1000的角色"></a>查询平均工资大于1000的角色</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> role<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> role <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161300350.png" alt="image-20220316130025311"></p><hr><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><blockquote><p>联合查询才是我们今天的正菜，这就要求高了，联合查询是<strong>多张表</strong>之间的查询，我们会经常使用</p></blockquote><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><p>很抱歉，即使在计算机学习中我们也要听到这个“恶魔”的名字，不错他就是那个笛卡尔坐标系的笛卡尔，很庆幸我们不会学那么难的，就一个很简单的知识点，下面我画图表示</p><p>笛卡尔积的计算很简单，只需要表的函数相乘就可以了，不过这是我们学习联合查询的基础</p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161214557.png" alt="image-20220316121442492"></p><h3 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建班级表</span><span class="token keyword">create</span> <span class="token keyword">table</span> classes<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建课程表</span><span class="token keyword">create</span> <span class="token keyword">table</span> course <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建分数表</span><span class="token keyword">create</span> <span class="token keyword">table</span> score<span class="token punctuation">(</span>score <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>student_id <span class="token keyword">int</span><span class="token punctuation">,</span>course_id <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建学生表</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>sn <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qq_mail <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>classes_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161104848.png" alt="image-20220316110427684"></p><p>插入一些数据  班级</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> classes<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'计算机系2019级1班'</span><span class="token punctuation">,</span> <span class="token string">'学习了计算机原理、C和Java语言、数据结构和算法'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'中文系2019级3班'</span><span class="token punctuation">,</span><span class="token string">'学习了中国传统文学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'自动化2019级5班'</span><span class="token punctuation">,</span><span class="token string">'学习了机械自动化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'Java'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'中国传统文化'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'计算机原理'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'高阶数学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'英文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>sn<span class="token punctuation">,</span> name<span class="token punctuation">,</span> qq_mail<span class="token punctuation">,</span> classes_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'09982'</span><span class="token punctuation">,</span><span class="token string">'黑旋风李逵'</span><span class="token punctuation">,</span><span class="token string">'xuanfeng@qq.com'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00835'</span><span class="token punctuation">,</span><span class="token string">'菩提老祖'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00391'</span><span class="token punctuation">,</span><span class="token string">'白素贞'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00031'</span><span class="token punctuation">,</span><span class="token string">'许仙'</span><span class="token punctuation">,</span><span class="token string">'xuxian@qq.com'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'00054'</span><span class="token punctuation">,</span><span class="token string">'不想毕业'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'51234'</span><span class="token punctuation">,</span><span class="token string">'好好说话'</span><span class="token punctuation">,</span><span class="token string">'say@qq.com'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'83223'</span><span class="token punctuation">,</span><span class="token string">'tellme'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'09527'</span><span class="token punctuation">,</span><span class="token string">'老外学中文'</span><span class="token punctuation">,</span><span class="token string">'foreigner@qq.com'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score<span class="token punctuation">(</span>score<span class="token punctuation">,</span> student_id<span class="token punctuation">,</span> course_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token comment" spellcheck="true">-- 黑旋风李逵</span><span class="token punctuation">(</span><span class="token number">70.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">98.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 菩提老祖</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">59.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 白素贞</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 许仙</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 不想毕业</span><span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 好好说话</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- tellme</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161106449.png" alt="image-20220316110615316"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161109768.png" alt="image-20220316110905700"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161111150.png" alt="image-20220316111138020"></p><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161112011.png" alt="image-20220316111217877"></p><h2 id="查询每一个学生的每一门成绩"><a href="#查询每一个学生的每一门成绩" class="headerlink" title="查询每一个学生的每一门成绩"></a>查询每一个学生的每一门成绩</h2><p>分析我们这个要求</p><ol><li>学生在 student表中  </li><li>课程在 course表中</li><li>成绩在score表中</li></ol><p>下面我们就可以写出下面代码,</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161230465.png" alt="image-20220316123017422"></p><p>我们发现结果有 960行,这肯定是不对的,我们得到了一些无效的数据.后面要加判断语句</p><blockquote><p>我们发现要取的有效数据,学生的id一定要和成绩表的学生的id一定要相等</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161237121.png" alt="image-20220316123723086"></p><p>只有120行了,还要加判断条件,课程id和成绩表的课程id也要相等</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id <span class="token operator">and</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161240000.png" alt="image-20220316123959946"></p><p>这样就完成了,我们呢也可以简单一下表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token keyword">as</span> course_name<span class="token punctuation">,</span>score<span class="token punctuation">.</span>score <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score<span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id <span class="token operator">and</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161241162.png" alt="image-20220316124139107"></p><h2 id="计算每一名同学的总成绩"><a href="#计算每一名同学的总成绩" class="headerlink" title="计算每一名同学的总成绩"></a>计算每一名同学的总成绩</h2><p>配合使用聚合函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token punctuation">,</span>course<span class="token punctuation">.</span>name <span class="token keyword">as</span> course_name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>score<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">,</span>course<span class="token punctuation">,</span>score <span class="token keyword">where</span> student<span class="token punctuation">.</span>id <span class="token operator">=</span> score<span class="token punctuation">.</span>student_id <span class="token operator">and</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> student<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161246309.png" alt="image-20220316124623265"></p><p>我们会了基本的联合查询后,就要开始下面几个比较难的的知识点了</p><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>这个知识点我们了解就可以了,不过要记住 join on 的查询方法</p><p>我们看一下语法,只需要看看就可以,重点结合例子</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名<span class="token number">2</span> <span class="token keyword">on</span> 连接条件 <span class="token operator">and</span> 其他条件<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- inner 可以省略</span><span class="token keyword">select</span> 字段 <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span> 别名<span class="token number">2</span> <span class="token keyword">where</span> 连接条件 <span class="token operator">and</span> 其他条件<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sco<span class="token punctuation">.</span>score <span class="token keyword">from</span> student stu <span class="token keyword">inner</span> <span class="token keyword">join</span> score sco <span class="token keyword">on</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>student_id<span class="token operator">and</span> stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'许仙'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">select</span> sco<span class="token punctuation">.</span>score <span class="token keyword">from</span> student stu<span class="token punctuation">,</span> score sco <span class="token keyword">where</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>student_id <span class="token operator">and</span>stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'许仙'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161306699.png" alt="image-20220316130630653"></p><p>观察下面的结果,我们有8个学生,但是结果只有7个,原因就是 score 中没有<strong>老外学中文的id</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student stu <span class="token keyword">join</span> score sco <span class="token keyword">on</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203161318648.png" alt="image-20220316131823578"></p><blockquote><p>我们可以这样理解,当我们对笛卡尔积的结果进行筛选,筛选的结果一定在两张表中都存咋,这就是内链接,可以立即为交集</p></blockquote><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>谈完内连接,一定会有外连接,实际工作中,主要以内连接为主,不过我们也要了解我找了一篇文章,很不错,大家可以看看<a href="https://mp.weixin.qq.com/s?src=11&timestamp=1647408609&ver=3679&signature=zQpoxVv5U1fYDFX2wzgMBLlbb2OpRj7YdeoHyvQk1WPzhxF2I3S9MoIb5AEl4BsvbmSNoa1ZtG2y8VmOMhdWd55wx0TH9ri6mu7t*3yq1xZ8cZD27SwFkj7yNLaOCtXU&new=1">理解内连接外连接</a></p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>我们不谈外连接，这里就要说说什么是自连接。<strong>自连接是指在同一张表连接自身进行查询</strong>。我们可以把一张表看作是两张一摸一样的表来进行多表查询，这里我们仍然通过例子来演示.</p><p>&#x3D;&#x3D;问题 : 显示所有“计算机原理”成绩比“Java”成绩差的成绩信息&#x3D;&#x3D;</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 先查询“计算机原理”和“Java”课程的id</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> course <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Java'</span> <span class="token operator">or</span> name<span class="token operator">=</span><span class="token string">'计算机原理'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171503032.png" alt="image-20220317150301990"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 再查询成绩表中，“计算机原理”成绩比“Java”成绩 差的信息</span><span class="token keyword">select</span> s1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> score s1 <span class="token punctuation">,</span>score s2 <span class="token keyword">where</span> s1<span class="token punctuation">.</span>student_id <span class="token operator">=</span> s2<span class="token punctuation">.</span>student_id <span class="token operator">and</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>course_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> s2<span class="token punctuation">.</span>course_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> s1<span class="token punctuation">.</span>score <span class="token operator">></span> s2<span class="token punctuation">.</span>score<span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171506016.png" alt="image-20220317150614972"></p><p>当然我们也可以使用 join on 语句</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询倒是很简单，我们可以把几个select在同一条语句中使用，下面是定义</p><blockquote><p>子查询是指嵌入在其他sql语句中的select语句，也叫嵌套查询  </p></blockquote><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><p>我们用例子来演示</p><p>&#x3D;&#x3D;问题 : 查询与“不想毕业” 同学的同班同学&#x3D;&#x3D;</p><h3 id="我们可以先使用普通的查询方法"><a href="#我们可以先使用普通的查询方法" class="headerlink" title="我们可以先使用普通的查询方法"></a>我们可以先使用普通的查询方法</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找 “不想毕业” 同学的 班级id</span><span class="token keyword">select</span> classes_id <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'不想毕业'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找所有学生班级id 与 “不想毕业” 同学 班级id 相同的学生</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> classes_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171438600.png" alt="image-20220317143800489"></p><h3 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h3><p>我们只需要一步就可以了</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> classes_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> classes_id <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'不想毕业'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171440700.png" alt="image-20220317144002644"></p><h2 id="多行查询"><a href="#多行查询" class="headerlink" title="多行查询"></a>多行查询</h2><p>有时侯，单行查询的结果是远远不够的，你看看下面的问题</p><p>&#x3D;&#x3D;问题：查询“语文”或“英文”课程的成绩信息&#x3D;&#x3D;</p><p>我们无法使用上面的的语句，这就需要多行行查询的结果，下面有两种方式可以解决</p><h3 id="使用-in"><a href="#使用-in" class="headerlink" title="使用 in"></a>使用 in</h3><p>我们直接使用，解释在下面</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> course_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> course <span class="token keyword">where</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'语文'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'英文'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171448005.png" alt="image-20220317144805958"></p><h3 id="使用-exists"><a href="#使用-exists" class="headerlink" title="使用 exists"></a>使用 exists</h3><p>这个方法我们有点难理解，记住就。一般情况下我们都是使用第一种方法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> score sco <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sco<span class="token punctuation">.</span>course_id <span class="token keyword">from</span> course cou<span class="token keyword">where</span> <span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'语文'</span> <span class="token operator">or</span> name<span class="token operator">=</span><span class="token string">'英文'</span><span class="token punctuation">)</span> <span class="token operator">and</span> cou<span class="token punctuation">.</span>id <span class="token operator">=</span> sco<span class="token punctuation">.</span>course_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171449309.png" alt="image-20220317144946262"></p><blockquote><p>现在让我们来解释一下这些原理</p></blockquote><ul><li>对于 <strong>in</strong> ： SQL是先执行where语句后面的得到语文和英文课程的id 然后就是我们可以理解的查询语句了</li><li>对于 <strong>exists</strong> ： SQL先执行where前面的，得到的每一条数据看看是否符合后面的判断语句。</li></ul><h1 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h1><p>这是最后一个查询。很简单的</p><blockquote><p>在实际应用中，为了合并多个select的执行结果，可以使用集合操作符 union，union all。使用union<br>和union all时，前后查询的结果集中，字段需要一致  </p></blockquote><p>&#x3D;&#x3D;问题:查询id小于3，或者名字为“英文”的课程&#x3D;&#x3D;</p><p>我们使用平常的方法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'英文'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171512838.png" alt="image-20220317151242792"></p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>我们也可以通过使用union来解决</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'英文'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171514094.png" alt="image-20220317151446048"></p><h3 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h3><p>我们可能会疑惑union all这个是什么玩意，看看下面的现象你就会明白了</p><p>&#x3D;&#x3D;问题: 查询id小于3，或者名字为“Java”的课程&#x3D;&#x3D;</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用 union</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'java'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171518732.png" alt="image-20220317151834686"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用 union all</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'java'</span><span class="token punctuation">;</span></code></pre><p><img src="https://qkj0302.oss-cn-beijing.aliyuncs.com/img2/screenshot202203171519319.png" alt="image-20220317151957271"></p><p>这里你就会发现，当我们使用union all的时候，即使得到重复的数据也不会省略</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
